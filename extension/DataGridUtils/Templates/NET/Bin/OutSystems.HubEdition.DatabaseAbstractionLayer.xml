<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OutSystems.HubEdition.DatabaseAbstractionLayer</name>
    </assembly>
    <members>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.BaseDatabaseProvider.Key">
            <summary>
            Returns a unique identifier of the database provider, used to identify it as a plugin
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.BaseDatabaseProvider.Properties">
            <summary>
            Gets the <see cref="T:OutSystems.HubEdition.Extensibility.Data.IProviderProperties"/> instance associated with this database provider.
            </summary>
            <value>The provider properties.</value>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.BaseDatabaseProvider.CreateEmptyIntegrationDatabaseConfiguration">
            <summary>
            Returns an empty <see cref="T:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.IIntegrationDatabaseConfiguration"/>.
            </summary>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.BaseDatabaseProvider.GetIntegrationDatabaseServices(OutSystems.HubEdition.Extensibility.Data.ConfigurationService.IRuntimeDatabaseConfiguration)">
            <summary>
            Returns the services provided by the DBMS.
            </summary>
            <param name="databaseConfiguration">The database configuration.</param>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.BaseDatabaseProvider.Equals(OutSystems.HubEdition.Extensibility.Data.IDatabaseProvider)">
            <summary>
            Returns true if the <see cref="P:OutSystems.HubEdition.Extensibility.Data.BaseDatabaseProvider.Key"/> of both providers is equal
            </summary>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.BaseProviderProperties">
            <summary>
            Base implementation of a class to represent a set of properties that are specific to a database provider.
            </summary>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.BaseProviderProperties.#ctor(OutSystems.HubEdition.Extensibility.Data.IDatabaseProvider)">
            <summary>
            Fills the database provider information.
            </summary>
            <param name="provider">The database provider.</param>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.BaseProviderProperties.DatabaseProvider">
            <summary>
            This property represents the associated <see cref="T:OutSystems.HubEdition.Extensibility.Data.IDatabaseProvider" /> instance.
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.BaseProviderProperties.DisplayName">
            <summary>
            Gets the friendly name of the database provider.
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.BaseProviderProperties.PlatformDisplayName">
            <summary>
            Gets the friendly name of the database provider, when used to run the OutSystems Platform.
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.BaseProviderProperties.DatabaseContainerName">
            <summary>
            Gets the friendly name of the database container (e.g. database, catalog, schema, ...), used 
            for UI generation and messages displayed to the end-user.
            This implementation return "Database"
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.BaseProviderProperties.SupportsMultipleActiveResultSets">
            <summary>
            Indicates if the provider's driver supports more than one active result set for a single connection.
            This implementation returns true.
            </summary>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.AdvancedConfiguration.IsSet">
            <summary>
            Returns true if connection string advanced parameters are set.
            </summary>
            <returns>True if the advanced parameters are set, False otherwise.</returns>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.AdvancedConfiguration.AdvancedConnectionStringField">
            <summary>
            This property represents the field that will store connection string advanced parameters.
            This field is displayed when defining an advanced database connection.
            </summary>
            <value>
            The advanced connection string.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.AdvancedConfiguration.AdvancedConnectionStringFieldHelp">
            <summary>
            Help text that is displayed next to the advanced connection string parameters field in the user interface.
            This text should provide information regarding the format of the configuration parameters and examples on how to define them.
            </summary>
            <value>
            A help message to display in the user interface.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.AdvancedConfiguration.AdvancedConnectionStringFieldLabel">
            <summary>
            Gets the label text to display in the user interface for the connection string advanced parameters field.
            </summary>
            <value>
            The label to display in the user interface.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.AdvancedConfiguration.ConnectionStringTemplateExpression">
            <summary>
            Gets an expression that assists on creating a preview of the resulting connection string in the user interface.
            This expression should be a string that contains tokens that match the name of the AdvancedConnectionStringField property
            as well as additional configuration parameters that belong to the 'UserSpecific' region.
            A typical use for this expression is to hide sensitive information like passwords.
            In the following example, the value for the 'Username' and the 'AdvancedConnectionStringField'
            parameters, set by the user, will replace the corresponding tokens.
            This allows the user interface to be updated with these values without disclosing
            the value of the password field showing an hard-coded value, in this case '&lt;hidden&gt;'.
            Example: <code>[user id=$Username;password=&lt;hidden&gt;;]$AdvancedConnectionStringField"</code>
            </summary>
            <value>
            An expression that creates a preview of the resulting connection string.
            </value>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.AuthenticationType">
            <summary>
            Values that represent the authentication type to be used to access the database.
            </summary>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.BaseDatabaseConfiguration">
            <summary>
            Base implementation of the <see cref="T:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.IIntegrationDatabaseConfiguration"/> interface, that
            encapsulates a connection string and other configuration information required
            to connect to a database.
            Extend this class to create a specific database configuration.
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.BaseDatabaseConfiguration.DatabaseProvider">
            <summary>
            Gets the database provider. It provides information about the database,
            and access to its services.
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.BaseDatabaseConfiguration.ConnectionString">
            <summary>
            Gets the connection string that allows connecting to a database.
            If the <see cref="P:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.BaseDatabaseConfiguration.ConnectionStringOverride"/> is defined, returns it,
            if an advanced connection string is defined returns the result of <see cref="M:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.BaseDatabaseConfiguration.AssembleAdvancedConnectionString"/>.
            Otherwise returns the result of <see cref="M:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.BaseDatabaseConfiguration.AssembleBasicConnectionString"/>.
            </summary>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.BaseDatabaseConfiguration.AssembleBasicConnectionString">
            <summary>
            Returns a basic connection string with attributes such as username and password.
            </summary>
            <returns>A basic connection string.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.BaseDatabaseConfiguration.AssembleAdvancedConnectionString">
            <summary>
            Returns an advanced connection string with attributes that might be specific for a particular database.
            </summary>
            <returns>An advanced connection string.</returns>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.BaseDatabaseConfiguration.ConnectionStringOverride">
            <summary>
            This property represents the connection string that overrides specified configuration parameter values.
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.BaseDatabaseConfiguration.AdvancedConfiguration">
            <summary>
            This property represents the advanced configuration object.
            </summary>
            <value>The advanced configuration object.</value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.BaseDatabaseConfiguration.DatabaseIdentifier">
            <summary>
            This property represents the database identifier to be used in the configuration.
            </summary>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.BaseDatabaseConfiguration.Join(System.String,System.String)">
            <summary>
            Concatenates the connection string with the supplied extra parameters.
            </summary>
            <param name="connectionStringWithoutExtras">Connection string without any extra parameters.</param>
            <param name="extras">Extra parameters to be added to the connection string.</param>
            <returns>A string representation of the new connection string after joining the extra parameters.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.BaseDatabaseConfiguration.Equals(System.Object)">
            <summary>
            Determines whether the current object is equal to the specified <see cref="T:System.Object" />.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with.</param>
            <returns>True if the instance is equal to the specified <see cref="T:System.Object" />, False otherwise.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.BaseDatabaseConfiguration.GetHashCode">
            <summary>
            Returns the hash code for this object.
            </summary>
            <returns>The hash code for this object.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.BaseDatabaseConfiguration.GetHashCodeBasedOnParts(System.Object[])">
            <summary>
            Returns the hash code of a list of objects.
            </summary>
            <param name="parts">A list of objects.</param>
            <returns>An hash code.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.BaseDatabaseConfiguration.EqualsBasedOnParts(System.Object[],System.Object[])">
            <summary>
            Compares two lists of objects.
            </summary>
            <param name="parts1">A list of objects.</param>
            <param name="parts2">Another list of objects.</param>
            <returns>True if the two lists are equal, False otherwise.</returns>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.ConfigurationParameter">
            <summary>
            Attribute used to identify configuration parameters.
            This attribute should be used in a database configuration objects.
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.ConfigurationParameter.Encrypt">
            <summary>
            Defines if the attribute should be encrypted
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.ConfigurationParameter.Persist">
            <summary>
            Defines if this parameter should be persisted
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.ConfigurationParameter.RuntimeSettingName">
            <summary>
            Defines the full name of Setting.
            Optional field.
            Note: The setting will need to be saved in the .config file outside of the DAL
            </summary>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.ConfigurationSerializationException">
            <summary>
            Exception for signalling configuration serialization errors.
            </summary>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.IIntegrationDatabaseConfiguration">
            <summary>
            Encapsulates a connection string and other configuration information required to connect
            to a database.
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.IIntegrationDatabaseConfiguration.DatabaseProvider">
            <summary>
            Gets the database provider. It provides information about the database,
            and access to its services.
            </summary>
            <value>
            The database provider.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.IIntegrationDatabaseConfiguration.ConnectionString">
            <summary>
            Gets the connection string that allows connecting to a database.
            </summary>
            <value>
            The connection string.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.IIntegrationDatabaseConfiguration.DatabaseIdentifier">
            <summary>
            Gets the database identifier to be used in the configuration.
            </summary>
            <value>
            The database identifier.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.IIntegrationDatabaseConfiguration.AdvancedConfiguration">
            <summary>
            Gets the advanced configuration object that allows users to set connection parameters in an advanced way.
            </summary>
            <value>
            The advanced configuration object.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.IIntegrationDatabaseConfiguration.ConnectionStringOverride">
            <summary>
            Gets the connection string that overrides specified configuration parameter values.
            </summary>
            <value>
            The connection string.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.IIntegrationDatabaseConfiguration.RuntimeDatabaseConfiguration">
            <summary>
            Gets the object that compacts all the needed configuration parameters to be used in runtime.
            </summary>
            <value>
            The runtime database configuration.
            </value>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.IRuntimeDatabaseConfiguration">
            <summary> The configuration object used to create services and open connections to the
            database. <remarks>We have other configuration interfaces like <see
            cref="T:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.IIntegrationDatabaseConfiguration" /> that are used to specify the UI of a
            configuration screen.</remarks> </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.IRuntimeDatabaseConfiguration.Username">
            <summary>
            The user that this configuration uses to connect to the database.
            </summary>
            <value>
            The username.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.IRuntimeDatabaseConfiguration.DatabaseProvider">
            <summary>
            Gets the database provider. It provides information about the database,
            and access to its services.
            </summary>
            <value>
            The database provider.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.IRuntimeDatabaseConfiguration.ConnectionString">
            <summary>
            Gets the connection string that allows connecting to a database.
            </summary>
            <value>
            The connection string.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.IRuntimeDatabaseConfiguration.DatabaseIdentifier">
            <summary>
            Gets the database identifier to be used in the configuration.
            </summary>
            <value>
            The database identifier.
            </value>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.MetaConfiguration.IUserDefinedDatabaseParameter">
            <summary>
            Interface for annotated parameter.
            </summary>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.MetaConfiguration.MetaDatabaseConfiguration">
            <summary>
            Represents the meta-information about a database configuration.
            </summary>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.MetaConfiguration.MetaDatabaseConfiguration.GetParameter(System.String)">
             <summary>
             Returns a parameter with the given name.
             </summary>
            
             <param name="name">The parameter's name.</param>
            
             <returns>A parameter with the given name.</returns>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.MetaConfiguration.MetaDatabaseConfiguration.VisibleParameters">
             <summary>
             Gets a list of visible parameters.
             </summary>
            
             <value>The list of visible parameters.</value>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.MetaConfiguration.UserDefinedDatabaseParameter">
            <summary>
            Represents a parameter defined by a specific implementation of a database provider tagged accordingly. (Wrapper to IUserDefinedPluginParameter)
            </summary>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.MetaConfiguration.UserDefinedDatabaseParameter.#ctor(OutSystems.PluginAPI.PluginConfiguration.Introspection.IUserDefinedPluginParameter,OutSystems.HubEdition.Extensibility.Data.ConfigurationService.UserDefinedConfigurationParameter)">
             <summary>Constructor to create a new parameter.</summary>
            
             <param name="wrappedParameter">The wrapped IUserDefinedPluginParameter.</param>
             <param name="annotation">The annotation.</param>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.MetaConfiguration.UserDefinedDatabaseParameter.Visible">
             <summary>
             Invokes the visibilityChecker method to check whether this parameter is visible or not.
             </summary>
            
             <value>True if the parameter is visible or False if not.</value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.MetaConfiguration.UserDefinedDatabaseParameter.Label">
             <summary>
             Gets the label that represents the parameter.
             </summary>
            
             <value>The label representing the parameter.</value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.MetaConfiguration.UserDefinedDatabaseParameter.Example">
             <summary>
             Returns information about the parameter.
             </summary>
            
             <value>The information to be shown.</value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.MetaConfiguration.UserDefinedDatabaseParameter.Mandatory">
             <summary>
             Gets a value indicating whether the parameter is mandatory or not.
             </summary>
            
             <value>True if the parameter is mandatory or False if not.</value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.MetaConfiguration.UserDefinedDatabaseParameter.Order">
             <summary>
             Gets the order of the parameter inside the region.
             </summary>
            
             <value>An integer that represents the parameter's order inside the region.</value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.MetaConfiguration.UserDefinedDatabaseParameter.Region">
             <summary>
             Gets the UI region of the parameter.
             </summary>
            
             <value>Object that represents the region where the parameter will be.</value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.MetaConfiguration.UserDefinedDatabaseParameter.IsPassword">
             <summary>
             Gets a value indicating whether this object is password.
             </summary>
            
             <value>True if this parameter is representing password or False if not.</value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.MetaConfiguration.UserDefinedDatabaseParameter.Multiline">
            <summary>This property indicates whether this object uses a multiline text.</summary>
            <value>True if this object has multiline text, false if not.</value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.MetaConfiguration.UserDefinedDatabaseParameter.AutoCompleteExpression">
            <summary>Gets the autocomplete expression.</summary>
            <value>An expression that controls how autocomplete will react for read-only fields.</value>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.ParameterRegion">
            <summary>
            Areas in the user interface used to display configuration parameters that relate to the same concept (e.g. server location, user credentials)
            </summary>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.UserDefinedConfigurationParameter">
            <summary>
            Attribute used to identify a configuration parameter and to describe the way it is presented in the user interface allowing users to manipulate it.
            This attribute should be used in a database configuration objects.
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.UserDefinedConfigurationParameter.Region">
             <summary>
             Identifies the UI region where the parameter will be placed.
             </summary>
            
             <value>The region where the parameter will be present.</value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.UserDefinedConfigurationParameter.Label">
             <summary>
             Defines the text of the label that is placed next to the parameter in the user interface.
             </summary>
            
             <value>The label that will represent the parameter.</value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.UserDefinedConfigurationParameter.Prompt">
            <summary>
            Defines the text of the message used to ask the user for a value to the parameter.
            </summary>
            <value>A string with the prompt to be displayed about the parameter's value.</value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.UserDefinedConfigurationParameter.Example">
             <summary>
             Defines a detailed message that clearly explains the purpose of the parameter and/or applicable restrictions to its values.
             </summary>
            
             <value>The information to be shown about the parameter.</value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.UserDefinedConfigurationParameter.Order">
            <summary>
            Establishes the order of the parameter inside its region.
            </summary>
            <value>An integer that represents the order of the parameter inside the defined region.</value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.UserDefinedConfigurationParameter.IsPassword">
            <summary>
            Indicates whether the parameter should be treated as a password.
            </summary>
            <value>True if this parameter is a password, or False otherwise.</value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.UserDefinedConfigurationParameter.IsMandatory">
            <summary>
            Indicates whether this parameter should be treated as mandatory.
            </summary>
            <value>True if this parameter is mandatory, or False otherwise.</value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.UserDefinedConfigurationParameter.VisibilityChecker">
            <summary>
            Specifies the boolean property responsible for dictating if the parameter should be displayed in the user interface or not.
            </summary>
            <value>The boolean property name.</value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.UserDefinedConfigurationParameter.ExistsIf">
            <summary>
            Specifies that the Property is expected if another Property has Value: Property.Value. The Property must be an Enum.
            The validation that is required or not, it is defined by the IsMandatory attribute.
            </summary>
            <value>Property.Value, e.g., Region.UserSpecific</value>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.HelpLinkForEnumConfigurationParameter">
            <summary>
            Attribute used to place an hyperlink next to a configuration parameter whose type is an enumeration, when a specific value is selected.
            Multiple uses are possible allowing to place an help link for each value of the enumeration.
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.HelpLinkForEnumConfigurationParameter.EnumValue">
             <summary>
             Defines the string value the help information relates to.
             </summary>
            
             <value>The string value the help information relates to.</value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.HelpLinkForEnumConfigurationParameter.Text">
             <summary>
             Defines the text of the link that is placed next to the enum parameter in the user interface.
             </summary>
            
             <value>The link text that will represent the parameter.</value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.HelpLinkForEnumConfigurationParameter.Url">
            <summary>
            Defines the URL where the help link will point to.
            </summary>
            <value>The URL the help link will point to</value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.BaseDatabaseInfo.Identifier">
            <summary>
            Name that identifies the database
            </summary>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.BaseDatabaseInfo.Equals(OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.IDatabaseInfo)">
            <summary>
            Returns true if both objects represent exactly the same database, or false otherwise.
            The base implementation checks if both objects are the same or if they have the same <see cref="P:OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.BaseDatabaseInfo.Identifier"/>.
            </summary>
            <param name="other">Other database object to compare with</param>
            <returns>true if the current object is equal to the other parameter; otherwise, false. </returns>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.BaseTableSourceInfo.Database">
            <summary>
            Database where the table source is located.
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.BaseTableSourceInfo.Name">
            <summary>
            Name that identifies the table source inside the database
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.BaseTableSourceInfo.QualifiedName">
            <summary>
            Fully qualified identifier of the table source, including the database information
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.BaseTableSourceInfo.DisplayName">
            <summary>
            Human-readable name that unambiguously identifies the table source inside a database.
            This implementation returns the <see cref="P:OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.BaseTableSourceInfo.Name"/>.
            </summary>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.BaseTableSourceInfo.Equals(OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceInfo)">
            <summary>
            Returns true if both objects represent exactly the same table source, or false otherwise.
            This implementation returns true if both objects are the same instance or if the 
            <see cref="P:OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.BaseTableSourceInfo.Database"/>, <see cref="P:OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.BaseTableSourceInfo.Name"/> and <see cref="P:OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.BaseTableSourceInfo.QualifiedName"/> are equal.
            </summary>
            <param name="other">Other table source object to compare with</param>
            <returns> true if the current object is equal to the other parameter; otherwise, false.</returns>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.IDatabaseInfo">
            <summary>
            Contains information about a database.
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.IDatabaseInfo.Identifier">
            <summary>
            Name that identifies the database
            </summary>
            <value>
            The identifier of the database.
            </value>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.IDatabaseInfo.Equals(OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.IDatabaseInfo)">
            <summary>
            Returns true if both objects represent exactly the same database, or false otherwise.
            </summary>
            <param name="other">Other database object to compare with</param>
            <returns>true if the current object is equal to the other parameter; otherwise, false.</returns>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.IDatabaseObjectFactory">
            <summary>
            Creates introspection objects from qualified names, inspecting the database only if needed.
            </summary>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.IDatabaseObjectFactory.CreateLocalDatabaseInfo">
            <summary>
            Returns an object that contains information about the current database
            </summary>
            <returns>Database-specific object that implements the IDatabaseInfo interface</returns>        
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.IDatabaseObjectFactory.CreateDatabaseInfo(System.String)">
            <summary>
            Returns an object that contains information about a database, inferring it from a database identifier.
            If the <paramref name="databaseIdentifier"/> does not contain all the required information, the remaining 
            should be inferred from the current <see cref="T:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.IRuntimeDatabaseConfiguration"/>.
            </summary>
            <param name="databaseIdentifier">Unique identifier of the database</param>
            <returns>Database-specific object that implements the IDatabaseInfo interface</returns>
            <exception cref="T:OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.InvalidDatabaseObjectIdentifierException">If the databaseIdentifier is invalid</exception>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.IDatabaseObjectFactory.CreateTableSourceInfo(System.String)">
            <summary>
            Returns an object that contains information about a table source (data source in tabular format), like a database table or view,
            inferring both the database and table source information from a qualifiedName. If the <paramref name="qualifiedName"/> does not contain 
            all the required information, the remaining should be inferred from the current <see cref="T:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.IRuntimeDatabaseConfiguration"/>.
            </summary>
            <param name="qualifiedName">Qualified identifier of the table source, including the database information</param>
            <returns>Database-specific object that implements the ITableSourceInfo interface</returns>
            <exception cref="T:OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.InvalidDatabaseObjectIdentifierException">if the qualifiedName is invalid</exception>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.IDataTypeInfo">
            <summary>
            Contains information about a data type.
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.IDataTypeInfo.Type">
            <summary>
            Database type that can be mapped to the data types available in the platform.
            </summary>
            <value>
            The Database type.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.IDataTypeInfo.SqlDataType">
            <summary>
            Original database-specific type, used for auditing.
            </summary>
            <value>
            The type of the SQL data.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.IDataTypeInfo.Length">
            <summary>
            Size of the data type, when applicable (e.g. text of decimal numbers).
            </summary>
            <value>
            The length of the data type.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.IDataTypeInfo.Decimals">
            <summary>
            Number of decimal places of the data type, when applicable (e.g. decimal numbers).
            </summary>
            <value>
            Number of decimal plates.
            </value>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceColumnInfo">
            <summary>
            Contains information about a table source column.
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceColumnInfo.TableSource">
            <summary>
            Table source that owns the column.
            </summary>
            <value>
            The table source.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceColumnInfo.Name">
            <summary>
            Name that identifies the column.
            </summary>
            <value>
            The name of the column.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceColumnInfo.DataType">
            <summary>
            Data type of the values stored in the column.
            </summary>
            <value>
            The type of the data.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceColumnInfo.IsMandatory">
            <summary>
            Returns true if the column must have a value assigned to it (NOT NULL), or false if it is nullable.
            </summary>
            <value>
            True if this column is mandatory, False otherwise.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceColumnInfo.IsPrimaryKey">
            <summary>
            Returns true if the column is part of the table source's primary key, or false otherwise.
            </summary>
            <value>
            True if this column is primary key, False otherwise.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceColumnInfo.IsAutoGenerated">
            <summary>
            Returns true if the column value is generated automatically when a row is inserted (e.g. sequential numbers).
            </summary>
            <value>
            True if this column is automatic generated, False otherwise.
            </value>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceForeignKeyInfo">
            <summary>
            Contains information about a table source foreign key.
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceForeignKeyInfo.TableSource">
            <summary>
            Table source that owns the foreign key.
            </summary>
            <value>
            The table source.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceForeignKeyInfo.Name">
            <summary>
            Name that identifies the foreign key constraint.
            </summary>
            <value>
            The name of the foreign key.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceForeignKeyInfo.ColumnName">
            <summary>
            Name of the column.
            </summary>
            <value>
            The name of the column.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceForeignKeyInfo.ReferencedTableSource">
            <summary>
            Table source that owns the referenced column.
            </summary>
            <value>
            The referenced table source.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceForeignKeyInfo.ReferencedColumnName">
            <summary>
            Name of the referenced column.
            </summary>
            <value>
            The name of the referenced column.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceForeignKeyInfo.IsCascadeDelete">
            <summary>
            Returns True if the delete rule of the foreign key is CASCADE DELETE.
            </summary>
            <value>
            True if the cascade delete is set, False otherwise.
            </value>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceInfo">
            <summary>
            Contains information about a table source (data source in tabular format), like a database table or view.
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceInfo.Database">
            <summary>
            Database where the table source is located.
            </summary>
            <value>
            The database where the table is located.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceInfo.Name">
            <summary>
            Name that identifies the table source inside the database
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceInfo.QualifiedName">
            <summary>
            Fully qualified identifier of the table source, including the database information
            </summary>
            <value>
            The fully qualified identifier.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceInfo.DisplayName">
            <summary>
            Human-readable name that unambiguously identifies the table source inside a database
            </summary>
            <value>
            The display name.
            </value>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceInfo.Equals(OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceInfo)">
            <summary>
            Returns true if both objects represent exactly the same table source, or false otherwise.
            </summary>
            <param name="other">Other table source object to compare with</param>
            <returns>true if the current object is equal to the other parameter; otherwise, false.</returns>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.DBDataType">
            <summary>
            Specifies the data type to use in the database.
            </summary>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLAggregateFunctions">
            <summary>
            Base implementation for generating the DML aggregate functions required by the applications to perform DataSet queries
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLAggregateFunctions.DMLService">
            <summary>
            This property represents the associated DML service.
            </summary>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLAggregateFunctions.Max(System.String)">
            <summary>
            Returns a DML expression that computes the maximum value of 'v' in the current group's rows.
            Ignores rows for which the value of 'v' is NULL.
            This implementation returns <code>Max(v)</code>.
            </summary>
            <param name="v">A DML expression that evaluates to an Integer, Decimal or DateTime.</param>
            <returns>A DML expression that evaluates to a value of the same type as the argument.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLAggregateFunctions.Min(System.String)">
            <summary>
            Returns a DML expression that computes the minimum value of 'v' in the current group's rows.
            Ignores rows for which the value of 'v' is NULL.
            This implementation returns <code>Min(v)</code>.
            </summary>
            <param name="v">A DML expression that evaluates to an Integer, Decimal or DateTime.</param>
            <returns>A DML expression that evaluates to a value of the same type as the argument.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLAggregateFunctions.Avg(System.String)">
            <summary>
            Returns a DML expression that computes the average value of 'n' in the current group's rows.
            Ignores rows for which the value of 'n' is NULL.
            This implementation returns <code>Avg(n)</code>.
            </summary>
            <param name="n">A DML expression that evaluates to an Integer or Decimal.</param>
            <returns>A DML expression that evaluates to a Decimal.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLAggregateFunctions.Sum(System.String)">
            <summary>
            Returns a DML expression that computes the sum of 'n' in the current group's rows.
            Ignores rows for which the value of 'n' is NULL.
            This implementation returns <code>Sum(n)</code>.
            </summary>
            <param name="n">A DML expression that evaluates to an Integer or Decimal.</param>
            <returns>A DML expression that evaluates to a value of the same type as the argument.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLAggregateFunctions.Count">
            <summary>
            Returns a DML expression that computes the number of rows in the current group.
            This implementation returns <code>Count(*)</code>.
            </summary>
            <returns>A DML expression that evaluates to an Integer.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLAggregateFunctions.Count(System.String)">
            <summary>
            Returns a DML expression that computes the number of rows in the current group.
            Ignores rows for which the value of 'v' is NULL.
            This implementation returns <code>Count(v)</code>.
            </summary>
            <param name="v">A DML expression that evaluates to a basic type.</param>
            <returns>A DML expression that evaluates to a Integer.</returns>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLDefaultValues">
            <summary>
            Base implementation of a contract for generating default values for simple queries.
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLDefaultValues.DMLService">
            <summary>
            This property represents the associated DML service.
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLDefaultValues.Null">
            <summary>
            Gets a DML expression that returns the NULL value.
            This implementation always returns NULL.
            </summary>
            <returns>DML expression</returns>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLDefaultValues.Text">
            <summary>
            Gets a DML expression that returns the default value for Text elements.
            This implementation always returns ''.
            </summary>
            <returns>DML expression of type Text</returns>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLDefaultValues.Boolean">
            <summary>
            Gets a DML expression that returns the default value for Boolean elements.
            This implementation always returns zero.
            </summary>
            <returns>DML expression of type Boolean</returns>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLDefaultValues.Integer">
            <summary>
            Gets a DML expression that returns the default value for Integer elements.
            This implementation always returns zero.
            </summary>
            <returns>DML expression of type Integer</returns>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLDefaultValues.LongInteger">
            <summary>
            Gets a DML expression that returns the default value for Long elements.
            This implementation always returns zero.
            </summary>
            <returns>DML expression of type Long</returns>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLDefaultValues.Decimal">
            <summary>
            Gets a DML expression that returns the default value for Decimal elements.
            This implementation always returns zero.
            </summary>
            <returns>DML expression of type Decimal</returns>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLDefaultValues.Date">
            <summary>
            Gets a DML expression that returns the default value for Date elements.
            This implementation uses the <seealso cref="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.TextToDate(System.String,System.String)"/> with the value '1900-01-01'
            </summary>
            <returns>DML expression of type Date</returns>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLDefaultValues.Time">
            <summary>
            Gets a DML expression that returns the default value for Time elements.
            This implementation uses the <seealso cref="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.TextToTime(System.String)"/> with the value '00:00:00'
            </summary>
            <returns>DML expression of type Time</returns>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLDefaultValues.DateTime">
            <summary>
            Gets a DML expression that returns the default value for DateTime elements.
            This implementation uses the <seealso cref="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.TextToDateTime(System.String,System.String)"/> with the value '1900-01-01 00:00:00'
            </summary>
            <returns>DML expression of type DateTime</returns>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLDefaultValues.BinaryData">
            <summary>
            Gets a DML expression that returns the default value for BinaryData elements.
            This implementation always returns NULL.
            </summary>
            <returns>DML expression of type BinaryData</returns>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLEntityActions">
            <summary>
            Base implementation of an interface that represents the different kinds of entity actions supported by the platform.
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLEntityActions.DMLService">
            <summary>
            This property represents the associated DML service.
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLEntityActions.TableSourceInfo">
            <summary>
            This property represents information about this entity's underlying table source, needed by the platform for DML generation purposes. 
            </summary>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLEntityActions.RequiresInlineParameterValues(OutSystems.HubEdition.Extensibility.Data.DMLService.EntityActionKind)">
            <summary>
            Returns True if this entity requires the parameter values to be dumped inline for a given entity action kind.
            This implementation returns False.
            </summary>
            <param name="action">Entity action whose requirement for inline parameter values is to be tested.</param>
            <returns>A boolean indicating whether this entity requires inline parameter values or not.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLEntityActions.RequiresInlineTableNames(OutSystems.HubEdition.Extensibility.Data.DMLService.EntityActionKind)">
            <summary>
            Returns True if this entity requires the table names to be dumped inline for a given entity action kind. 
            This implementation returns False;
            </summary>
            <param name="action">Entity action whose requirement for inline table names is to be tested.</param>
            <returns>A boolean indicating whether this entity requires inline table names or not.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLEntityActions.GetInlineTableName(OutSystems.HubEdition.Extensibility.Data.DMLService.EntityActionKind)">
            <summary>
            Returns the table name of this entity to be used in the entity action specified. 
            This implementation returns null;
            </summary>
            <param name="action">Entity action to be considered for table name overriding.</param>
            <returns>The table name of this entity if it needs to be overridden, otherwise returns Null.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLEntityActions.SQLPlaceholderValuesForGet">
            <summary>
            Returns additional DML expressions to be inserted in the <code>SELECT</code> statement
            generated by the platform for the <code>Get</code> entity action.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IDictionary`2"/> with the DML expression.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLEntityActions.SQLPlaceholderValuesForGetForUpdate">
            <summary>
            Returns additional DML expression to be inserted in the <code>SELECT</code> statement
            generated by the platform for the <code>GetForUpdate</code> entity action.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IDictionary`2"/> with the DML expression.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLEntityActions.SQLPlaceholderValuesForCreate">
            <summary>
            Returns additional DML expressions to be inserted in the <code>SELECT</code> statement
            generated by the platform for the <code>Create</code> entity action.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IDictionary`2"/> with the DML expression.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLEntityActions.SQLPlaceholderValuesForCreateAndRetrieveId(System.String,System.String,OutSystems.HubEdition.Extensibility.Data.DMLService.RetrieveIdMethod@)">
            <summary>
            Returns additional DML expression to be inserted in the <code>SELECT</code> statement
            generated by the platform for the <code>Create</code> entity action, when it's necessary
            to retrieve the <code>Id</code> of the record created.
            <para>This implementation returns Null and sets <code>retrieveIdMethod</code> to <code>ReturnValue</code>.</para>
            </summary>
            <param name="idColumnName">Column that stores the identifiers.</param>
            <param name="outputParameterName">If the <code>retrieveIdMethod</code> is <code>OutputParameter</code>, this is the name of the parameter that will hold the value stored 
            in <code>idColumnName</code>, otherwise it should be ignored.</param>
            <param name="retrieveIdMethod">Method used by the platform to retrieve the identifier.</param>
            <returns>An <see cref="T:System.Collections.Generic.IDictionary`2"/> with the DML expressions.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLEntityActions.SQLPlaceholderValuesForUpdate">
            <summary>
            Returns additional DML expressions to be inserted in the <code>UPDATE</code> statement
            generated by the platform for the <code>Update</code> entity action.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IDictionary`2"/> with the DML expressions.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLEntityActions.SQLPlaceholderValuesForDelete">
            <summary>
            Returns additional DML expressions to be inserted in the <code>DELETE</code> statement
            generated by the platform for the <code>Delete</code> entity action.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IDictionary`2"/> with the DML expressions.</returns>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions">
            <summary>
            Base implementation for generating the DML functions required by the applications to perform simple queries
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.DMLService">
            <summary>
            This property represents the associated DML service.
            </summary>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.Abs(System.String)">
            <summary>
            Returns a DML expression that computes the absolute value (unsigned magnitude) of a decimal number.
            This implementation returns <code>Abs(n)</code>.
            </summary>
            <param name="n">A string representing a decimal number.</param>
            <returns>A DML expression that evaluates to a Decimal.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.Round(System.String)">
            <summary>
            Returns a DML expression that computes the decimal number 'n' rounded to the zero fractional digits.
            This implementation returns <code>Round(n,0)</code>.
            </summary>
            <param name="n">DML expression of type Decimal that evaluates to the decimal number to round</param>
            <returns>A DML expression that evaluates to a Decimal.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.Sqrt(System.String)">
            <summary>
            Returns a DML expression that computes the square root of the decimal number 'n'.
            This implementation returns <code>Sqrt(n)</code>.
            </summary>
            <param name="n">DML expression of type Decimal that evaluates to a decimal number</param>
            <returns>A DML expression that evaluates to a Decimal.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.Trunc(System.String)">
            <summary>
            Returns a DML expression that computes the decimal number 'n' truncated to integer removing the decimal part of 'n'.
            </summary>
            <param name="n">DML expression of type Decimal that evaluates to the decimal number to truncate</param>
            <returns>A DML expression that evaluates to a Decimal.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.Concat(System.String,System.String)">
            <summary>
            Returns a DML expression that concatenates two strings: 't1' and 't2'.
            </summary>
            <param name="t1">A DML expression that evaluates to Text.</param>
            <param name="t2">A DML expression that evaluates to Text.</param>
            <returns>A DML expression that evaluates to Text.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.Coalesce(System.String,System.String)">
            <summary>
            Returns a DML expression that coalesce two arguments: 't1' and 't2' (returning the first non null one).
            </summary>
            <param name="t1">A DML expression with no specific type.</param>
            <param name="t2">A DML expression with no specific type.</param>
            <returns>A DML expression with no specific type.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.Index(System.String,System.String)">
            <summary>
            Returns a DML expression that searches an expression for another expression and returns its starting position if found.
            Returns -1 if the <paramref name="search"/> expression is empty or cannot be found.
            </summary>
            <param name="t">A DML expression that evaluates to Text.</param>
            <param name="search">A DML expression that evaluates to Text.</param>
            <returns>A DML expression that evaluates to an Integer.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.Length(System.String)">
            <summary>
            Returns a DML expression that computes the number of characters in a string.
            </summary>
            <param name="t">A DML expression that evaluates to Text.</param>
            <returns>A DML expression that evaluates to an Integer.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.Replace(System.String,System.String,System.String)">
            <summary>
            Returns a DML expression that replaces all occurrences of a specified string value with another string value.
            The base implementation returns 'Replace(t, search, replace)'.
            </summary>
            <param name="t">A DML expression that evaluates to Text.</param>
            <param name="search">A DML expression that evaluates to Text, to search for.</param>
            <param name="replace">A DML expression that evaluates to Text, to replace all occurrences with.</param>
            <returns>A DML expression that evaluates to Text.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.Substr(System.String,System.String,System.String)">
            <summary>
            Returns a DML expression that computes a substring beginning at <code>start</code> zero-based position
            and with <code>length</code> characters.
            </summary>
            <param name="t">A DML expression that evaluates to Text.</param>
            <param name="start">A DML expression that evaluates to an Integer, containing the start index.</param>
            <param name="length">A DML expression that evaluates to an Integer, containing the length of the text to return.</param>
            <returns>A DML expression that evaluates to Text.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.ToLower(System.String)">
            <summary>
            Returns a DML expression that converts a string to lowercase.
            The base implementation returns 'Lower(t)'.
            </summary>
            <param name="t">A DML expression that evaluates to Text.</param>
            <returns>A DML expression that evaluates to Text.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.ToUpper(System.String)">
            <summary>
            Returns a DML expression that converts a string to uppercase.
            The base implementation returns 'Upper(t)'.
            </summary>
            <param name="t">A DML expression that evaluates to Text.</param>
            <returns>A DML expression that evaluates to Text.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.Trim(System.String)">
            <summary>
            Returns a DML expression that removes all leading and trailing white spaces from a string.
            </summary>
            <param name="t">A DML expression that evaluates to Text.</param>
            <returns>A DML expression that evaluates to Text.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.TrimEnd(System.String)">
            <summary>
            Returns a DML expression that removes all trailing white spaces from a string.
            The base implementation returns 'RTrim(t)'.
            </summary>
            <param name="t">A DML expression that evaluates to Text.</param>
            <returns>A DML expression that evaluates to Text.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.TrimStart(System.String)">
            <summary>
            Returns a DML expression that removes all leading white spaces from a string.
            The base implementation returns 'LTrim(t)'.
            </summary>
            <param name="t">A DML expression that evaluates to Text.</param>
            <returns>A DML expression that evaluates to Text.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.AddDays(System.String,System.String)">
            <summary>
            Returns a DML expression that adds days to a DateTime and returns a valid DataTime.
            </summary>
            <param name="dt">A DML expression that evaluates to a DateTime.</param>
            <param name="n">A DML expression that evaluates to a Integer.</param>
            <returns>A DML expression that evaluates to a DateTime.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.AddHours(System.String,System.String)">
            <summary>
            Returns a DML expression that adds days to a DateTime and returns a valid DataTime.
            </summary>
            <param name="dt">A DML expression that evaluates to a DateTime.</param>
            <param name="n">A DML expression that evaluates to a Integer.</param>
            <returns>A DML expression that evaluates to a DateTime.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.AddMinutes(System.String,System.String)">
            <summary>
            Returns a DML expression that adds minutes to a DateTime and returns a valid DateTime.
            </summary>
            <param name="dt">A DML expression that evaluates to a DateTime.</param>
            <param name="n">A DML expression that evaluates to an Integer.</param>
            <returns>A DML expression that evaluates to a DateTime.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.AddMonths(System.String,System.String)">
            <summary>
            Returns a DML expression that adds months to a DateTime and returns a valid DateTime.
            </summary>
            <param name="dt">A DML expression that evaluates to a DateTime.</param>
            <param name="n">A DML expression that evaluates to an Integer.</param>
            <returns>A DML expression that evaluates to a DateTime.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.AddSeconds(System.String,System.String)">
            <summary>
            Returns a DML expression that adds seconds to a DateTime and returns a valid DateTime.
            </summary>
            <param name="dt">A DML expression that evaluates to a DateTime.</param>
            <param name="n">A DML expression that evaluates to an Integer.</param>
            <returns>A DML expression that evaluates to a DateTime.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.AddYears(System.String,System.String)">
            <summary>
            Returns a DML expression that adds years to a DateTime and returns a valid DateTime.
            </summary>
            <param name="dt">A DML expression that evaluates to a DateTime.</param>
            <param name="n">A DML expression that evaluates to an Integer.</param>
            <returns>A DML expression that evaluates to a DateTime.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.BuildDateTime(System.String,System.String)">
            <summary>
            Returns a DML expression that creates a new DateTime given a Date and a Time.
            </summary>
            <param name="d">A DML expression that evaluates to a Date.</param>
            <param name="t">A DML expression that evaluates to a Time.</param>
            <returns>A DML expression that evaluates to a DateTime.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.Day(System.String)">
            <summary>
            Returns a DML expression that computes the day of a DateTime.
            </summary>
            <param name="dt">A DML expression that evaluates to a DateTime.</param>
            <returns>A DML expression that evaluates to an Integer.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.DayOfWeek(System.String)">
            <summary>
            Returns a DML expression that computes the week day of a DateTime, ranging from 0 (Sunday) to 6 (Saturday).
            </summary>
            <param name="dt">A DML expression that evaluates to a DateTime.</param>
            <returns>A DML expression that evaluates to an Integer.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.DiffDays(System.String,System.String)">
            <summary>
            Returns a DML expression that computes how many days have passed between two DateTimes.
            Returns zero if the two dates are the same, a positive integer if <paramref name="dt1"/> is smaller than <paramref name="dt2"/>, and
            a negative number otherwise.
            </summary>
            <param name="dt1">First DML expression that evaluates to a DateTime.</param>
            <param name="dt2">Second DML expression that evaluates to a DateTime.</param>
            <returns>A DML expression that evaluates to an Integer.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.DiffHours(System.String,System.String)">
            <summary>
            Returns a DML expression that computes how many hours have passed between two DateTimes.
            Returns zero if the two dates and hours are the same, a positive integer if <paramref name="dt1"/> is smaller than <paramref name="dt2"/>, and
            a negative number otherwise.
            </summary>
            <param name="dt1">First DML expression that evaluates to a DateTime.</param>
            <param name="dt2">Second DML expression that evaluates to a DateTime.</param>
            <returns>A DML expression that evaluates to an Integer.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.DiffMinutes(System.String,System.String)">
            <summary>
            Returns a DML expression that computes how many minutes have passed between two DateTimes.
            Returns zero if the two dates, hours and minutes are the same, a positive integer if <paramref name="dt1"/> is smaller than <paramref name="dt2"/>, and
            a negative number otherwise.
            </summary>
            <param name="dt1">A DML expression that evaluates to a DateTime.</param>
            <param name="dt2">A DML expression that evaluates to a DateTime.</param>
            <returns>A DML expression that evaluates to an Integer.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.DiffSeconds(System.String,System.String)">
            <summary>
            Returns a DML expression that computes how many seconds have passed between two DateTimes.
            Returns zero if the two dates, hours, minutes, and seconds are the same, a positive integer if <paramref name="dt1"/> is smaller than
            <paramref name="dt2"/>, and a negative number otherwise.
            </summary>
            <param name="dt1">A DML expression that evaluates to a DateTime.</param>
            <param name="dt2">A DML expression that evaluates to a DateTime.</param>
            <returns>A DML expression that evaluates to an Integer.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.Hour(System.String)">
            <summary>
            Returns a DML expression that computes the hour part of a DateTime.
            </summary>
            <param name="dt">A DML expression that evaluates to a DateTime.</param>
            <returns>A DML expression that evaluates to an Integer.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.Minute(System.String)">
            <summary>
            Returns a DML expression that computes the minute part of a DateTime.
            </summary>
            <param name="dt">A DML expression that evaluates to a DateTime.</param>
            <returns>A DML expression that evaluates to an Integer.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.Month(System.String)">
            <summary>
            Returns a DML expression that computes the month part of a DateTime.
            </summary>
            <param name="dt">A DML expression that evaluates to a DateTime.</param>
            <returns>A DML expression that evaluates to an Integer.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.NewDate(System.String,System.String,System.String)">
            <summary>
            Returns a DML expression that computes a new date from a year, month, and day.
            </summary>
            <param name="y">A DML expression that evaluates to an Integer.</param>
            <param name="m">A DML expression that evaluates to an Integer.</param>
            <param name="d">A DML expression that evaluates to an Integer.</param>
            <returns>A DML expression that evaluates to a Date.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.NewDateTime(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Returns a DML expression that computes a new DateTime from a year, month, day, hour, minute, and second.
            </summary>
            <param name="y">A DML expression that evaluates to an Integer.</param>
            <param name="mo">A DML expression that evaluates to an Integer.</param>
            <param name="d">A DML expression that evaluates to an Integer.</param>
            <param name="h">A DML expression that evaluates to an Integer.</param>
            <param name="m">A DML expression that evaluates to an Integer.</param>
            <param name="s">A DML expression that evaluates to an Integer.</param>
            <returns>A DML expression that evaluates to DateTime.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.NewTime(System.String,System.String,System.String)">
            <summary>
            Returns a DML expression that computes a new Time from an hour, minute, and second.
            </summary>
            <param name="h">A DML expression that evaluates to an Integer.</param>
            <param name="m">A DML expression that evaluates to an Integer.</param>
            <param name="s">A DML expression that evaluates to an Integer.</param>
            <returns>A DML expression that evaluates to Time.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.Second(System.String)">
            <summary>
            Returns a DML expression that computes the seconds part of a DateTime.
            </summary>
            <param name="dt">A DML expression that evaluates to a DateTime.</param>
            <returns>A DML expression that evaluates to an Integer.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.Year(System.String)">
            <summary>
            Returns a DML expression that computes the year part of a DateTime.
            </summary>
            <param name="dt">A DML expression that evaluates to a DateTime.</param>
            <returns>A DML expression that evaluates to an Integer.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.BooleanToInteger(System.String)">
            <summary>
            Returns a DML expression that converts a Boolean expression to an Integer. The expression evaluates into
            1 if the boolean is True, or 0 if False.
            </summary>
            <param name="b">A DML expression that evaluates to a Boolean.</param>
            <returns>A DML expression that evaluates to an Integer.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.BooleanToText(System.String)">
            <summary>
            Returns a DML expression that converts a Boolean in its textual representation: <code>True</code> or <code>False</code>.
            </summary>
            <param name="b">A DML expression that evaluates to Boolean.</param>
            <returns>A DML expression that evaluates to Text.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.DateTimeToDate(System.String)">
            <summary>
            Returns a DML expression that converts a DateTime to a Date, by dropping the Time component.
            </summary>
            <param name="dt">A DML expression that evaluates to a DateTime.</param>
            <returns>A DML expression that evaluates to a Date.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.DateTimeToText(System.String,System.String)">
            <summary>
            Returns a DML expression that converts a DateTime to its textual representation, using a specified format.
            </summary>
            <param name="dt">A DML expression that evaluates to a DateTime.</param>
            <param name="dateFormat">Date format used to serialize the date component of the text value (e.g. YYYY-MM-DD).</param>
            <returns>A DML expression that evaluates to Text.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.DateTimeToTime(System.String)">
            <summary>
            Returns a DML expression that converts a DateTime to a Time, by dropping the Date component.
            </summary>
            <param name="dt">A DML expression that evaluates to a DateTime.</param>
            <returns>A DML expression that evaluates to a Time.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.DateToDateTime(System.String)">
            <summary>
            Returns a DML expression that converts a Date to a DateTime, by adding an empty Time component (00:00:00).
            </summary>
            <param name="d">A DML expression that evaluates to a Date.</param>
            <returns>A DML expression that evaluates to a DateTime.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.DateToText(System.String,System.String)">
            <summary>
            Returns a DML expression that converts a Date to its textual representation, using a specified format.
            </summary>
            <param name="d">A DML expression that evaluates to a Date.</param>
            <param name="dateFormat">Date format used to serialize the date component of the text value (e.g. YYYY-MM-DD).</param>
            <returns>A DML expression that evaluates to Text.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.DecimalToBoolean(System.String)">
            <summary>
            Returns an SQL expression that converts a Decimal to a Boolean. A Decimal value of 0.0 is False, all other values are True.
            </summary>
            <param name="d">A DML expression that evaluates to a Decimal.</param>
            <returns>A DML expression that evaluates to Boolean.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.DecimalToInteger(System.String)">
            <summary>
            Returns a DML expression that converts a Decimal to an Integer.
            </summary>
            <param name="d">A DML expression that evaluates to a Decimal.</param>
            <returns>A DML expression that evaluates to Integer.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.DecimalToLongInteger(System.String)">
            <summary>
            Returns a DML expression that converts a Decimal to a Long Integer.
            </summary>
            <param name="d">A DML expression that evaluates to a Decimal.</param>
            <returns>A DML expression that evaluates to Long Integer.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.DecimalToText(System.String)">
            <summary>
            Returns a DML expression that converts a Decimal to its textual representation.
            </summary>
            <param name="d">A DML expression that evaluates to a Decimal.</param>
            <returns>A DML expression that evaluates to a Decimal.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.IdentifierToInteger(System.String)">
            <summary>
            Provides a DML expression that converts Identifier 'id' to an Integer value.
            </summary>
            <param name="id">DML expression that evaluates to an integer value</param>
            <returns>DML expression of type Integer</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.IdentifierToLongInteger(System.String)">
            <summary>
            Provides a DML expression that converts Identifier 'id' to a Long Integer value.
            </summary>
            <param name="id">DML expression that evaluates to a Long Integer value</param>
            <returns>DML expression of type Long Integer</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.IdentifierToText(System.String)">
            <summary>
            Returns a DML expression that converts an Identifier to its textual representation.
            </summary>
            <param name="id">A DML expression that evaluates to Text.</param>
            <returns>A DML expression that evaluates to Text.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.IntegerToBoolean(System.String)">
            <summary>
            Returns a DML expression that converts an Integer to a Boolean.
            A Decimal value of 0 is False, all other values are True.
            </summary>
            <param name="i">A DML expression that evaluates to an Integer.</param>
            <returns>A DML expression that evaluates to a Boolean.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.IntegerToDecimal(System.String)">
            <summary>
            Returns a DML expression that converts an Integer to a Decimal.
            </summary>
            <param name="i">A DML expression that evaluates to an Integer.</param>
            <returns>A DML expression that evaluates to a decimal.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.IntegerToIdentifier(System.String)">
            <summary>
            Returns a DML expression that converts an Integer to an (untyped) Identifier.
            </summary>
            <param name="i">A DML expression that evaluates to an Integer.</param>
            <returns>A DML expression that evaluates to an Integer.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.LongIntegerToIdentifier(System.String)">
            <summary>
            Returns a DML expression that converts a Long Integer to an (untyped) Identifier.
            </summary>
            <param name="b">A DML expression that evaluates to a Long Integer.</param>
            <returns>A DML expression that evaluates to a Long Integer.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.LongIntegerToInteger(System.String)">
            <summary>
            Returns a DML expression that converts a Long Integer to an Integer.
            </summary>
            <param name="b">A DML expression that evaluates to a Long Integer.</param>
            <returns>A DML expression that evaluates to Integer.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.LongIntegerToDecimal(System.String)">
            <summary>
            Returns a DML expression that converts a Long Integer to a Decimal.
            </summary>
            <param name="b">A DML expression that evaluates to a Long Integer.</param>
            <returns>A DML expression that evaluates to Decimal.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.IntegerToLongInteger(System.String)">
            <summary>
            Returns a DML expression that converts an Integer to a Long Integer.
            </summary>
            <param name="b">A DML expression that evaluates to an Integer.</param>
            <returns>A DML expression that evaluates to Long Integer.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.LongIntegerToText(System.String)">
            <summary>
            Returns a DML expression that converts a Long Integer to its textual representation.
            </summary>
            <param name="b">A DML expression that evaluates to a Long Integer.</param>
            <returns>A DML expression that evaluates to Text.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.IntegerToText(System.String)">
            <summary>
            Returns a DML expression that converts an Integer to its textual representation.
            </summary>
            <param name="i">A DML expression that evaluates to an Integer.</param>
            <returns>A DML expression that evaluates to Text.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.NullDate">
            <summary>
            Returns a DML expression that computes a Null Date (1900-01-01).
            </summary>
            <returns>A DML expression that evaluates to a Date.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.NullIdentifier">
            <summary>
            Returns a DML expression that returns a Null Numeric Identifier.
            This implementation always returns zero.
            </summary>
            <returns>A DML expression that evaluates to an Integer.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.NullTextIdentifier">
            <summary>
            Returns a DML expression that computes a Null Text Identifier.
            This implementation always returns <code>''</code>.
            </summary>
            <returns>A DML expression that evaluates to Text.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.TextToDate(System.String,System.String)">
            <summary>
            Returns a DML expression that converts Text to a Date.
            </summary>
            <param name="t">A DML expression that evaluates to Text.</param>
            <param name="dateFormat">Date format used to serialize the date component of the text value (e.g. YYYY-MM-DD).</param>
            <returns>A DML expression that evaluates to a Date.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.TextToDateTime(System.String,System.String)">
            <summary>
            Provides a DML expression that converts Text 't' to a DateTime value.
            </summary>
            <param name="t">DML expression that evaluates to a text value</param>
            <param name="dateFormat">date format used to serialize the date component of the text value (e.g. YYYY-MM-DD)</param>
            <returns>DML expression of type DateTime</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.TextToDecimal(System.String)">
            <summary>
            Returns a DML expression that converts Text to a DateTime.
            </summary>
            <param name="t">A DML expression that evaluates to Text.</param>
            <returns>A DML expression that evaluates to a DateTime.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.TextToIdentifier(System.String)">
            <summary>
            Returns a DML expression that converts Text to an (untyped) Identifier.
            </summary>
            <param name="t">A DML expression that evaluates to Text.</param>
            <returns>A DML expression that evaluates to Text.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.TextToInteger(System.String)">
            <summary>
            Returns a DML expression that converts Text to an Integer.
            </summary>
            <param name="t">A DML expression that evaluates to Text.</param>
            <returns>A DML expression that evaluates to an Integer.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.TextToLongInteger(System.String)">
            <summary>
            Returns a DML expression that converts Text to a Long Integer.
            </summary>
            <param name="t">A DML expression that evaluates to Text.</param>
            <returns>A DML expression that evaluates to a Long Integer.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.TextToTime(System.String)">
            <summary>
            Returns a DML expression that converts Text to Time.
            </summary>
            <param name="t">A DML expression that evaluates to Text.</param>
            <returns>A DML expression that evaluates to Time.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.TimeToDateTime(System.String)">
            <summary>
            Returns a DML expression that converts a Time to a DateTime, by adding an empty Date component (1900-01-01).
            </summary>
            <param name="t">A DML expression that evaluates to Time.</param>
            <returns>A DML expression that evaluates to DateTime.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.TimeToText(System.String)">
            <summary>
            Returns a DML expression that converts a Time to its text value in the format <code>hh:mm:ss</code>.
            </summary>
            <param name="t">A DML expression that evaluates to Time.</param>
            <returns>A DML expression that evaluates to Text.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLFunctions.IfElse(System.String,System.String,System.String)">
            <summary>
            Returns a DML expression that returns <paramref name="trueReturn"/> if <paramref name="value"/> is True, otherwise, it returns <paramref name="falseReturn"/>.
            The base implementation returns 'CASE WHEN <paramref name="value"/> THEN <paramref name="trueReturn"/> ELSE <paramref name="falseReturn"/> END'
            </summary>
            <param name="value">A DML expression that evaluates to Boolean</param>
            <param name="trueReturn">A DML expression that evaluates to a specific type</param>
            <param name="falseReturn">A DML expression that evaluates to the same type as <paramref name="trueReturn"/></param>
            <returns>A DML expression that evaluates to the same type of <paramref name="trueReturn"/> and <paramref name="falseReturn"/></returns>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLIdentifiers">
            <summary>
            Implementation of the <see>IDMLIdentifiers</see> interface that defines methods
            that help build DML Identifiers for columns, tables, and others.
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLIdentifiers.DMLService">
            <summary>
            This property represents the associated <see cref="T:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLService"/>.
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLIdentifiers.MaxLength">
            <summary>
            Gets the maximum length of a simple (not compound) identifier. This value should be the minimum valid
            length for any kind of identifier (e.g. table name, parameter name)
            </summary>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLIdentifiers.EscapeIdentifier(System.String)">
            <summary>
            Escapes a simple (not compound) identifier to prevent name clashing with reserved words.
            The base implementation escapes the identifier using quotation marks, if it isn't already escaped.
            </summary>
            <param name="identifierName">Name that identifies a database object.</param>
            <returns>An escaped identifier.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLIdentifiers.GetValidIdentifier(System.String,System.Boolean)">
            <summary>
            Returns a name that can be used as a valid identifier (e.g. parameter name, constraint name).
            It should contain only valid characters and its length should not exceed the maximum defined in MaxLength.
            <para>This implementation escapes the <code>baseName</code> to contain only alphanumeric and '_' characters.
            If the <code>baseName</code> exceeds the maximum length, the <code>baseName</code> is truncated
            and the last five characters are replaced by random numbers.</para>
            </summary>
            <param name="baseName">An identifier name.</param>
            <param name="truncateUsingRandomDigits">
            Indicates if the identifier should be truncated if its length exceeds the <see cref="P:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLIdentifiers.MaxLength"/>. In this case, 
            random digits should be used as a suffix to prevent name clashing.
            </param>
            <returns>A string representing a valid identifier.</returns>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLOperators.DMLService">
            <summary>
            This property represents the associated <see cref="T:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLService"/>.
            </summary>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLOperators.Negative(System.String)">
            <summary>
            Returns a DML expression that computes the numeric negation of a number.
            This implementation returns <code>-n</code>.
            </summary>
            <param name="n">A DML expression that evaluates to a Decimal or Integer.</param>
            <returns>A DML expression that evaluates to a Decimal or Integer.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLOperators.Not(System.String)">
            <summary>
            Returns a DML expression that computes the logical negation.
            This implementation returns 'NOT b'.
            </summary>
            <param name="b">A DML expression that evaluates to a Boolean.</param>
            <returns>A DML expression that evaluates to a Boolean.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLOperators.IsNull(System.String)">
            <summary>
            Returns a DML expression that checks if the value is NULL.
            This implementation returns <code>v IS NULL</code>.
            </summary>
            <param name="v">A DML expression that evaluates to a value of any database type.</param>
            <returns>A DML expression that evaluates to a Boolean.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLOperators.IsNotNull(System.String)">
            <summary>
            Returns a DML expression that checks if a is not NULL.
            This implementation returns <code>v IS NULL</code>.
            </summary>
            <param name="v">A DML expression that evaluates to a value of any database type.</param>
            <returns>A DML expression that evaluates to a Boolean.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLOperators.Concatenate(System.String,System.String)">
            <summary>
            Returns a DML expression that concatenates two values.
            This implementation returns <code>v1 || v2</code>.
            </summary>
            <param name="v1">A DML expression that evaluates to a value of any type except binary data.</param>
            <param name="v2">A DML expression that evaluates to a value of any type except binary data.</param>
            <returns>A DML expression that evaluates to Text.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLOperators.Add(System.String,System.String)">
            <summary>
            Returns a DML expression that adds two numbers.
            This implementation returns <code>v1 + v2</code>.
            </summary>
            <param name="n1">A DML expression that evaluates to a Decimal or Integer.</param>
            <param name="n2">A DML expression that evaluates to a Decimal or Integer.</param>
            <returns>A DML expression that evaluates to a Decimal or Integer.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLOperators.Subtract(System.String,System.String)">
            <summary>
            Returns a DML expression that subtracts two numbers.
            This implementation returns <code>n1 - n2</code>.
            </summary>
            <param name="n1">A DML expression that evaluates to a Decimal or Integer.</param>
            <param name="n2">A DML expression that evaluates to a Decimal or Integer.</param>
            <returns>A DML expression that evaluates to a Decimal or Integer.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLOperators.Multiply(System.String,System.String)">
            <summary>
            Returns a DML expression that multiplies two numbers.
            This implementation returns <code>n1 * n2</code>.
            </summary>
            <param name="n1">A DML expression that evaluates to a Decimal or Integer.</param>
            <param name="n2">A DML expression that evaluates to a Decimal or Integer.</param>
            <returns>A DML expression that evaluates to a Decimal or Integer.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLOperators.Divide(System.String,System.String)">
            <summary>
            Returns a DML expression that divides two numbers.
            This implementation returns <code>n1 / n2</code>.
            </summary>
            <param name="n1">A DML expression that evaluates to a Decimal or Integer.</param>
            <param name="n2">A DML expression that evaluates to a Decimal or Integer.</param>
            <returns>A DML expression that evaluates to a Decimal.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLOperators.Equal(System.String,System.String)">
            <summary>
            Returns a DML expression that checks if two values are equal.
            This implementation returns <code>n1 = n2</code>.
            </summary>
            <param name="v1">A DML expression that evaluates to a value of any type except binary data.</param>
            <param name="v2">A DML expression that evaluates to a value of any type except binary data.</param>
            <returns>A DML expression that evaluates to Boolean.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLOperators.NotEqual(System.String,System.String)">
            <summary>
            Returns a DML expression that checks if two values are different.
            This implementation returns <code>n1 &lt;&gt; n2</code>.
            </summary>
            <param name="v1">A DML expression that evaluates to a value of any type except binary data.</param>
            <param name="v2">A DML expression that evaluates to a value of any type except binary data.</param>
            <returns>A DML expression that evaluates to Boolean.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLOperators.LessThen(System.String,System.String)">
            <summary>
            Returns a DML expression that checks if a value is less than another.
            This implementation returns <code>n1 &lt; n2</code>.
            </summary>
            <param name="v1">A DML expression that evaluates to a value of any type except binary data.</param>
            <param name="v2">A DML expression that evaluates to a value of any type except binary data.</param>
            <returns>A DML expression that evaluates to Boolean.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLOperators.LessThanOrEqual(System.String,System.String)">
            <summary>
            Returns a DML expression that checks if a value is less than or equal to another.
            This implementation returns <code>n1 &lt;= n2</code>.
            </summary>
            <param name="v1">A DML expression that evaluates to a value of any type except binary data.</param>
            <param name="v2">A DML expression that evaluates to a value of any type except binary data.</param>
            <returns>A DML expression that evaluates to Boolean.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLOperators.GreaterThan(System.String,System.String)">
            <summary>
            Returns a DML expression that checks if a value is greater than another.
            This implementation returns <code>n1 &gt; n2</code>.
            </summary>
            <param name="v1">A DML expression that evaluates to a value of any type except binary data.</param>
            <param name="v2">A DML expression that evaluates to a value of any type except binary data.</param>
            <returns>A DML expression that evaluates to Boolean.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLOperators.GreaterThanOrEqual(System.String,System.String)">
            <summary>
            Returns a DML expression that checks if a value is less or equals to another.
            This implementation returns <code>n1 &gt;= n2</code>.
            </summary>
            <param name="v1">A DML expression that evaluates to a value of any type except binary data.</param>
            <param name="v2">A DML expression that evaluates to a value of any type except binary data.</param>
            <returns>A DML expression that evaluates to Boolean.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLOperators.And(System.String,System.String)">
            <summary>
            Returns a DML expression that performs the logical AND.
            This implementation returns <code>b1 AND b2</code>.
            </summary>
            <param name="b1">A DML expression that evaluates to Boolean.</param>
            <param name="b2">A DML expression that evaluates to Boolean.</param>
            <returns>A DML expression that evaluates to Boolean.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLOperators.Or(System.String,System.String)">
            <summary>
            Returns a DML expression that performs the logical OR.
            This implementation returns <code>b1 OR b2</code>.
            </summary>
            <param name="b1">A DML expression that evaluates to Boolean.</param>
            <param name="b2">A DML expression that evaluates to Boolean.</param>
            <returns>A DML expression that evaluates to Boolean.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLOperators.Like(System.String,System.String)">
            <summary>
            Provides a DML expression that checks whether a string matches a pattern.
            This implementation returns <code>t1 LIKE t2</code>.
            </summary>
            <param name="t1">A DML expression that evaluates to Text.</param>
            <param name="t2">A DML expression that evaluates to Text.</param>
            <returns>A DML expression that evaluates to Text.</returns>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLQueries.DMLService">
            <summary>
            This property represents the associated <see cref="T:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLService"/>.
            </summary>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLQueries.SQLPlaceholderValuesForMaxRecords(System.String)">
            <summary>
            Returns the DML expressions to be inserted in a query statement,
            to make it count the number of records returned by the original query.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IDictionary`2"/> with the DML expressions.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLQueries.SQLPlaceholderValuesForCountQuery">
            <summary>
            Returns the DML expressions to be inserted in the <code>SELECT</code> statement of a query
            to limit the number of records returned.
            This implementation adds placeholders to wrap the query in a select count statement:
            <code>SELECT COUNT(1) FROM (Query)</code>.
            </summary>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLQueries.IsSupported(OutSystems.HubEdition.Extensibility.Data.DMLService.QueryJoinType)">
            <summary>
            Determines if the given join type is supported.
            </summary>
            <param name="joinType">The join type</param>
            <returns>True if the join type is supported, false otherwise</returns>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLService.DatabaseServices">
            <summary>
            This property represents the <see cref="T:OutSystems.HubEdition.Extensibility.Data.IDatabaseServices"/> instance associated with this service.
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLService.Queries">
            <summary>
            Gets an object that generates the SQL fragments required to perform specific queries (e.g. count query).
            </summary>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLService.GetEntityActions(OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceInfo)">
            <summary>
            Gets an object that generates the SQL fragments required to perform entity actions.
            </summary>
            <param name="tableSourceInfo">Information about the entity's underlying table source</param>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLService.Identifiers">
            <summary>
            Gets an object that generates and manipulates SQL identifiers.
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLService.Operators">
            <summary>
            Gets an object that generates the SQL operators required to execute simple queries.
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLService.Functions">
            <summary>
            Gets an object that generates the SQL functions required to execute simple queries
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLService.AggregateFunctions">
            <summary>
            Gets an object that generates the SQL aggregate functions required to execute simple queries
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLService.DefaultValues">
            <summary>
            Gets an object that generates the SQL default values for each database type.
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLService.SyntaxHighlightDefinitions">
            <summary>
            Gets an object that defines a set of fragments (e.g. keywords, operators) of the database-specific dialect 
            that can be used to provide syntax highlighting in SQL statements
            </summary>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLService.TransformDatabaseValue(System.String,OutSystems.HubEdition.Extensibility.Data.DBDataType)">
            <summary>
            Returns an SQL expression that transforms a value of a specified type, so that it can be used in a query condition.
            This implementation returns the value without making any modification to it.
            </summary>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLService.TransformValue(System.String,OutSystems.HubEdition.Extensibility.Data.DBDataType)">
            <summary>
            Returns an SQL expression that transforms a value of a specified type, to be used in conditions and calculated columns.
            This implementation returns the value without making any modification to it.
            </summary>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.BaseDMLService.EscapeTextValue(System.String)">
            <summary>
            Escapes special characters in a text value to be used in SQL statements (e.g replace ' by '').
            This implementation replaces the null string by the empty string and the character ' by ''.
            </summary>
            <param name="text">text value to be escaped</param>
            <returns>The escaped text</returns>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.DMLService.DMLPlaceholders.DeletePlaceholder">
            <summary>
            Represents the possible placeholders for the delete SQL statement produced for the <code>Delete</code> entity action.
            <code>{BeforeStatement} DELETE FROM Entity {BeforeWhereKeyword} WHERE conditions {AfterStatement}</code>
            </summary>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.DMLPlaceholders.DMLPlaceholderExtensions.GetPlaceholderValueTrimStart``1(System.Collections.Generic.IDictionary{``0,System.String},``0)">
            <summary>
            Gets the placeholder value and removes all leading white spaces.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="placeholders">The placeholder.</param>
            <param name="key">The placeholder key in the dictionary.</param>
            <returns>
            The placeholder value.
            </returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.DMLPlaceholders.DMLPlaceholderExtensions.GetPlaceholderValueTrimEnd``1(System.Collections.Generic.IDictionary{``0,System.String},``0)">
            <summary>
            Gets the placeholder value and removes all trailing white spaces.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="placeholders">The placeholder.</param>
            <param name="key">The placeholder key in the dictionary.</param>
            <returns>
            The placeholder value.
            </returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.DMLPlaceholders.DMLPlaceholderExtensions.GetPlaceholderValue``1(System.Collections.Generic.IDictionary{``0,System.String},``0)">
            <summary>
            Gets the placeholder value and removes all leading and trailing white spaces.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="placeholders">placeholders</param>
            <param name="key">The placeholder key in the dictionary.</param>
            <returns>
            The placeholder value.
            </returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.DMLPlaceholders.DMLPlaceholderExtensions.GetPlaceholderValue``1(System.Collections.Generic.IDictionary{``0,System.String},``0,System.Boolean,System.Boolean)">
            <summary>
            Gets the placeholder value and removes all leading and trailing white spaces depending on
            the values of <code>trimStart</code> and <code>trimEnd</code>.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="placeholders">placeholders</param>
            <param name="key">placeholder's key</param>
            <param name="trimStart">if set to <c>true</c> removes all leading white spaces from the placeholder value.</param>
            <param name="trimEnd">if set to <c>true</c> removes all trailing white spaces from the placeholder value</param>
            <returns>
            The placeholder value.
            </returns>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.DMLService.DMLPlaceholders.InsertPlaceholder">
            <summary>
            Represents the possible placeholders for the insert SQL statement produced for the <code>Create</code> entity action.
            <code>{BeforeStatement} INSERT INTO Entity {BeforeValuesKeyword} VALUES (val, ... , val) {AfterStatement}</code>
            </summary>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.DMLService.DMLPlaceholders.SelectPlaceholder">
            <summary>
            Represents the possible placeholders for the select SQL statement produced for simple queries, DataSets and the Get and GetForUpdate entity actions.
            <code><para>{BeforeStatement} SELECT {AfterSelectKeyword} column, ..., column </para>
            <para>{BeforeFromKeyword} FROM {AfterFromKeyword} Entity </para>
            <para>{BeforeWhereKeyword} WHERE {AfterWhereKeyword} conditions </para>
            <para>{BeforeGroupByKeyword} GROUP BY {AfterGroupByKeyword} column, ..., column </para>
            <para>{BeforeHavingKeyword} HAVING {AfterHavingKeyword} conditions </para>
            <para>{BeforeOrderByKeyword} ORDER BY {AfterOrderByKeyword} column, ..., column </para>
            <para>{AfterStatement}</para></code>
            </summary>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.DMLService.DMLPlaceholders.StatementPlaceholder">
            <summary>
            Represents the possible placeholders for an SQL statement.
            <code>{BeforeStatement} SELECT * FROM Entity WHERE conditions {AfterStatement}</code>
            </summary>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.DMLService.DMLPlaceholders.UpdatePlaceholder">
            <summary>
            Represents the possible placeholders for the update SQL statement produced for the <code>Update</code> entity action.
            <code>{BeforeStatement} UPDATE Entity SET column = val {BeforeWhereKeyword} WHERE conditions {AfterStatement}</code>
            </summary>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.DMLService.GenericDMLSyntaxHighlightDefinitions">
            <summary>
            Defines a set of fragments (e.g. keywords, operators) of Generic (ANSI) SQL
            that can be used to provide syntax highlighting in SQL statements. This is based on the book
            "SQL in a nutshell - A Desktop Quick Reference", from Kevin Kline and Daniel Kline (2001)
            </summary>
            <summary>
            Defines a set of fragments (e.g. keywords, operators) of Generic (ANSI) SQL
            that can be used to provide syntax highlighting in SQL statements. This is based on the book
            "SQL in a nutshell - A Desktop Quick Reference", from Kevin Kline and Daniel Kline (2001)
            </summary>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.GenericDMLSyntaxHighlightDefinitions.#ctor(OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLService)">
            <summary>
            Initializes a new instance of the <see cref="T:OutSystems.HubEdition.Extensibility.Data.DMLService.GenericDMLSyntaxHighlightDefinitions"/> class.
            </summary>
            <param name="dmlService">The DML service.</param>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.GenericDMLSyntaxHighlightDefinitions.DMLService">
            <summary>
            This property represents the associated <see cref="T:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLService" />.
            </summary>
            <value>
            The DML service associated.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.GenericDMLSyntaxHighlightDefinitions.Keywords">
            <summary>
            Returns a set of reserved keywords (e.g. SELECT, FROM, JOIN)
            This implementation returns the Ansi SQL 99 keywords
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.GenericDMLSyntaxHighlightDefinitions.Functions">
            <summary>
            Returns a set of function names (e.g. MAX, ROUND, UPPER))
            This implementation returns the Ansi SQL 99 functions
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.GenericDMLSyntaxHighlightDefinitions.Operators">
            <summary>
            Returns a set of operators (e.g. +, LIKE, EXISTS)
            This implementation returns the Ansi SQL 99 operators
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.GenericDMLSyntaxHighlightDefinitions.DataTypes">
            <summary>
            Returns a set of data types (e.g. INTEGER, CHAR, NVARCHAR)
            This implementation returns the Ansi SQL 99 data types
            </summary>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLAggregateFunctions">
            <summary>
            Generates the SQL aggregate functions required by the applications to perform DataSet queries.
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLAggregateFunctions.DMLService">
            <summary>
            Gets the associated DML service.
            </summary>
            <value>
            The DML service associated.
            </value>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLAggregateFunctions.Max(System.String)">
            <summary>
            Returns a DML expression that computes the maximum value of 'v' in the current group's rows.
            Ignores rows for which the value of 'v' is NULL.
            </summary>
            <param name="v">A DML expression that evaluates to an Integer, Decimal or DateTime.</param>
            <returns>A DML expression that evaluates to a value of the same type as the argument.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLAggregateFunctions.Min(System.String)">
            <summary>
            Returns a DML expression that computes the minimum value of 'v' in the current group's rows.
            Ignores rows for which the value of 'v' is NULL.
            </summary>
            <param name="v">A DML expression that evaluates to an Integer, Decimal or DateTime.</param>
            <returns>A DML expression that evaluates to a value of the same type as the argument.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLAggregateFunctions.Avg(System.String)">
            <summary>
            Returns a DML expression that computes the average value of 'n' in the current group's rows.
            Ignores rows for which the value of 'n' is NULL.
            </summary>
            <param name="n">A DML expression that evaluates to an Integer or Decimal.</param>
            <returns>A DML expression that evaluates to a Decimal.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLAggregateFunctions.Sum(System.String)">
            <summary>
            Returns a DML expression that computes the sum of 'n' in the current group's rows.
            Ignores rows for which the value of 'n' is NULL.
            </summary>
            <param name="n">A DML expression that evaluates to an Integer or Decimal.</param>
            <returns>A DML expression that evaluates to a value of the same type as the argument.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLAggregateFunctions.Count">
            <summary>
            Returns a DML expression that computes the number of rows in the current group.
            </summary>
            <returns>A DML expression that evaluates to an Integer.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLAggregateFunctions.Count(System.String)">
            <summary>
            Returns a DML expression that computes the number of rows in the current group.
            Ignores rows for which the value of 'v' is NULL.
            </summary>
            <param name="v">A DML expression that evaluates to a basic type.</param>
            <returns>A DML expression that evaluates to an Integer.</returns>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLDefaultValues">
            <summary>
            Defines a contract for generating default values for simple queries.
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLDefaultValues.DMLService">
            <summary>
            Gets the associated DML service.
            </summary>
            <value>
            The DML service associated.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLDefaultValues.Null">
            <summary>
            Gets a DML expression that returns the NULL value.
            </summary>
            <returns>DML expression</returns>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLDefaultValues.Text">
            <summary>
            Gets a DML expression that returns the default value for Text elements.
            </summary>
            <returns>DML expression of type Text</returns>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLDefaultValues.Boolean">
            <summary>
            Gets a DML expression that returns the default value for Boolean elements.
            </summary>
            <returns>DML expression of type Boolean</returns>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLDefaultValues.Integer">
            <summary>
            Gets a DML expression that returns the default value for Integer elements.
            </summary>
            <returns>DML expression of type Integer</returns>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLDefaultValues.LongInteger">
            <summary>
            Gets a DML expression that returns the default value for Long Integer elements.
            </summary>
            <returns>DML expression of type Integer</returns>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLDefaultValues.Decimal">
            <summary>
            Gets a DML expression that returns the default value for Decimal elements.
            </summary>
            <returns>DML expression of type Decimal</returns>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLDefaultValues.Date">
            <summary>
            Gets a DML expression that returns the default value for Date elements.
            </summary>
            <returns>DML expression of type Date</returns>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLDefaultValues.Time">
            <summary>
            Gets a DML expression that returns the default value for Time elements.
            </summary>
            <returns>DML expression of type Time</returns>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLDefaultValues.DateTime">
            <summary>
            Gets a DML expression that returns the default value for DateTime elements.
            </summary>
            <returns>DML expression of type DateTime</returns>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLDefaultValues.BinaryData">
            <summary>
            Gets a DML expression that returns the default value for BinaryData elements.
            </summary>
            <returns>DML expression of type BinaryData</returns>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.DMLService.EntityActionKind">
            <summary>
            Represents the different kinds of entity actions supported by the platform.
            </summary>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.DMLService.RetrieveIdMethod">
            <summary>
            Represents the supported methods to retrieve an entity identifier after the correspondent record is inserted.
            </summary>
        </member>
        <member name="F:OutSystems.HubEdition.Extensibility.Data.DMLService.RetrieveIdMethod.OutputParameter">
            <summary>
            Retrieve the identifier using an output parameter associated to the command.
            </summary>
        </member>
        <member name="F:OutSystems.HubEdition.Extensibility.Data.DMLService.RetrieveIdMethod.ReturnValue">
            <summary>
            Retrieve the identifier by reading the first column of the first row in the resultset returned by the command.
            </summary>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLEntityActions">
            <summary>
            Defines a contract for generating DML fragments required by applications to execute entity actions.
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLEntityActions.DMLService">
            <summary>
            Gets the associated DML service.
            </summary>
            <value>
            The DML service associated.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLEntityActions.TableSourceInfo">
            <summary>
            Gets information about this entity's underlying table source, needed by the platform for DML generation purposes.
            This information should be passed to the object's constructor in <see cref="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLService.GetEntityActions(OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceInfo)" />.
            </summary>
            <value>
            Information about this entity's underlying table source.
            </value>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLEntityActions.GetInlineTableName(OutSystems.HubEdition.Extensibility.Data.DMLService.EntityActionKind)">
            <summary>
            Returns the table name of this entity to be used in the entity action specified. 
            </summary>
            <param name="action">Entity action to be considered for table name overriding.</param>
            <returns>The table name of this entity if it needs to be overridden, otherwise returns Null.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLEntityActions.RequiresInlineParameterValues(OutSystems.HubEdition.Extensibility.Data.DMLService.EntityActionKind)">
            <summary>
            Returns True if this entity requires the parameter values to be dumped inline for a given entity action kind. 
            </summary>
            <param name="action">Entity action whose requirement for inline parameter values is to be tested.</param>
            <returns>A boolean indicating whether this entity requires inline parameter values or not.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLEntityActions.RequiresInlineTableNames(OutSystems.HubEdition.Extensibility.Data.DMLService.EntityActionKind)">
            <summary>
            Returns True if this entity requires the table names to be dumped inline for a given entity action kind. 
            </summary>
            <param name="action">Entity action whose requirement for inline table names is to be tested.</param>
            <returns>A boolean indicating whether this entity requires inline table names or not.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLEntityActions.SQLPlaceholderValuesForGet">
            <summary>
            Returns additional DML expressions to be inserted in the <code>SELECT</code> statement
            generated by the platform for the <code>Get</code> entity action.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IDictionary`2"/> with the DML expression.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLEntityActions.SQLPlaceholderValuesForGetForUpdate">
            <summary>
            Returns additional DML expression to be inserted in the <code>SELECT</code> statement
            generated by the platform for the <code>GetForUpdate</code> entity action.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IDictionary`2"/> with the DML expression.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLEntityActions.SQLPlaceholderValuesForCreate">
            <summary>
            Returns additional DML expressions to be inserted in the <code>SELECT</code> statement
            generated by the platform for the <code>Create</code> entity action.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IDictionary`2"/> with the DML expression.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLEntityActions.SQLPlaceholderValuesForCreateAndRetrieveId(System.String,System.String,OutSystems.HubEdition.Extensibility.Data.DMLService.RetrieveIdMethod@)">
            <summary>
            Returns additional DML expression to be inserted in the <code>SELECT</code> statement
            generated by the platform for the <code>Create</code> entity action, when it's necessary
            to retrieve the <code>Id</code> of the record created.
            </summary>
            <param name="idColumnName">Column that stores the identifiers.</param>
            <param name="outputParameterName">If the <code>retrieveIdMethod</code> is <code>OutputParameter</code>, this is the name of the parameter that will hold the value stored 
            in <code>idColumnName</code>, including the parameter prefix, otherwise it should be ignored.</param>
            <param name="retrieveIdMethod">Method used by the platform to retrieve the identifier.</param>
            <returns>An <see cref="T:System.Collections.Generic.IDictionary`2"/> with the DML expressions.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLEntityActions.SQLPlaceholderValuesForUpdate">
            <summary>
            Returns additional DML expressions to be inserted in the <code>UPDATE</code> statement
            generated by the platform for the <code>Update</code> entity action.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IDictionary`2"/> with the DML expressions.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLEntityActions.SQLPlaceholderValuesForDelete">
            <summary>
            Returns additional DML expressions to be inserted in the <code>DELETE</code> statement
            generated by the platform for the <code>Delete</code> entity action.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IDictionary`2"/> with the DML expressions.</returns>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions">
            <summary>
            Generates the SQL functions required by the applications to perform simple queries.
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.DMLService">
            <summary>
            Gets the associated DML service.
            </summary>
            <value>
            The DML service associated.
            </value>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.Abs(System.String)">
            <summary>
            Returns a DML expression that computes the absolute value (unsigned magnitude) of a decimal number.
            </summary>
            <param name="n">A string representing a decimal number.</param>
            <returns>A DML expression that evaluates to a Decimal.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.Round(System.String)">
            <summary>
            Returns a DML expression that computes the decimal number 'n' rounded to the zero fractional digits.
            </summary>
            <param name="n">DML expression of type Decimal that evaluates to the decimal number to round</param>
            <returns>A DML expression that evaluates to a Decimal.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.Sqrt(System.String)">
            <summary>
            Returns a DML expression that computes the square root of the decimal number 'n'.
            </summary>
            <param name="n">DML expression of type Decimal that evaluates to a decimal number</param>
            <returns>A DML expression that evaluates to a Decimal.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.Trunc(System.String)">
            <summary>
            Returns a DML expression that computes the decimal number 'n' truncated to integer removing the decimal part of 'n'.
            </summary>
            <param name="n">DML expression of type Decimal that evaluates to the decimal number to truncate</param>
            <returns>A DML expression that evaluates to a Decimal.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.Concat(System.String,System.String)">
            <summary>
            Returns a DML expression that concatenates two strings: 't1' and 't2'.
            </summary>
            <param name="t1">A DML expression that evaluates to Text.</param>
            <param name="t2">A DML expression that evaluates to Text.</param>
            <returns>A DML expression that evaluates to Text.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.Coalesce(System.String,System.String)">
            <summary>
            Returns a DML expression that coalesce two arguments: 't1' and 't2' (returning the first non null one).
            </summary>
            <param name="t1">A DML expression with no specific type.</param>
            <param name="t2">A DML expression with no specific type.</param>
            <returns>A DML expression with no specific type.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.Index(System.String,System.String)">
            <summary>
            Returns a DML expression that searches an expression for another expression and returns its starting position if found.
            Returns -1 if the <paramref name="search"/> expression is empty or cannot be found.
            </summary>
            <param name="t">A DML expression that evaluates to Text.</param>
            <param name="search">A DML expression that evaluates to Text.</param>
            <returns>A DML expression that evaluates to an Integer.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.Length(System.String)">
            <summary>
            Returns a DML expression that computes the number of characters in a string.
            </summary>
            <param name="t">A DML expression that evaluates to Text.</param>
            <returns>A DML expression that evaluates to an Integer.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.Replace(System.String,System.String,System.String)">
            <summary>
            Returns a DML expression that replaces all occurrences of a specified string value with another string value.
            </summary>
            <param name="t">A DML expression that evaluates to Text.</param>
            <param name="search">A DML expression that evaluates to Text, to search for.</param>
            <param name="replace">A DML expression that evaluates to Text, to replace all occurrences with.</param>
            <returns>A DML expression that evaluates to Text.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.Substr(System.String,System.String,System.String)">
            <summary>
            Returns a DML expression that computes a substring beginning at <code>start</code> zero-based position
            and with <code>length</code> characters.
            </summary>
            <param name="t">A DML expression that evaluates to Text.</param>
            <param name="start">A DML expression that evaluates to an Integer, containing the start index.</param>
            <param name="length">A DML expression that evaluates to an Integer, containing the length of the text to return.</param>
            <returns>A DML expression that evaluates to Text.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.ToLower(System.String)">
            <summary>
            Returns a DML expression that converts a string to lowercase.
            </summary>
            <param name="t">A DML expression that evaluates to Text.</param>
            <returns>A DML expression that evaluates to Text.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.ToUpper(System.String)">
            <summary>
            Returns a DML expression that converts a string to uppercase.
            </summary>
            <param name="t">A DML expression that evaluates to Text.</param>
            <returns>A DML expression that evaluates to Text.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.Trim(System.String)">
            <summary>
            Returns a DML expression that removes all leading and trailing white spaces from a string.
            </summary>
            <param name="t">A DML expression that evaluates to Text.</param>
            <returns>A DML expression that evaluates to Text.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.TrimEnd(System.String)">
            <summary>
            Returns a DML expression that removes all trailing white spaces from a string.
            </summary>
            <param name="t">A DML expression that evaluates to Text.</param>
            <returns>A DML expression that evaluates to Text.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.TrimStart(System.String)">
            <summary>
            Returns a DML expression that removes all leading white spaces from a string.
            </summary>
            <param name="t">A DML expression that evaluates to Text.</param>
            <returns>A DML expression that evaluates to Text.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.AddDays(System.String,System.String)">
            <summary>
            Returns a DML expression that adds days to a DateTime and returns a valid DataTime.
            </summary>
            <param name="dt">A DML expression that evaluates to a DateTime.</param>
            <param name="n">A DML expression that evaluates to a Integer.</param>
            <returns>A DML expression that evaluates to a DateTime.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.AddHours(System.String,System.String)">
            <summary>
            Returns a DML expression that adds days to a DateTime and returns a valid DataTime.
            </summary>
            <param name="dt">A DML expression that evaluates to a DateTime.</param>
            <param name="n">A DML expression that evaluates to a Integer.</param>
            <returns>A DML expression that evaluates to a DateTime.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.AddMinutes(System.String,System.String)">
            <summary>
            Returns a DML expression that adds minutes to a DateTime and returns a valid DateTime.
            </summary>
            <param name="dt">A DML expression that evaluates to a DateTime.</param>
            <param name="n">A DML expression that evaluates to an Integer.</param>
            <returns>A DML expression that evaluates to a DateTime.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.AddMonths(System.String,System.String)">
            <summary>
            Returns a DML expression that adds months to a DateTime and returns a valid DateTime.
            </summary>
            <param name="dt">A DML expression that evaluates to a DateTime.</param>
            <param name="n">A DML expression that evaluates to an Integer.</param>
            <returns>A DML expression that evaluates to a DateTime.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.AddSeconds(System.String,System.String)">
            <summary>
            Returns a DML expression that adds seconds to a DateTime and returns a valid DateTime.
            </summary>
            <param name="dt">A DML expression that evaluates to a DateTime.</param>
            <param name="n">A DML expression that evaluates to an Integer.</param>
            <returns>A DML expression that evaluates to a DateTime.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.AddYears(System.String,System.String)">
            <summary>
            Returns a DML expression that adds years to a DateTime and returns a valid DateTime.
            </summary>
            <param name="dt">A DML expression that evaluates to a DateTime.</param>
            <param name="n">A DML expression that evaluates to an Integer.</param>
            <returns>A DML expression that evaluates to a DateTime.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.BuildDateTime(System.String,System.String)">
            <summary>
            Returns a DML expression that creates a new DateTime given a Date and a Time.
            </summary>
            <param name="d">A DML expression that evaluates to a Date.</param>
            <param name="t">A DML expression that evaluates to a Time.</param>
            <returns>A DML expression that evaluates to a DateTime.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.Day(System.String)">
            <summary>
            Returns a DML expression that computes the day of a DateTime.
            </summary>
            <param name="dt">A DML expression that evaluates to a DateTime.</param>
            <returns>A DML expression that evaluates to an Integer.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.DayOfWeek(System.String)">
            <summary>
            Returns a DML expression that computes the week day of a DateTime, ranging from 0 (Sunday) to 6 (Saturday).
            </summary>
            <param name="dt">A DML expression that evaluates to a DateTime.</param>
            <returns>A DML expression that evaluates to an Integer.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.DiffDays(System.String,System.String)">
            <summary>
            Returns a DML expression that computes how many days have passed between two DateTimes.
            Returns zero if the two dates are the same, a positive integer if <paramref name="dt1"/> is smaller than <paramref name="dt2"/>, and
            a negative number otherwise.
            </summary>
            <param name="dt1">First DML expression that evaluates to a DateTime.</param>
            <param name="dt2">Second DML expression that evaluates to a DateTime.</param>
            <returns>A DML expression that evaluates to an Integer.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.DiffHours(System.String,System.String)">
            <summary>
            Returns a DML expression that computes how many hours have passed between two DateTimes.
            Returns zero if the two dates and hours are the same, a positive integer if <paramref name="dt1"/> is smaller than <paramref name="dt2"/>, and
            a negative number otherwise.
            </summary>
            <param name="dt1">First DML expression that evaluates to a DateTime.</param>
            <param name="dt2">Second DML expression that evaluates to a DateTime.</param>
            <returns>A DML expression that evaluates to an Integer.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.DiffMinutes(System.String,System.String)">
            <summary>
            Returns a DML expression that computes how many minutes have passed between two DateTimes.
            Returns zero if the two dates, hours and minutes are the same, a positive integer if <paramref name="dt1"/> is smaller than <paramref name="dt2"/>, and
            a negative number otherwise.
            </summary>
            <param name="dt1">A DML expression that evaluates to a DateTime.</param>
            /// <param name="dt2">A DML expression that evaluates to a DateTime.</param>
            <returns>A DML expression that evaluates to an Integer.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.DiffSeconds(System.String,System.String)">
            <summary>
            Returns a DML expression that computes how many seconds have passed between two DateTimes.
            Returns zero if the two dates, hours, minutes, and seconds are the same, a positive integer if <paramref name="dt1"/> is smaller than
            <paramref name="dt2"/>, and a negative number otherwise.
            </summary>
            <param name="dt1">A DML expression that evaluates to a DateTime.</param>
            <param name="dt2">A DML expression that evaluates to a DateTime.</param>
            <returns>A DML expression that evaluates to an Integer.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.Hour(System.String)">
            <summary>
            Returns a DML expression that computes the hour part of a DateTime.
            </summary>
            <param name="dt">A DML expression that evaluates to a DateTime.</param>
            <returns>A DML expression that evaluates to an Integer.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.Minute(System.String)">
            <summary>
            Returns a DML expression that computes the minute part of a DateTime.
            </summary>
            <param name="dt">A DML expression that evaluates to a DateTime.</param>
            <returns>A DML expression that evaluates to an Integer.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.Month(System.String)">
            <summary>
            Returns a DML expression that computes the month part of a DateTime.
            </summary>
            <param name="dt">A DML expression that evaluates to a DateTime.</param>
            <returns>A DML expression that evaluates to an Integer.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.NewDate(System.String,System.String,System.String)">
            <summary>
            Returns a DML expression that computes a new date from a year, month, and day.
            </summary>
            <param name="y">A DML expression that evaluates to an Integer.</param>
            <param name="m">A DML expression that evaluates to an Integer.</param>
            <param name="d">A DML expression that evaluates to an Integer.</param>
            <returns>A DML expression that evaluates to a Date.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.NewDateTime(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Returns a DML expression that computes a new DateTime from a year, month, day, hour, minute, and second.
            </summary>
            <param name="y">A DML expression that evaluates to an Integer.</param>
            <param name="mo">A DML expression that evaluates to an Integer.</param>
            <param name="d">A DML expression that evaluates to an Integer.</param>
            <param name="h">A DML expression that evaluates to an Integer.</param>
            <param name="m">A DML expression that evaluates to an Integer.</param>
            <param name="s">A DML expression that evaluates to an Integer.</param>
            <returns>A DML expression that evaluates to DateTime.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.NewTime(System.String,System.String,System.String)">
            <summary>
            Returns a DML expression that computes a new Time from an hour, minute, and second.
            </summary>
            <param name="h">A DML expression that evaluates to an Integer.</param>
            <param name="m">A DML expression that evaluates to an Integer.</param>
            <param name="s">A DML expression that evaluates to an Integer.</param>
            <returns>A DML expression that evaluates to Time.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.Second(System.String)">
            <summary>
            Returns a DML expression that computes the seconds part of a DateTime.
            </summary>
            <param name="dt">A DML expression that evaluates to a DateTime.</param>
            <returns>A DML expression that evaluates to an Integer.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.Year(System.String)">
            <summary>
            Returns a DML expression that computes the year part of a DateTime.
            </summary>
            <param name="dt">A DML expression that evaluates to a DateTime.</param>
            <returns>A DML expression that evaluates to an Integer.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.BooleanToInteger(System.String)">
            <summary>
            Returns a DML expression that converts a Boolean expression to an Integer. The expression evaluates into
            1 if the boolean is True, or 0 if False.
            </summary>
            <param name="b">A DML expression that evaluates to a Boolean.</param>
            <returns>A DML expression that evaluates to an Integer.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.BooleanToText(System.String)">
            <summary>
            Returns a DML expression that converts a Boolean in its textual representation: <code>True</code> or <code>False</code>.
            </summary>
            <param name="b">A DML expression that evaluates to Boolean.</param>
            <returns>A DML expression that evaluates to Text.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.DateTimeToDate(System.String)">
            <summary>
            Returns a DML expression that converts a DateTime to a Date, by dropping the Time component.
            </summary>
            <param name="dt">A DML expression that evaluates to a DateTime.</param>
            <returns>A DML expression that evaluates to a Date.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.DateTimeToText(System.String,System.String)">
            <summary>
            Returns a DML expression that converts a DateTime to its textual representation, using a specified format.
            </summary>
            <param name="dt">A DML expression that evaluates to a DateTime.</param>
            <param name="dateFormat">Date format used to serialize the date component of the text value (e.g. YYYY-MM-DD).</param>
            <returns>A DML expression that evaluates to Text.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.DateTimeToTime(System.String)">
            <summary>
            Returns a DML expression that converts a DateTime to a Time, by dropping the Date component.
            </summary>
            <param name="dt">A DML expression that evaluates to a DateTime.</param>
            <returns>A DML expression that evaluates to a Time.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.DateToDateTime(System.String)">
            <summary>
            Returns a DML expression that converts a Date to a DateTime, by adding an empty Time component (00:00:00).
            </summary>
            <param name="d">A DML expression that evaluates to a Date.</param>
            <returns>A DML expression that evaluates to a DateTime.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.DateToText(System.String,System.String)">
            <summary>
            Returns a DML expression that converts a Date to its textual representation, using a specified format.
            </summary>
            <param name="d">A DML expression that evaluates to a Date.</param>
            <param name="dateFormat">Date format used to serialize the date component of the text value (e.g. YYYY-MM-DD).</param>
            <returns>A DML expression that evaluates to Text.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.DecimalToBoolean(System.String)">
            <summary>
            Returns an SQL expression that converts a Decimal to a Boolean. A Decimal value of 0.0 is False, all other values are True.
            </summary>
            <param name="d">A DML expression that evaluates to a Decimal.</param>
            <returns>A DML expression that evaluates to Boolean.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.DecimalToInteger(System.String)">
            <summary>
            Returns a DML expression that converts a Decimal to an Integer.
            </summary>
            <param name="d">A DML expression that evaluates to a Decimal.</param>
            <returns>A DML expression that evaluates to Integer.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.DecimalToLongInteger(System.String)">
            <summary>
            Returns a DML expression that converts a Decimal to a Long Integer.
            </summary>
            <param name="d">A DML expression that evaluates to a Decimal.</param>
            <returns>A DML expression that evaluates to Long Integer.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.DecimalToText(System.String)">
            <summary>
            Returns a DML expression that converts a Decimal to its textual representation.
            </summary>Big
            <param name="d">A DML expression that evaluates to a Decimal.</param>
            <returns>A DML expression that evaluates to Text.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.IdentifierToInteger(System.String)">
            <summary>
            Returns a DML expression that converts an Identifier to an Integer.
            </summary>
            <param name="id">A DML expression that evaluates to an Integer.</param>
            <returns>A DML expression that evaluates to Integer.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.IdentifierToLongInteger(System.String)">
            <summary>
            Returns a DML expression that converts an Identifier to a Long Integer.
            </summary>
            <param name="id">A DML expression that evaluates to a Long Integer.</param>
            <returns>A DML expression that evaluates to a Long Integer.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.IdentifierToText(System.String)">
            <summary>
            Returns a DML expression that converts an Identifier to its textual representation.
            </summary>
            <param name="id">A DML expression that evaluates to Text.</param>
            <returns>A DML expression that evaluates to Text.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.IntegerToBoolean(System.String)">
            <summary>
            Returns a DML expression that converts an Integer to a Boolean.
            A Decimal value of 0 is False, all other values are True.
            </summary>
            <param name="i">A DML expression that evaluates to an Integer.</param>
            <returns>A DML expression that evaluates to a Boolean.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.IntegerToDecimal(System.String)">
            <summary>
            Returns a DML expression that converts an Integer to a Decimal.
            </summary>
            <param name="i">A DML expression that evaluates to an Integer.</param>
            <returns>A DML expression that evaluates to a decimal.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.IntegerToIdentifier(System.String)">
            <summary>
            Returns a DML expression that converts an Integer to an (untyped) Identifier.
            </summary>
            <param name="i">A DML expression that evaluates to an Integer.</param>
            <returns>A DML expression that evaluates to an Integer.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.LongIntegerToIdentifier(System.String)">
            <summary>
            Returns a DML expression that converts a Long Integer to an (untyped) Identifier.
            </summary>
            <param name="b">A DML expression that evaluates to a Long Integer.</param>
            <returns>A DML expression that evaluates to a Long Integer.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.LongIntegerToInteger(System.String)">
            <summary>
            Returns a DML expression that converts a Long Integer to an Integer.
            </summary>
            <param name="b">A DML expression that evaluates to a Long Integer.</param>
            <returns>A DML expression that evaluates to Integer.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.LongIntegerToDecimal(System.String)">
            <summary>
            Returns a DML expression that converts a Long Integer to a Decimal.
            </summary>
            <param name="b">A DML expression that evaluates to a Long Integer.</param>
            <returns>A DML expression that evaluates to Decimal.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.IntegerToLongInteger(System.String)">
            <summary>
            Returns a DML expression that converts an Integer to a Long Integer.
            </summary>
            <param name="b">A DML expression that evaluates to an Integer.</param>
            <returns>A DML expression that evaluates to Long Integer.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.LongIntegerToText(System.String)">
            <summary>
            Returns a DML expression that converts a Long Integer to its textual representation.
            </summary>
            <param name="b">A DML expression that evaluates to a Long Integer.</param>
            <returns>A DML expression that evaluates to Text.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.IntegerToText(System.String)">
            <summary>
            Returns a DML expression that converts an Integer to its textual representation.
            </summary>
            <param name="i">A DML expression that evaluates to an Integer.</param>
            <returns>A DML expression that evaluates to Text.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.NullDate">
            <summary>
            Returns a DML expression that computes a Null Date (1900-01-01).
            </summary>
            <returns>A DML expression that evaluates to a Date.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.NullIdentifier">
            <summary>
            Returns a DML expression that returns a Null Numeric Identifier.
            </summary>
            <returns>A DML expression that evaluates to an Integer.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.NullTextIdentifier">
            <summary>
            Returns a DML expression that computes a Null Text Identifier.
            </summary>
            <returns>A DML expression that evaluates to Text.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.TextToDate(System.String,System.String)">
            <summary>
            Returns a DML expression that converts Text to a Date.
            </summary>
            <param name="t">A DML expression that evaluates to Text.</param>
            <param name="dateFormat">Date format used to serialize the date component of the text value (e.g. YYYY-MM-DD).</param>
            <returns>A DML expression that evaluates to a Date.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.TextToDateTime(System.String,System.String)">
            <summary>
            Returns a DML expression that converts Text to a DateTime.
            </summary>
            <param name="t">A DML expression that evaluates to Text.</param>
            <param name="dateFormat">Date format used to serialize the date component of the text value (e.g. YYYY-MM-DD).</param>
            <returns>A DML expression that evaluates to a DateTime.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.TextToDecimal(System.String)">
            <summary>
            Returns a DML expression that converts Text to a Decimal.
            </summary>
            <param name="t">A DML expression that evaluates to Text.</param>
            <returns>A DML expression that evaluates to a Decimal.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.TextToIdentifier(System.String)">
            <summary>
            Returns a DML expression that converts Text to an (untyped) Identifier.
            </summary>
            <param name="t">A DML expression that evaluates to Text.</param>
            <returns>A DML expression that evaluates to Text.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.TextToInteger(System.String)">
            <summary>
            Returns a DML expression that converts Text to an Integer.
            </summary>
            <param name="t">A DML expression that evaluates to Text.</param>
            <returns>A DML expression that evaluates to an Integer.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.TextToLongInteger(System.String)">
            <summary>
            Returns a DML expression that converts Text to a Long Integer.
            </summary>
            <param name="t">A DML expression that evaluates to Text.</param>
            <returns>A DML expression that evaluates to a Long Integer.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.TextToTime(System.String)">
            <summary>
            Returns a DML expression that converts Text to Time.
            </summary>
            <param name="t">A DML expression that evaluates to Text.</param>
            <returns>A DML expression that evaluates to Time.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.TimeToDateTime(System.String)">
            <summary>
            Returns a DML expression that converts a Time to a DateTime, by adding an empty Date component (1900-01-01).
            </summary>
            <param name="t">A DML expression that evaluates to Time.</param>
            <returns>A DML expression that evaluates to DateTime.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.TimeToText(System.String)">
            <summary>
            Returns a DML expression that converts a Time to its text value in the format <code>hh:mm:ss</code>.
            </summary>
            <param name="t">A DML expression that evaluates to Time.</param>
            <returns>A DML expression that evaluates to Text.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLFunctions.IfElse(System.String,System.String,System.String)">
            <summary>
            Returns a DML expression that returns <paramref name="trueReturn"/> if <paramref name="value"/> is True, otherwise, it returns <paramref name="falseReturn"/>.
            </summary>
            <param name="value">A DML expression that evaluates to Boolean</param>
            <param name="trueReturn">A DML expression that evaluates to a specific type</param>
            <param name="falseReturn">A DML expression that evaluates to the same type as <paramref name="trueReturn"/></param>
            <returns>A DML expression that evaluates to the same type of <paramref name="trueReturn"/> and <paramref name="falseReturn"/></returns>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLIdentifiers">
            <summary>
            This interface defines methods that help build DML Identifiers for columns, tables, and others.
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLIdentifiers.DMLService">
            <summary>
            Gets the associated DML service.
            </summary>
            <value>
            The DML service associated.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLIdentifiers.MaxLength">
            <summary>
            Gets the maximum length of a simple (not compound) identifier. This value should be the minimum valid
            length for any kind of identifier (e.g. table name, parameter name)
            </summary>
            <value>
            The maximum length.
            </value>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLIdentifiers.EscapeIdentifier(System.String)">
            <summary>
            Escapes a simple (not compound) identifier to prevent name clashing with reserved words.
            </summary>
            <param name="identifierName">Name that identifies a database object.</param>
            <returns>An escaped identifier.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLIdentifiers.GetValidIdentifier(System.String,System.Boolean)">
            <summary>
            Returns a name that can be used as a valid identifier (e.g. parameter name, constraint name).
            It should contain only valid characters and its length should not exceed the maximum defined in MaxLength.
            </summary>
            <param name="baseName">An identifier name.</param>
            <param name="truncateUsingRandomDigits">
            Indicates if the identifier should be truncated if its length exceeds the <see cref="P:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLIdentifiers.MaxLength"/>. In this case, 
            random digits should be used as a suffix to prevent name clashing.
            </param>
            <returns>A string representing a valid identifier.</returns>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLOperators">
            <summary>
            Generates the DML operators required by the applications to perform simple queries.
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLOperators.DMLService">
            <summary>
            Gets the associated <see cref="T:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLService" />.
            </summary>
            <value>
            The DML service associated.
            </value>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLOperators.Negative(System.String)">
            <summary>
            Returns a DML expression that computes the numeric negation of a number.
            </summary>
            <param name="n">A DML expression that evaluates to a Decimal or Integer.</param>
            <returns>A DML expression that evaluates to a Decimal or Integer.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLOperators.Not(System.String)">
            <summary>
            Returns a DML expression that computes the logical negation.
            </summary>
            <param name="b">A DML expression that evaluates to a Boolean.</param>
            <returns>A DML expression that evaluates to a Boolean.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLOperators.IsNull(System.String)">
            <summary>
            Returns a DML expression that checks if the value is NULL.
            </summary>
            <param name="v">A DML expression that evaluates to a value of any database type.</param>
            <returns>A DML expression that evaluates to a Boolean.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLOperators.IsNotNull(System.String)">
            <summary>
            Returns a DML expression that checks if a is not NULL.
            </summary>
            <param name="v">A DML expression that evaluates to a value of any database type.</param>
            <returns>A DML expression that evaluates to a Boolean.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLOperators.Concatenate(System.String,System.String)">
            <summary>
            Returns a DML expression that concatenates two values.
            </summary>
            <param name="v1">A DML expression that evaluates to a value of any type except binary data.</param>
            <param name="v2">A DML expression that evaluates to a value of any type except binary data.</param>
            <returns>A DML expression that evaluates to Text.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLOperators.Add(System.String,System.String)">
            <summary>
            Returns a DML expression that adds two numbers.
            </summary>
            <param name="n1">A DML expression that evaluates to a Decimal or Integer.</param>
            <param name="n2">A DML expression that evaluates to a Decimal or Integer.</param>
            <returns>A DML expression that evaluates to a Decimal or Integer.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLOperators.Subtract(System.String,System.String)">
            <summary>
            Returns a DML expression that subtracts two numbers.
            </summary>
            <param name="n1">A DML expression that evaluates to a Decimal or Integer.</param>
            <param name="n2">A DML expression that evaluates to a Decimal or Integer.</param>
            <returns>A DML expression that evaluates to a Decimal or Integer.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLOperators.Multiply(System.String,System.String)">
            <summary>
            Returns a DML expression that multiplies two numbers.
            </summary>
            <param name="n1">A DML expression that evaluates to a Decimal or Integer.</param>
            <param name="n2">A DML expression that evaluates to a Decimal or Integer.</param>
            <returns>A DML expression that evaluates to a Decimal or Integer.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLOperators.Divide(System.String,System.String)">
            <summary>
            Returns a DML expression that divides two numbers.
            </summary>
            <param name="n1">A DML expression that evaluates to a Decimal or Integer.</param>
            <param name="n2">A DML expression that evaluates to a Decimal or Integer.</param>
            <returns>A DML expression that evaluates to a Decimal.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLOperators.Equal(System.String,System.String)">
            <summary>
            Returns a DML expression that checks if two values are equal.
            </summary>
            <param name="v1">A DML expression that evaluates to a value of any type except binary data.</param>
            <param name="v2">A DML expression that evaluates to a value of any type except binary data.</param>
            <returns>A DML expression that evaluates to Boolean.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLOperators.NotEqual(System.String,System.String)">
            <summary>
            Returns a DML expression that checks if two values are different.
            </summary>
            <param name="v1">A DML expression that evaluates to a value of any type except binary data.</param>
            <param name="v2">A DML expression that evaluates to a value of any type except binary data.</param>
            <returns>A DML expression that evaluates to Boolean.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLOperators.LessThen(System.String,System.String)">
            <summary>
            Returns a DML expression that checks if a value is less than another.
            </summary>
            <param name="v1">A DML expression that evaluates to a value of any type except binary data.</param>
            <param name="v2">A DML expression that evaluates to a value of any type except binary data.</param>
            <returns>A DML expression that evaluates to Boolean.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLOperators.LessThanOrEqual(System.String,System.String)">
            <summary>
            Returns a DML expression that checks if a value is less than or equal to another.
            </summary>
            <param name="v1">A DML expression that evaluates to a value of any type except binary data.</param>
            <param name="v2">A DML expression that evaluates to a value of any type except binary data.</param>
            <returns>A DML expression that evaluates to Boolean.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLOperators.GreaterThan(System.String,System.String)">
            <summary>
            Returns a DML expression that checks if a value is greater than another.
            </summary>
            <param name="v1">A DML expression that evaluates to a value of any type except binary data.</param>
            <param name="v2">A DML expression that evaluates to a value of any type except binary data.</param>
            <returns>A DML expression that evaluates to Boolean.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLOperators.GreaterThanOrEqual(System.String,System.String)">
            <summary>
            Returns a DML expression that checks if a value is less or equals to another.
            </summary>
            <param name="v1">A DML expression that evaluates to a value of any type except binary data.</param>
            <param name="v2">A DML expression that evaluates to a value of any type except binary data.</param>
            <returns>A DML expression that evaluates to Boolean.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLOperators.And(System.String,System.String)">
            <summary>
            Returns a DML expression that performs the logical AND.
            </summary>
            <param name="b1">A DML expression that evaluates to Boolean.</param>
            <param name="b2">A DML expression that evaluates to Boolean.</param>
            <returns>A DML expression that evaluates to Boolean.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLOperators.Or(System.String,System.String)">
            <summary>
            Returns a DML expression that performs the logical OR.
            </summary>
            <param name="b1">A DML expression that evaluates to Boolean.</param>
            <param name="b2">A DML expression that evaluates to Boolean.</param>
            <returns>A DML expression that evaluates to Boolean.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLOperators.Like(System.String,System.String)">
            <summary>
            Provides a DML expression that checks whether a string matches a pattern.
            </summary>
            <param name="t1">A DML expression that evaluates to Text.</param>
            <param name="t2">A DML expression that evaluates to Text.</param>
            <returns>A DML expression that evaluates to Text.</returns>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLQueries">
            <summary>
            Defines a contract for generating DML fragments required by applications to perform specific queries (e.g. count query)
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLQueries.DMLService">
            <summary>
            Gets the associated <see cref="T:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLService" />.
            </summary>
            <value>
            The DML service associated.
            </value>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLQueries.SQLPlaceholderValuesForCountQuery">
            <summary>
            Returns the DML expressions to be inserted in a query statement,
            to make it count the number of records returned by the original query.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IDictionary`2"/> with the DML expressions.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLQueries.SQLPlaceholderValuesForMaxRecords(System.String)">
            <summary>
            Returns the DML expressions to be inserted in the <code>SELECT</code> statement of a query
            to limit the number of records returned.
            </summary>
            <param name="maxRecordsParam">Number of records to return.</param>
            <returns>An <see cref="T:System.Collections.Generic.IDictionary`2"/> with the DML expressions.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLQueries.IsSupported(OutSystems.HubEdition.Extensibility.Data.DMLService.QueryJoinType)">
            <summary>
            Determines if the given join type is supported.
            </summary>
            <param name="joinType">The join type</param>
            <returns>True if the join type is supported, false otherwise</returns>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLService">
            <summary>
            Defines a contract for generating SQL fragments to interact with a database.
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLService.DatabaseServices">
            <summary>
            Gets the <see cref="T:OutSystems.HubEdition.Extensibility.Data.IDatabaseServices" /> instance associated with this service.
            </summary>
            <value>
            The database services associated.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLService.Queries">
            <summary>
            Gets an object that generates the SQL fragments required to perform specific queries (e.g. count query).
            </summary>
            <value>
            The queries.
            </value>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLService.GetEntityActions(OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceInfo)">
            <summary>
            Gets an object that generates the SQL fragments required to perform entity actions.
            </summary>
            <param name="tableSourceInfo">Information about the entity's underlying table source</param>
            <returns>An object that generates the SQL fragments required to perform entity actions</returns>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLService.Identifiers">
            <summary>
            Gets an object that generates and manipulates SQL identifiers.
            </summary>
            <value>
            An object that generates and manipulates SQL identifiers.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLService.Operators">
            <summary>
            Gets an object that generates the SQL operators required to execute simple queries.
            </summary>
            <value>
            An object that generates the SQL operators required to execute simple queries.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLService.Functions">
            <summary>
            Gets an object that generates the SQL functions required to execute simple queries.
            </summary>
            <value>
            An object that generates the SQL functions required to execute simple queries
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLService.AggregateFunctions">
            <summary>
            Gets an object that generates the SQL aggregate functions required to execute DataSet queries.
            </summary>
            <value>
            An object that generates the SQL aggregate functions required to execute DataSet queries
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLService.DefaultValues">
            <summary>
            Gets an object that generates the SQL default values for each database type.
            </summary>
            <value>
            An object that generates the SQL default values for each database type.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLService.SyntaxHighlightDefinitions">
            <summary>
            Gets an object that defines a set of fragments (e.g. keywords, operators) of the database-specific dialect
            that can be used to provide syntax highlighting in SQL statements
            </summary>
            <value>
            The syntax highlight definitions.
            </value>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLService.TransformDatabaseValue(System.String,OutSystems.HubEdition.Extensibility.Data.DBDataType)">
            <summary>
            Returns an SQL expression that transforms a value of a specified type, so that it can be used in a query condition.
            </summary>
            <param name="value">DML expression that evaluates to a specific type.</param>
            <param name="type">Database type of the literal.</param>
            <returns>DML expression that transforms the value.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLService.TransformValue(System.String,OutSystems.HubEdition.Extensibility.Data.DBDataType)">
            <summary>
            Returns an SQL expression that transforms a value of a specified type, so that it can be used in a query condition or calculated column.
            </summary>
            <param name="value">DML expression that evaluates to a specific type.</param>
            <param name="type">Database type of the literal.</param>
            <returns>DML expression that transforms the value.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLService.EscapeTextValue(System.String)">
            <summary>
            Escapes special characters in a text value to be used in SQL statements (e.g replace ' by '').
            </summary>
            <param name="text">text value to be escaped</param>
            <returns>The escaped text</returns>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLSyntaxHighlightDefinitions">
            <summary>
            Defines a set of fragments (e.g. keywords, operators) of the database-specific dialect 
            that can be used to provide syntax highlighting in SQL statements
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLSyntaxHighlightDefinitions.DMLService">
            <summary>
            Gets the associated <see cref="T:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLService" />.
            </summary>
            <value>
            The DML service associated.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLSyntaxHighlightDefinitions.Keywords">
            <summary>
            Returns a set of reserved keywords (e.g. SELECT, FROM, JOIN)
            </summary>
            <value>
            The keywords.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLSyntaxHighlightDefinitions.Functions">
            <summary>
            Returns a set of function names (e.g. MAX, ROUND, UPPER))
            </summary>
            <value>
            The functions.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLSyntaxHighlightDefinitions.Operators">
            <summary>
            Returns a set of operators (e.g. +, LIKE, EXISTS)
            </summary>
            <value>
            The operators.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLSyntaxHighlightDefinitions.DataTypes">
            <summary>
            Returns a set of data types (e.g. INTEGER, CHAR, NVARCHAR)
            </summary>
            <value>
            The data types.
            </value>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.ExecutionService.BaseExecutionService">
             <summary>
            Base implementation of a database service that handles the execution of statements made while connected to a database.
             </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.ExecutionService.BaseExecutionService.ParameterPrefix">
            <summary>
            Gets the prefix used to qualify command parameters (e.g. @)
            </summary>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.ExecutionService.BaseExecutionService.OnExecuteException(System.Data.Common.DbException,System.Data.IDbCommand,System.Data.IDataReader,System.Data.IDbConnection,System.Data.IDbTransaction,OutSystems.HubEdition.Extensibility.Data.TransactionService.ITransactionManager)">
            <summary>
            Method called by the consumers of this service when an execution exception occurs.
            It is used to handle edge cases where cleaning up is required.
            NOTE: This method should handle the exception and not rethrow it.
            </summary>
            <param name="e">Exception thrown during execution.</param>
            <param name="cmd">Command that was running when the exception was raised.</param>
            <param name="reader">Reader created from executing the command, if applicable.</param>
            <param name="conn">Connection that creates the transaction where the exception occurred, if applicable.</param>
            <param name="trans">Transaction where the exception was produced, if applicable.</param>
            <param name="manager">Transaction manager associated with this command, if applicable.</param>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.ExecutionService.BaseExecutionService.IsStringOrAnsiStringDbType(System.Data.DbType)">
            <summary>
            Checks if a type is String or AnsiString.
            </summary>
            <param name="dbType">Database type.</param>
            <returns>True if it is String or AnsiString, False otherwise.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.ExecutionService.BaseExecutionService.SetCorrectDBType(System.Data.DbType,System.Data.IDbDataParameter)">
            <summary>
            Sets a parameter with a database type.
            </summary>
            <param name="dbType">Database Type.</param>
            <param name="param">Parameter to change.</param>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.ExecutionService.BaseExecutionService.SetParameterValue(System.Data.IDbDataParameter,System.Data.DbType,System.Object)">
            <summary>
            Set a parameter with a value.
            </summary>
            <param name="param">Parameter to set the value with.</param>
            <param name="dbType">Database type of the parameter.</param>
            <param name="paramValue">Value to set.</param>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.ExecutionService.BaseExecutionService.IsConnectionException(System.Data.Common.DbException)">
            <summary>
            Checks if an exception was raised due to a connection error.
            </summary>
            <param name="e">Exception raised.</param>
            <returns>True if the exception was due to a connection problem, False otherwise.</returns>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.ExecutionService.BaseExecutionService.DatabaseServices">
            <summary>
            Gets the <see cref="T:OutSystems.HubEdition.Extensibility.Data.IDatabaseServices"/> instance associated with this service.
            </summary>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.ExecutionService.BaseExecutionService.#ctor(OutSystems.HubEdition.Extensibility.Data.IDatabaseServices)">
            <summary>
            Initializes a new instance of the <see cref="T:OutSystems.HubEdition.Extensibility.Data.ExecutionService.BaseExecutionService"/> class.
            </summary>
            <param name="databaseServices">The database services to be used with this execution service.</param>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.ExecutionService.BaseExecutionService.DatabaseConfiguration">
            <summary>
            Gets the database configuration used by this service.
            </summary>
            <value>The database configuration.</value>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.ExecutionService.BaseExecutionService.ExecuteNonQuery(System.Data.IDbCommand)">
            <summary>
            Executes a command and returns the number of affected rows.
            This implementation does not use the <code>isApplication</code> flag, and logs exceptions.
            </summary>
            <param name="cmd">The command to execute.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.ExecutionService.BaseExecutionService.ExecuteReader(System.Data.IDbCommand)">
            <summary>
            Executes a command and returns the resulting <see cref="T:System.Data.IDataReader"/>.
            This implementation logs exceptions.
            </summary>
            <param name="cmd">The command to execute.</param>
            <returns>A reader with the results of executing the query command.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.ExecutionService.BaseExecutionService.ExecuteScalar(System.Data.IDbCommand)">
            <summary>
            Executes a command and returns the value of the first column of the first row in the resultset returned by the query.
            This implementation logs exceptions.
            </summary>
            <param name="cmd">The command to execute.</param>
            <returns>An object with the resulting first row and first column of the query defined in the query command.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.ExecutionService.BaseExecutionService.SetParameterDirection(System.Data.IDbDataParameter,System.Data.ParameterDirection)">
            <summary>
            Sets the parameter direction (Input, Output, InputOutput or ReturnValue).
            </summary>
            <param name="param">Parameter to set the direction.</param>
            <param name="direction">Direction to be set.</param>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.ExecutionService.BaseExecutionService.CreateCommand(System.Data.IDbConnection)">
            <summary>
            Creates an empty SQL command to be executed in a connection.
            </summary>
            <param name="connection">The connection to create the command.</param>
            <returns>A an empty command.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.ExecutionService.BaseExecutionService.CreateCommand(System.Data.IDbTransaction,System.String)">
            <summary>
            Creates an SQL command to be executed in a transaction.
            This implementation replaces <code>\r\n</code> by <code>\n</code>.
            </summary>
            <param name="trans">The transaction to execute the command.</param>
            <param name="sql">The SQL statement to be executed.</param>
            <returns>An SQL command.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.ExecutionService.BaseExecutionService.CreateCommand(System.Data.IDbConnection,System.String)">
            <summary>
            Creates a transactionless command associated with the connection.
            This implementation does not transform the SQL statement.
            </summary>
            <param name="connection">The connection where the command is going to be executed.</param>
            <param name="sql">The SQL statement to be executed.</param>
            <returns>An SQL command.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.ExecutionService.BaseExecutionService.CreateParameter(System.Data.IDbCommand,System.String,System.Data.DbType,System.Object)">
            <summary>
            Creates and associates a new parameter to a command.
            If the command already has a parameter with the same name, that parameter is returned
            and the command parameters are not changed.
            </summary>
            <param name="cmd">The command to associate the parameter.</param>
            <param name="name">Parameter name.</param>
            <param name="dbType">Parameter type.</param>
            <param name="paramValue">Parameter value.</param>
            <returns>The parameter already associated to the command.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.ExecutionService.BaseExecutionService.ConvertToDbType(System.Type)">
            <summary>
            Converts a type to its equivalent type in the database.
            This implementation matches:<para>string to DbType.String;</para><para>Int32 to DbType.Int32;</para><para>DateTime to DbType.DateTime;</para>
            <para>decimal to DbType.Decimal;</para><para>bool to DbType.Boolean;</para><para>otherwise throws a NotSupportedException.</para>
            </summary>
            <param name="type">The type to be converted.</param>
            <returns>A supported type by the database.</returns>
            <exception cref="T:System.NotSupportedException">When no suitable type is found.</exception>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.ExecutionService.BaseExecutionService.ConvertToDbType(OutSystems.HubEdition.Extensibility.Data.DBDataType,System.String)">
            <summary>
            Converts a type to its equivalent type in the target framework.
            </summary>
            <param name="type">The type to be converted.</param>
            <param name="providerType">The name of the type used by the provider.</param>
            <returns>A supported type by the database.</returns>
            <exception cref="T:System.NotSupportedException">When no suitable type is found.</exception>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.ExecutionService.BaseExecutionService.IsTimeoutException(System.Exception)">
            <summary>
            Checks if an exception was raised due to a timeout.
            This implementation checks if the exception is a <see cref="T:System.Data.Common.DbException"/>, and its error code is -2.
            </summary>
            <param name="exception">Exception raised.</param>
            <returns>True if the exception was due to a timeout, False otherwise.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.ExecutionService.BaseExecutionService.TransformDatabaseToRuntimeValue(System.Object)">
            <summary>
            Transforms a database value to the equivalent runtime value.
            This implementation returns the value without changing it.
            </summary>
            <param name="value">Value to transform.</param>
            <returns>The transformed object.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.ExecutionService.BaseExecutionService.TransformRuntimeToDatabaseValue(System.Data.DbType,System.Object)">
            <summary>
            Transforms a runtime value to the equivalent database value.
            This implementation returns the value without changing it.
            </summary>
            <param name="dbType">Database type.</param>
            <param name="value">Value to transform.</param>
            <returns>The transformed object.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.ExecutionService.BaseExecutionService.BulkInsert(System.Data.DataTable)">
            <summary>
            Bulk inserts data into the database.
            In this base implementation, the data is inserted individually.
            </summary>
            <param name="datatable">A datatable with all information to transfer.</param>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.ExecutionService.ExecutionServiceExtensions">
            <summary>
            Class with extension methods to <see cref="T:OutSystems.HubEdition.Extensibility.Data.ExecutionService.IExecutionService"/>.
            </summary>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.ExecutionService.ExecutionServiceExtensions.IsDateType(OutSystems.HubEdition.Extensibility.Data.ExecutionService.IExecutionService,System.Data.DbType)">
             <summary>
             Checks if a type is a date or time.
            <para>.NET: Returns True if a type is a DateTime, Date, or Time.</para>
             </summary>
            <param name="executionService">The execution service to use to check if a type is a date or time.</param>
            <param name="dbType">Type to be checked.</param>
             <returns>A boolean indicating if the type is a date or time.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.ExecutionService.ExecutionServiceExtensions.IsUnicodeStringType(OutSystems.HubEdition.Extensibility.Data.ExecutionService.IExecutionService,System.Data.DbType)">
            <summary>
            Checks if a type is a unicode string.
            <para>.NET: Returns True if a type is a String or StringFixedLength.</para>
            </summary>
            <param name="executionService">The execution service to use to check if a type is a unicode string.</param>
            <param name="dbType">Type to be checked.</param>
            <returns>A boolean indicating if the type is a unicode string.</returns>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.ExecutionService.IExecutionService">
            <summary>
            Database service that handles the execution of statements made while connected to a database.
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.ExecutionService.IExecutionService.DatabaseServices">
            <summary>
            Gets the <see cref="T:OutSystems.HubEdition.Extensibility.Data.IDatabaseServices" /> instance associated with this service.
            </summary>
            <value>
            The database services associated.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.ExecutionService.IExecutionService.ParameterPrefix">
            <summary>
            Gets the prefix used to qualify command parameters (e.g. @)
            </summary>
            <value>
            The parameter prefix.
            </value>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.ExecutionService.IExecutionService.CreateParameter(System.Data.IDbCommand,System.String,System.Data.DbType,System.Object)">
            <summary>
            Creates and associates a new parameter to a command.
            </summary>
            <param name="cmd">The command to associate the parameter.</param>
            <param name="name">Parameter name.</param>
            <param name="dbType">Parameter type.</param>
            <param name="paramValue">Parameter value.</param>
            <returns>The parameter associated to the command.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.ExecutionService.IExecutionService.IsConnectionException(System.Data.Common.DbException)">
            <summary>
            Checks if an exception was raised due to a connection error.
            </summary>
            <param name="e">Exception raised.</param>
            <returns>True if the exception was due to a connection problem, False otherwise.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.ExecutionService.IExecutionService.OnExecuteException(System.Data.Common.DbException,System.Data.IDbCommand,System.Data.IDataReader,System.Data.IDbConnection,System.Data.IDbTransaction,OutSystems.HubEdition.Extensibility.Data.TransactionService.ITransactionManager)">
            <summary>
            Method called by the consumers of this service when an execution exception occurs.
            It is used to handle edge cases where cleaning up is required.
            NOTE: This method should handle the exception and not rethrow it.
            </summary>
            <param name="e">Exception thrown during execution.</param>
            <param name="cmd">Command that was running when the exception was raised.</param>
            <param name="reader">Reader created from executing the command, if applicable.</param>
            <param name="conn">Connection that creates the transaction where the exception occurred, if applicable.</param>
            <param name="trans">Transaction where the exception was produced, if applicable.</param>
            <param name="manager">Transaction manager associated with this command, if applicable.</param>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.ExecutionService.IExecutionService.ExecuteNonQuery(System.Data.IDbCommand)">
            <summary>
            Executes a command and returns the number of affected rows.
            </summary>
            <param name="cmd">The command to execute.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.ExecutionService.IExecutionService.ExecuteReader(System.Data.IDbCommand)">
            <summary>
            Executes a command and returns the resulting <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="cmd">The command to execute.</param>
            <returns>A reader with the results of executing the query command.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.ExecutionService.IExecutionService.ExecuteScalar(System.Data.IDbCommand)">
            <summary>
            Executes a command and returns the value of the first column of the first row in the resultset returned by the query.
            </summary>
            <param name="cmd">The command to execute.</param>
            <returns>An object with the resulting first row and first column of the query defined in the query command.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.ExecutionService.IExecutionService.CreateCommand(System.Data.IDbConnection,System.String)">
            <summary>
            Creates a transactionless command associated with the connection.
            </summary>
            <param name="connection">The connection where the command is going to be executed.</param>
            <param name="sql">The SQL statement to be executed.</param>
            <returns>An SQL command.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.ExecutionService.IExecutionService.CreateCommand(System.Data.IDbTransaction,System.String)">
            <summary>
            Creates an SQL command to be executed in a transaction.
            </summary>
            <param name="trans">The transaction to execute the command.</param>
            <param name="sql">The SQL statement to be executed.</param>
            <returns>An SQL command.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.ExecutionService.IExecutionService.TransformDatabaseToRuntimeValue(System.Object)">
            <summary>
            Transforms a database value to the equivalent runtime value.
            </summary>
            <param name="value">Value to transform.</param>
            <returns>The transformed object.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.ExecutionService.IExecutionService.TransformRuntimeToDatabaseValue(System.Data.DbType,System.Object)">
            <summary>
            Transforms a runtime value to the equivalent database value.
            </summary>
            <param name="dbType">Database type.</param>
            <param name="value">Value to be transform.</param>
            <returns>The transformed object.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.ExecutionService.IExecutionService.SetParameterDirection(System.Data.IDbDataParameter,System.Data.ParameterDirection)">
            <summary>
            Sets the parameter direction (Input, Output, InputOutput or ReturnValue).
            </summary>
            <param name="param">Parameter to set the direction.</param>
            <param name="direction">Direction to be set.</param>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.ExecutionService.IExecutionService.SetParameterValue(System.Data.IDbDataParameter,System.Data.DbType,System.Object)">
            <summary>
            Set a parameter with a value.
            </summary>
            <param name="param">Parameter to set the value with.</param>
            <param name="dbType">Database type of the parameter.</param>
            <param name="paramValue">Value to set.</param>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.ExecutionService.IExecutionService.ConvertToDbType(System.Type)">
            <summary>
            Converts a type to its equivalent type in the database.
            </summary>
            <param name="type">The type to be converted.</param>
            <returns>A database type.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.ExecutionService.IExecutionService.ConvertToDbType(OutSystems.HubEdition.Extensibility.Data.DBDataType,System.String)">
            <summary>
            Converts a type to its equivalent type in the database.
            </summary>
            <param name="type">The type to be converted.</param>
            <param name="originalType">The database specific original type name.</param>
            <returns>A database type.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.ExecutionService.IExecutionService.IsTimeoutException(System.Exception)">
            <summary>
            Checks if an exception was raised due to a timeout.
            </summary>
            <param name="exception">Exception raised.</param>
            <returns>True if the exception was caused by a timeout, False otherwise.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.ExecutionService.IExecutionService.BulkInsert(System.Data.DataTable)">
            <summary>
            Bulk inserts data into the database
            </summary>
            <param name="datatable">A datatable with all information to transfer</param>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.IDatabaseProvider">
            <summary>
            Represents a database management system.
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.IDatabaseProvider.Key">
            <summary>
            Returns a unique identifier of the database provider, used to identify it as a plugin
            </summary>
            <value>
            A unique identifier of the provider.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.IDatabaseProvider.Properties">
            <summary>
            Gets the <see cref="T:OutSystems.HubEdition.Extensibility.Data.IProviderProperties"/> instance associated with this database provider.
            </summary>
            <value>The provider properties.</value>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.IDatabaseProvider.CreateEmptyIntegrationDatabaseConfiguration">
            <summary>
            Returns an empty <see cref="T:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.IIntegrationDatabaseConfiguration" />.
            </summary>
            <returns>An empty configuration.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.IDatabaseProvider.GetIntegrationDatabaseServices(OutSystems.HubEdition.Extensibility.Data.ConfigurationService.IRuntimeDatabaseConfiguration)">
            <summary>
            Returns the services provided by the DBMS.
            </summary>
            <param name="databaseConfiguration">The database configuration.</param>
            <returns>The Integration Database Service provided from DBMS.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.IDatabaseProvider.Equals(System.Object)">
            <summary>
            Validates that the plugin provider is the same
            </summary>
            <param name="provider">The provider to compare with</param>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.IDatabaseServices">
            <summary>
            Represents the set of services that needs to be implemented to add support for a new database.
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.IDatabaseServices.DatabaseConfiguration">
            <summary>
            Gets the <see cref="T:OutSystems.HubEdition.Extensibility.Data.ConfigurationService.IRuntimeDatabaseConfiguration" /> object associated with a database.
            It encapsulates the necessary information to connect to a database instance.
            </summary>
            <value>
            The database configuration.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.IDatabaseServices.ObjectFactory">
            <summary>
            Returns a factory capable of creating database information objects from qualified names. If required, this object might access the database.
            </summary>
            <value>
            The object factory.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.IDatabaseServices.TransactionService">
            <summary>
            Gets the <see cref="T:OutSystems.HubEdition.Extensibility.Data.TransactionService.ITransactionService" /> object associated with a database.
            Represents a specific database connection or transaction.
            </summary>
            <value>
            The transaction service.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.IDatabaseServices.ExecutionService">
            <summary>
            Gets the <see cref="T:OutSystems.HubEdition.Extensibility.Data.ExecutionService.IExecutionService" /> associated with the database.
            Represents an execution context to run SQL commands on a database.
            </summary>
            <value>
            The execution service.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.IDatabaseServices.DMLService">
            <summary>
            Gets the <see cref="T:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLService" /> object associated with the database.
            Represents a service that generates SQL statements.
            </summary>
            <value>
            The DML service.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.IDatabaseServices.IntrospectionService">
            <summary>
            Gets the <see href="IIntrospectionService" /> object associated with the database.
            Represents a service that provides information about meta-data of the database.
            </summary>
            <value>
            The introspection service.
            </value>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.IInternalDatabaseProvider">
            <summary>
            Represents a database management system that is only used internally by the platform.
            </summary>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.IInternalPlatformDatabaseProvider">
            <summary>
            Represents a database management system that is only used internally by the platform.
            </summary>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.IntrospectionService.IIntrospectionService">
            <summary>
            Inspects a database server to retrieve information about its data model.
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.IntrospectionService.IIntrospectionService.QueryTimeout">
            <summary>
            Sets the command timeout value to use in introspection queries.
            </summary>
            <value>
            The query timeout.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.IntrospectionService.IIntrospectionService.DatabaseServices">
            <summary>
            Gets the database services.
            </summary>
            <value>
            The database services associated.
            </value>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.IntrospectionService.IIntrospectionService.ListDatabases">
            <summary>
            Returns the list of databases that can be accessed from the current configuration. A database is a logical group of data objects (e.g. tables, views)
            that the plugin maps to a db-specific concept (e.g. SQL Server catalog or Oracle schema).
            </summary>
            <returns>List of available databases in the given server</returns>
            <exception cref="T:System.Data.Common.DbException">If an error occurs while accessing the database</exception>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.IntrospectionService.IIntrospectionService.ListTableSources(OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.IDatabaseInfo,OutSystems.HubEdition.Extensibility.Data.IntrospectionService.IsTableSourceToIgnore)">
            <summary>
            Returns a list of table sources (e.g. tables, views) that belong to a given database. 
            The returned table sources must have different display names.
            </summary>
            <param name="database">Database from which we want to fetch the list of tables</param>
            <param name="isTableSourceToIgnore">The delegate to call to see if the table source should be ignored and excluded from the returned list</param>
            <returns>List of available table sources in the given database</returns>
            <exception cref="T:System.Data.Common.DbException">if an error occurs while accessing the database</exception>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.IntrospectionService.IIntrospectionService.GetTableSourceForeignKeys(OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceInfo)">
            <summary>
            Returns the list of foreign keys of the table source (e.g. table, view)
            </summary>
            <param name="tableSource">Table source from which we want to fetch the list of foreign keys</param>        
            <returns>The list of foreign keys of the table</returns>
            <exception cref="T:System.Data.Common.DbException">if an error occurs while accessing the database</exception>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.IntrospectionService.IIntrospectionService.GetTableSourceColumns(OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceInfo)">
            <summary>
            Returns the list of columns of the table source (e.g. table, view)
            </summary>
            <param name="tableSource">Table source from which we want to fetch the list of columns</param>        
            <returns>The columns of the table</returns>
            <exception cref="T:System.Data.Common.DbException">if an error occurs while accessing the database</exception>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.IntrospectionService.IntrospectionServiceExtensions.ListTableSourcesWithoutFilter(OutSystems.HubEdition.Extensibility.Data.IntrospectionService.IIntrospectionService,OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.IDatabaseInfo)">
            <summary>
            Returns a list of table sources (e.g. tables, views) that belong to a given database. This extension method doesn't filter any table source.
            </summary>
            <param name="introspectionService">IIntrospectionService to use</param>
            <param name="database">Database from which we want to fetch the list of tables</param>
            <returns>List of available table sources in the given database</returns>
            <exception cref="T:System.Data.Common.DbException">if an error occurs while accessing the database</exception>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.IntrospectionService.IsTableSourceToIgnore">
            <summary>
            Defines the delegate to call to see if a table source should be ignored.
            </summary>    
            <param name="tableName">Name of the table source</param>
            <returns>True if the table source should be ignored. False otherwise</returns>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.IProviderProperties">
            <summary>
            Represents a set of properties that are specific to a database provider.
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.IProviderProperties.DatabaseProvider">
            <summary>
            Gets the associated <see cref="T:OutSystems.HubEdition.Extensibility.Data.IDatabaseProvider" /> instance.
            </summary>
            <value>
            The database provider associated.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.IProviderProperties.DisplayName">
            <summary>
            Gets the friendly name of the database provider.
            </summary>
            <value>
            The display name.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.IProviderProperties.PlatformDisplayName">
            <summary>
            Gets the friendly name of the database provider, when used to run the OutSystems Platform.
            </summary>
            <value>
            The display name.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.IProviderProperties.DatabaseContainerName">
            <summary>
            Gets the friendly name of the object used to represent a database container (e.g. database, catalog, schema, ...), used
            for UI generation and messages displayed to the end-user.
            </summary>
            <value>
            The name of the database container.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.IProviderProperties.SupportsMultipleActiveResultSets">
            <summary>
            Indicates if the provider's driver supports more than one active result set for a single connection.
            </summary>
            <value>
            True if it supports multiple active result sets for a single connection, False otherwise.
            </value>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.Platform.Configuration.IElevatedUserConfiguration">
            <summary>
            This interface identifies a database configurations, i.e., an implementation of <see cref="T:OutSystems.HubEdition.Extensibility.Data.Platform.Configuration.IPlatformDatabaseConfiguration"/> or <see cref="T:OutSystems.HubEdition.Extensibility.Data.Platform.Configuration.ISessionDatabaseConfiguration"/>,
            that handle operations that require elevated privileges user.
            The credentials for this user will be set whenever the execution of operations that require elevated user is necessary.
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.Platform.Configuration.IElevatedUserConfiguration.ElevatedAuthenticationCredential">
            <summary>
            This property returns the credentials for the elevated user.
            Changes to this property must be reflected by the RuntimeDatabaseConfigurations
            returned by the method <see cref="M:OutSystems.HubEdition.Extensibility.Data.Platform.Configuration.IElevatedUserConfiguration.ElevatedRuntimeDatabaseConfiguration" />.
            </summary>
            <value>
            The elevated user credentials.
            </value>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.Configuration.IElevatedUserConfiguration.ElevatedRuntimeDatabaseConfiguration">
            <summary>
            Gets the object that compacts all the needed configuration parameters to be used in runtime.
            </summary>
            <returns>The configuration that allows accessing the database as an elevated user.</returns>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.Platform.Configuration.IElevatedUserConfiguration.ElevatedUserAuthenticationMode">
            <summary>
            The authentication mode used by the elevated user.
            </summary>
            <value>
            The elevated user authentication mode.
            </value>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.Configuration.IPlatformDatabaseConfiguration.RuntimeDatabaseConfiguration(OutSystems.HubEdition.Extensibility.Data.Platform.Configuration.Source,OutSystems.HubEdition.Extensibility.Data.Platform.Configuration.UserType)">
            <summary>
            Gets the object that compacts all the needed configuration parameters to be used in runtime.
            </summary>
            <param name="source">Specifies the component that will use the configuration (e.g. service or application).</param>
            <param name="userType">Specifies to what user the configuration will refer to.</param>
            <returns>The configuration that allows services or applications to access the database as the specified user.</returns>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.Platform.Configuration.IPlatformDatabaseConfiguration.LogAuthenticationCredential">
            <summary>
            This property returns the credentials for the log user.
            </summary>
            <value>
            The log authentication credentials.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.Platform.Configuration.AbstractSessionDatabaseConfiguration.PlatformDatabaseProvider">
            <summary>
            Gets the database provider. It provides information about the database,
            and access to its services.
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.Platform.Configuration.ISessionConfigurationManager.QueryTimeout">
            <summary>
            Sets the command timeout value to use in configuration queries.
            </summary>
            <value>
            The query timeout.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.Platform.Configuration.ISessionConfigurationManager.SessionStatements">
            <summary>
            This property will obtain all the statements necessary to recreate the session model.
            It has all the opportunities to do changes in templates that depend on configuration information.
            </summary>
            <value>
            Statements to recreate the session model.
            </value>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.Configuration.ISessionConfigurationManager.RequiresElevatedPrivileges">
            <summary>
            Validates if elevated privileges are actually required
            If plugin has ImplementsElevatedPrivilegesOperations=false, this method should return false.
            This ensures pre create or upgrade logic can be ran by hand to avoid elevated privileges during setup 
            <returns>Elevated privileges operations still need to run for setup to be complete</returns>
            </summary>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.Configuration.ISessionConfigurationManager.Pre_CreateOrUpgradeSession">
            <summary>
            Allows the plugin to run instructions before the create/upgrade is done.
            This operation requires an elevated user privilege.
            If plugin has ImplementsElevatedPrivilegesOperations=false, this method should not be implemented. (the caller wouldn’t have a proper config to pass anyway)
            This would allow logic such as - create the database if it doesn’t exist.
            </summary>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.Configuration.ISessionConfigurationManager.TestSessionConnection(System.String@)">
            <summary>
            Validates that the configuration for the user ‘User’ are valid and it can reach the db.
            It will return false if it cannot reach the db, and will have a non null errorMessage in that case.
            </summary>
            <param name="friendlyMessage">The friendly message to be show as output.</param>
            <returns>Returns True if the connection to the database was successfully. Otherwise it returns False.</returns>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.Platform.Configuration.ISessionDatabaseConfiguration.PlatformDatabaseProvider">
            <summary>
            Gets the database provider. It provides information about the database,
            and access to its services.
            </summary>
            <value>
            The platform database provider.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.Platform.Configuration.ISessionDatabaseConfiguration.ImplementsElevatedPrivilegesOperations">
            <summary>
            This property indicates if the plugin has operations that require elevated privileges user.
            If this is set to true, the caller (Configuration Tool) will prompt a form to ask for credentials, and use them in operations that require elevated user
            </summary>
            <value>
            True if it implements elevated privileges operations, False otherwise.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.Platform.Configuration.ISessionDatabaseConfiguration.AuthenticationMode">
            <summary>
            Indicates the current state of the Configuration, if the property is true, then IntegratedAuthenticationMode is set
            </summary>
            <value>
            The authentication type.
            </value>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.Configuration.ISessionDatabaseConfiguration.RuntimeDatabaseConfiguration">
            <summary>
            Gets the object that compacts all the needed configuration parameters to be used in runtime.
            </summary>
            <returns>The configuration that allows accessing the database as the session user.</returns>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.Platform.Configuration.ISessionDatabaseConfiguration.AdvancedConfigurationMode">
            <summary>
            Indicates the current state of the Configuration, if the property is true, then Advanced Configuration mode is set is set
            </summary>
            <value>
            True if advanced configuration mode is set, False otherwise.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.Platform.Configuration.ISessionDatabaseConfiguration.ContextualHelpForAdvancedMode">
            <summary>
            Contextual text to help the user understand what does the Advanced configuration consist of.
            </summary>
            <value>
            The contextual help for advanced mode.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.Platform.Configuration.ISessionDatabaseConfiguration.ContextualHelpForBasicMode">
            <summary>
            Contextual text to help the user understand what does the Basic configuration consist of.
            </summary>
            <value>
            The contextual help for basic mode.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.Platform.Configuration.ISessionDatabaseConfiguration.SessionAuthenticationCredential">
            <summary>
            This property returns the credentials for the session user.
            </summary>
            <value>
            The session authentication credentials.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.Platform.Configuration.AbstractTwoUserDatabaseConfiguration.DatabaseProvider">
            <summary>
            Gets the database provider. It provides information about the database,
            and access to its services.
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.Platform.Configuration.ISettableTwoUserDatabaseConfiguration.AuthenticationMode">
            <summary>
            Indicates the current state of the Configuration, if the property is true, then IntegratedAuthenticationMode is set
            </summary>
            <value>
            The authentication type of the configuration.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.Platform.Configuration.ISettableTwoUserDatabaseConfiguration.AdminAuthenticationCredential">
            <summary>
            This property returns the credentials for the admin user.
            </summary>
            <value>
            The admin authentication credentials.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.Platform.Configuration.ISettableTwoUserDatabaseConfiguration.RuntimeAuthenticationCredential">
            <summary>
            This property returns the credentials for the runtime user.
            </summary>
            <value>
            The runtime authentication credentials.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.Platform.Configuration.ITwoUserDatabaseConfiguration.DatabaseProvider">
            <summary>
            Gets the database provider. It provides information about the database,
            and access to its services.
            </summary>
            <value>
            The database provider.
            </value>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.Configuration.ITwoUserDatabaseConfiguration.RuntimeDatabaseConfiguration(OutSystems.HubEdition.Extensibility.Data.Platform.Configuration.UserType)">
            <summary>
            Gets the object that compacts all the needed configuration parameters to be used in runtime for a specific user type.
            </summary>
            <returns>The configuration that allows services or applications to access the database as the specified user.</returns>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.Platform.Configuration.ITwoUserDatabaseConfiguration.ImplementsElevatedPrivilegesOperations">
            <summary>
            This property indicates if the plugin implements the <code>IElevatedUserConfiguration</code> interface,
            meaning that it has operations that require elevated privileges user.
            When true, the caller (e.g. Configuration Tool) will ask the user for credentials, and use them in operations that require elevated user permissions.
            </summary>
            <value>
            True if it implements elevated privileges operations, False otherwise.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.Platform.Configuration.ITwoUserDatabaseConfiguration.AuthenticationMode">
            <summary>
            Indicates the current state of the Configuration, if the property is true, then IntegratedAuthenticationMode is set
            </summary>
            <value>
            The authentication type of the configuration.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.Platform.Configuration.ITwoUserDatabaseConfiguration.AdvancedConfigurationMode">
            <summary>
            Indicates the current state of the Configuration, if the property is true, then Advanced Configuration mode is set.
            </summary>
            <value>
            True if Advanced Configuration mode is set. False otherwise.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.Platform.Configuration.ITwoUserDatabaseConfiguration.ContextualHelpForAdvancedMode">
            <summary>
            Contextual text to help the user understand what does the Advanced configuration consist of.
            </summary>
            <value>
            The contextual help for advanced mode.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.Platform.Configuration.ITwoUserDatabaseConfiguration.ContextualHelpForBasicMode">
            <summary>
            Contextual text to help the user understand what does the Basic configuration consist of.
            </summary>
            <value>
            The contextual help for basic mode.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.Platform.Configuration.ITwoUserDatabaseConfiguration.AdminAuthenticationCredential">
            <summary>
            This property returns the credentials for the admin user.
            </summary>
            <value>
            The admin authentication credentials.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.Platform.Configuration.ITwoUserDatabaseConfiguration.RuntimeAuthenticationCredential">
            <summary>
            This property returns the credentials for the runtime user.
            </summary>
            <value>
            The runtime authentication credentials.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.Platform.Configuration.ITwoUserDatabaseConfigurationManager.QueryTimeout">
            <summary>
            Sets the command timeout value to use in configuration queries.
            </summary>
            <value>
            The query timeout.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.Platform.Configuration.ITwoUserDatabaseConfigurationManager.RecommendDatabaseBackup">
            <summary>
            This property indicates if this database should recommend a Database backup.
            If the DB doesn’t allow rollback of all statements and does implicit commits, it should have this property set to true.
            when set to true, indicates that its statements can do autocommit.
            </summary>
            <value>
            True if a Database backup is recommended, False otherwise.
            </value>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.Configuration.ITwoUserDatabaseConfigurationManager.CreateDatabaseScriptParser">
            <summary>
            Creates an object capable of parsing OutSystems' .sql files, obtaining all the statements necessary to upgrade
            from currentModelVersion to the version that is being installed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.Configuration.ITwoUserDatabaseConfigurationManager.GetUpgradeVersion">
            <summary>
            This method will obtain the version that is being installed.
            </summary>
            <returns>The version number to upgrade.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.Configuration.ITwoUserDatabaseConfigurationManager.GetDatabaseScriptStatements(System.Version)">
            <summary>
            This method will obtain all the statements necessary to upgrade from currentModelVersion to the version that is being installed.
            This method will process a well known source file upgrade script.
            It will do some pre-processing based in internal plugin configurations.
            </summary>
            <param name="currentModelVersion">this parameter indicates the version from which we need to upgrade</param>
            <returns>Set of statements to execute. This includes tagged statements (--%TAG%)</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.Configuration.ITwoUserDatabaseConfigurationManager.GetDatabaseScriptStatements(System.Version,System.Collections.Generic.IEnumerable{OutSystems.HubEdition.DatabaseAbstractionLayer.Platform.Configuration.ScriptParser.IDatabaseScriptFile})">
            <summary>
            This method will obtain all the statements necessary to upgrade from currentModelVersion to the version that is being installed.
            This method will process a well known source file upgrade script.
            It will do some pre-processing based in internal plugin configurations.
            </summary>
            <param name="currentModelVersion">this parameter indicates the version from which we need to upgrade</param>
            <param name="databaseScriptFiles">this parameter indicates the database script files to process and get the statements from</param>
            <returns>Set of statements to execute. This includes tagged statements (--%TAG%)</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.Configuration.ITwoUserDatabaseConfigurationManager.RequiresElevatedPrivileges">
            <summary>
            Validates if elevated privileges are actually required
            If plugin has ImplementsElevatedPrivilegesOperations=false, this method should return false.
            This ensures pre create or upgrade logic can be ran by hand to avoid elevated privileges during setup 
            <returns>Elevated privileges operations still need to run for setup to be complete</returns>
            </summary>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.Configuration.ITwoUserDatabaseConfigurationManager.Pre_CreateOrUpgradePlatform">
            <summary>
            Allows the plugin to run instructions before the create/upgrade is done.
            This operation requires an elevated user privilege.
            If plugin has ImplementsElevatedPrivilegesOperations=false, this method should not be implemented. (the caller wouldn’t have a proper config to pass anyway)
            This would allow logic such as - create the database if it doesn’t exist.
            </summary>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.Configuration.ITwoUserDatabaseConfigurationManager.TestAdminConnection(System.String@,OutSystems.HubEdition.Extensibility.Data.Platform.Configuration.Source)">
            <summary>
            Validates that the configuration for the user ‘User’ are valid and it can reach the db.
            It will return false if it cannot reach the db, and will have a non null errorMessage in that case.
            </summary>
            <param name="source">Specifies the component that will use the configuration (e.g. service or application).</param>
            <param name="friendlyMessage">Message with information regarding the result of the test.</param>
            <returns>True if connection was successfully established</returns>.
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.Configuration.ITwoUserDatabaseConfigurationManager.TestRuntimeConnection(System.String@,OutSystems.HubEdition.Extensibility.Data.Platform.Configuration.Source)">
            <summary>
            Validates that the configuration for the user ‘User’ are valid and it can reach the db.
            It will return false if it cannot reach the db, and will have a non null errorMessage in that case.
            </summary>
            <param name="source">Specifies the component that will use the configuration (e.g. service or application).</param>
            <param name="friendlyMessage">Message with information regarding the result of the test.</param>
            <returns>True if connection was successfully established</returns>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.IPlatformDatabaseObjectFactory">
            <summary>
            Creates introspection objects from qualified names, inspecting the database only if needed.
            </summary>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.IPlatformDatabaseObjectFactory.CreateLocalTableSourceInfo(System.String)">
            <summary>
            Returns an object that contains information about a local table source (data source in tabular format), like a database table or view,
            inferring the database information from the current configuration
            </summary>
            <param name="tableName">Unqualified identifier of the table source</param>
            <returns>Database-specific object that implements the ITableSourceInfo interface</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.IPlatformDatabaseObjectFactory.CreateDataTypeInfo(OutSystems.HubEdition.Extensibility.Data.DBDataType,System.Int32,System.Int32)">
            <summary>
            Returns an object that contains information about a data type, inferring the correct <see cref="P:OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.IDataTypeInfo.SqlDataType"/> from the values
            of the other fields.
            </summary>
            <param name="dataType">Database type that can be mapped to the data types available in the platform</param>
            <param name="length">Size of the data type, when applicable (e.g. text of decimal numbers)</param>
            <param name="decimals">Number of decimal places of the data type, when applicable (e.g. decimal numbers)</param>
            <returns>Database-specific object that implements the IDataTypeInfo interface</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.IPlatformDatabaseObjectFactory.CreateColumnInfo(OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceInfo,System.String,OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.IPlatformDataTypeInfo,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns an object that contains information about a table source column.
            </summary>
            <param name="tableSource">Table source that owns the column.</param>
            <param name="name">Name that identifies the column.</param>
            <param name="dataType">Data type of the values stored in the column.</param>
            <param name="isMandatory">True if the column must have a value assigned to it (NOT NULL), or false if it is nullable.</param>
            <param name="isPrimaryKey">True if the column is part of the table source's primary key, or false otherwise.</param>
            <param name="isAutoGenerated">true if the column value is generated automatically when a row is inserted (e.g. sequential numbers).</param>
            <returns>Database-specific object that implements the ITableSourceColumnInfo interface</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.IPlatformDatabaseObjectFactory.CreateForeignKeyInfo(OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceInfo,System.String,System.String,OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceInfo,System.String,System.Boolean)">
            <summary>
            Returns an object that contains information about a table source foreign key.
            </summary>
            <param name="tableSource">Table source that owns the foreign key.</param>
            <param name="foreignKeyName">Name of the foreign key. If null, a generated name will be assigned.</param>
            <param name="columnName">Name of the column.</param>
            <param name="referencedTableSource">Table source that owns the referenced column.</param>
            <param name="referencedColumnName">Name of the referenced column.</param>
            <param name="isCascadeDelete">True if the delete rule of the foreign key is CASCADE DELETE.</param>
            <returns>Database-specific object that implements the ITableSourceForeignKeyInfo interface</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.IPlatformDatabaseObjectFactory.CreateIndexInfo(OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceInfo,System.String,System.Collections.Generic.IEnumerable{OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.IPlatformTableSourceColumnInfo},System.Collections.Generic.IEnumerable{OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceForeignKeyInfo},System.Boolean,System.Boolean)">
            <summary>
            Returns an object that contains information about a table source index.
            </summary>
            <param name="tableSource">Table source that owns the index.</param>
            <param name="indexName">Name of the index. If null, a generated name will be assigned.</param>
            <param name="columns">Columns used in the index.</param>
            <param name="foreignKeys">Foreign keys that use the indexed columns</param>
            <param name="isUnique">True if the index is a unique index, false otherwise.</param>
            <param name="isPrimaryKey">True if the index is a primary key index, false otherwise.</param>
            <returns>Database-specific object that implements the ITableSourceIndexInfo interface</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.IPlatformDatabaseObjectFactory.CreateTriggerInfo(OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceInfo)">
            <summary>
            Returns an object that contains information about a table source trigger.
            </summary>
            <param name="tableSource">Table source that owns the trigger.</param>
            <returns>Database-specific object that implements the ITableSourceTriggerInfo interface</returns>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.IPlatformDataTypeInfo">
            <summary>
            Contains information about a data type.
            </summary>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.IPlatformDataTypeInfo.IsEquivalent(OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.IDataTypeInfo)">
            <summary>
            Returns true if both objects represent an equivalent database data type.
            Note that this "equivalent database type" refers to the underlying database type;
            For TEXT and DECIMAL types, "equivalent database type" ALSO refers to the length(precision) of the field.
            This method is used, among other things, to determine if an ALTER COLUMN statement should be issued
            
            Example: TEXT(200) is not equivalent to TEXT(400)
                     TEXT(500) is not equivalent to TEXT(x, x>2000) - change of underlying (DB) DataType occurs here
                     TEXT(x, x>2000) is equivalent to TEXT(y, y>2000) - both lengths above MAX_VARCHAR_LENGTH cause underlying (DB) DataType to be the same
            </summary>
            <param name="other">Other datatype object to compare with</param>
            <returns>true if the current object is equivalent to the other parameter; otherwise, false.</returns>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.IPlatformTableSourceColumnInfo.DataType">
            <summary>
            Data type of the values stored in the column.
            </summary>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.IPlatformTableSourceEventTriggerInfo">
            <summary>
            Contains information about a table source trigger.
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.IPlatformTableSourceEventTriggerInfo.TableSource">
            <summary>
            Table source that owns the trigger.
            </summary>
            <value>
            The table source.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.IPlatformTableSourceEventTriggerInfo.Name">
            <summary>
            Name that identifies the trigger.
            </summary>
            <value>
            The name of the trigger.
            </value>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.IPlatformTableSourceIndexInfo">
            <summary>
            Contains information about a table source index.
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.IPlatformTableSourceIndexInfo.TableSource">
            <summary>
            Table source that owns the index.
            </summary>
            <value>
            The table source.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.IPlatformTableSourceIndexInfo.Name">
            <summary>
            Name that identifies the index.
            </summary>
            <value>
            The name of the index.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.IPlatformTableSourceIndexInfo.Columns">
            <summary>
            Columns used in the index.
            </summary>
            <value>
            The columns affected by the index.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.IPlatformTableSourceIndexInfo.IsUnique">
            <summary>
            Returns true if the index is a unique index, false otherwise.
            </summary>
            <value>
            True if this index is unique, False otherwise.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.IPlatformTableSourceIndexInfo.IsPrimaryKey">
            <summary>
            Returns true if the index is a primary key index, false otherwise.
            </summary>
            <value>
            True if this index is for primary key, False otherwise.
            </value>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.IPlatformTableSourceInfo">
            <summary>
            Contains detailed information about a table source (data source in tabular format), like a database table or view.
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.IPlatformTableSourceInfo.Columns">
            <summary>
            List of columns of the table source
            </summary>
            <value>
            The list of columns.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.IPlatformTableSourceInfo.ForeignKeys">
            <summary>
            List of foreign keys of the table source
            </summary>
            <value>
            The foreign keys.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.IPlatformTableSourceInfo.Indexes">
            <summary>
            List of indexes of the table source
            </summary>
            <value>
            The indexes.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.IPlatformTableSourceInfo.EventTrigger">
            <summary>
            Event trigger associated with the table source, if one exists. Otherwise, returns null;
            </summary>
            <value>
            The event trigger associated.
            </value>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.PlatformDatabaseObjectFactoryExtensions.GetNewUniqueIdentifer(OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.IDatabaseObjectFactory,OutSystems.HubEdition.Extensibility.Data.IDatabaseServices,System.String)">
            <summary>
            Returns a name that can be used as a valid object name (e.g. constraint), using <see cref="M:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLIdentifiers.GetValidIdentifier(System.String,System.Boolean)"/>
            </summary>
            <param name="objectFactory">The introspection object factory</param>
            <param name="databaseServices">The database services</param>
            <param name="baseName">An identifier name.</param>
            <returns>A string representing a valid sql identifier.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.PlatformDatabaseObjectFactoryExtensions.GetNewEventTriggerName(OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.IPlatformDatabaseObjectFactory,OutSystems.HubEdition.Extensibility.Data.IDatabaseServices,System.String)">
            <summary>
            Returns a name that can be used as an event trigger identifier name.
            </summary>
            <param name="objectFactory">The introspection object factory</param>
            <param name="databaseServices">The database services</param>
            <param name="tableName">Name of the table for which we want to create a trigger</param>
            <returns>A name that can be used as a sql identifier name</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.PlatformDatabaseObjectFactoryExtensions.GetNewIndexName(OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.IPlatformDatabaseObjectFactory,OutSystems.HubEdition.Extensibility.Data.IDatabaseServices,System.String,System.Collections.Generic.IEnumerable{OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.IPlatformTableSourceColumnInfo})">
            <summary>
            Returns a name that can be used as an index identifier name.
            </summary>
            <param name="objectFactory">The introspection object factory</param>
            <param name="databaseServices">The database services</param>
            <param name="tableName">Name of the table for which we want to create a trigger</param>
            <param name="columns">Columns that will compose the index</param>
            <returns>A name that can be used as a sql identifier name</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.PlatformDatabaseObjectFactoryExtensions.GetNewForeignKeyName(OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.IPlatformDatabaseObjectFactory,OutSystems.HubEdition.Extensibility.Data.IDatabaseServices,System.String,System.String,System.String)">
            <summary>
            Returns a name that can be used as a foreign key identifier name.
            </summary>
            <param name="objectFactory">The introspection object factory</param>
            <param name="databaseServices">The database services</param>
            <param name="tableName">Name of the table for which we want to create a foreign key</param>
            <param name="referencedTableName">Name of the referenced table</param>
            <param name="columnName">Name of the column</param>
            <returns>A name that can be used as a sql identifier name</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.PlatformDatabaseObjectFactoryExtensions.GetNewPrimaryKeyName(OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.IPlatformDatabaseObjectFactory,OutSystems.HubEdition.Extensibility.Data.IDatabaseServices,System.String)">
            <summary>
            Returns a name that can be used as a primary key identifier name.
            </summary>
            <param name="objectFactory">The introspection object factory</param>
            <param name="databaseServices">The database services</param>
            <param name="tableName">Name of the table for which we want to create a primary key</param>
            <returns>A name that can be used as a sql identifier name</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.PlatformDatabaseObjectFactoryExtensions.IsSystemTable(System.String)">
            <summary>
            Checks whether a table is a systems table or not.
            </summary>
            <param name="tableName">Table name to check</param>
            <returns>True if the table is a system table. Otherwise, false.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.PlatformDatabaseObjectFactoryExtensions.CreateForeignKeyInfo(OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.IPlatformDatabaseObjectFactory,OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceInfo,System.String,OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceInfo,System.String,System.Boolean)">
            <summary>
            Returns an object that contains information about a table source foreign key.
            </summary>
            <param name="objectFactory">The introspection object factory</param>
            <param name="tableSource">Table source that owns the foreign key.</param>
            <param name="columnName">Name of the column.</param>
            <param name="referencedTableSource">Table source that owns the referenced column.</param>
            <param name="referencedColumnName">Name of the referenced column.</param>
            <param name="isCascadeDelete">True if the delete rule of the foreign key is CASCADE DELETE.</param>
            <returns>Database-specific object that implements the ITableSourceForeignKeyInfo interface</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.PlatformDatabaseObjectFactoryExtensions.CreateIndexInfo(OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.IPlatformDatabaseObjectFactory,OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceInfo,System.Collections.Generic.IEnumerable{OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.IPlatformTableSourceColumnInfo},System.Collections.Generic.IEnumerable{OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceForeignKeyInfo},System.Boolean,System.Boolean)">
            <summary>
            Returns an object that contains information about a table source index.
            </summary>
            <param name="objectFactory">The introspection object factory</param>
            <param name="tableSource">Table source that owns the index.</param>
            <param name="columns">Columns used in the index.</param>
            <param name="foreignKeys">Foreign keys that use the indexed columns</param>
            <param name="isUnique">True if the index is a unique index, false otherwise.</param>
            <param name="isPrimaryKey">True if the index is a primary key index, false otherwise.</param>
            <returns>Database-specific object that implements the ITableSourceIndexInfo interface</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseProviderExtensions.GetProviderSpecificType``1(OutSystems.HubEdition.Extensibility.Data.IDatabaseProvider,System.Type[])">
            <summary>
            Creates an instance of a type that inherits from <typeparamref name="BaseType"/>, from a list of possible 
            Types (<paramref name="specificTypes"/>). Matching is performed using the attribute <see cref="T:OutSystems.HubEdition.Extensibility.Data.Platform.QueryProvider.DatabaseProviderSpecificImplementationFor"/>.
            </summary>
            <typeparam name="BaseType">Base type to return</typeparam>
            <param name="provider">Database provider used to filter the <paramref name="specificTypes"/></param>
            <param name="specificTypes">Specific types inherit from <typeparamref name="BaseType"/></param>
            <returns>An object that inherits from <typeparamref name="BaseType"/></returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseProviderExtensions.GetProviderSpecificOrBaseType``1(OutSystems.HubEdition.Extensibility.Data.IDatabaseProvider,System.Type[])">
            <summary>
            Creates an instance of a type that inherits from <typeparamref name="BaseType"/>, from a list of possible 
            Types (<paramref name="specificTypes"/>). If none is found, returns an instance of <typeparamref name="BaseType"/>.
            </summary>
            <typeparam name="BaseType">Base type to return</typeparam>
            <param name="provider">Database provider used to filter the <paramref name="specificTypes"/></param>
            <param name="specificTypes">Specific types that inherit from <typeparamref name="BaseType"/></param>
            <returns>An object that is or inherits from <typeparamref name="BaseType"/></returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DDLService.BaseDDLService.GetColumnDefinition(OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.IPlatformTableSourceColumnInfo,System.String)">
            <summary>
            This method returns the SQL for the column definition to be used inside the create table and create column statements. 
            This implementation returns "escapedColumnName columnSQLDataType DEFAULT defaultValue NOT NULL"
            </summary>
            <param name="column">The column information for the column to create.</param>
            <param name="defaultValue">The default value for the column to create.</param>
            <returns>SQL for the column definition.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DDLService.BaseDDLService.UseDefaultValue(OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.IPlatformTableSourceColumnInfo,System.String)">
            <summary>
            Returns true if we can use the default value passed as argument in the column definition.
            </summary>
            <param name="column">The column to use.</param>
            <param name="defaultValue">The default value for the column that we want to change to (tentatively).</param>
            <returns>True if we can use the default value, false otherwise.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DDLService.BaseDDLService.GetFinalMandatoryValue(OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.IPlatformTableSourceColumnInfo,System.String,System.Boolean)">
            <summary>
            Returns the final mandatory value to use for the column definition. This can change depending on the column, 
            and depending on the default value.
            </summary>
            <param name="column">The column information.</param>
            <param name="defaultValue">The default value for the column.</param>
            <param name="mandatory">The mandatory value that we want to change to (tentatively).</param>
            <returns>The final mandatory value that we want to change.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DDLService.BaseDDLService.GetPrimaryKeyTableConstraint(System.String,OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.IPlatformTableSourceColumnInfo)">
            <summary>
            This method returns the SQL for the primary key table constraint to be used inside the create table and create column statements.
            This implementation returns "CONSTRAINT escapedConstraintName PRIMARY KEY (escapedColumnNames)"
            </summary>
            <param name="constraintName">Name of the primary key constrain</param>
            <param name="column">The primary key column</param>
            <returns>SQL for the primary key table constraint.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DDLService.BaseDDLService.GetGeneratedPrimaryKeyConstraintNameForTable(OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceInfo)">
            <summary>
            This method returns the previously generated primary key constraint for a table.
            </summary>
            <param name="tableSource">Info about the table to which we want to return the previously generated primary key constraint name.</param>
            <returns>The primary key constraint name previously generated. Or a new valid name if none was previously generated</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DDLService.BaseDDLService.GetTenantFilterField(System.Collections.Generic.IEnumerable{OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.IPlatformTableSourceColumnInfo})">
            <summary>
            Returns the Tenant_Id column from the list of columns
            </summary>
            <param name="columns">columns to search for</param>
            <returns>The Tenant_Id column</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DDLService.BaseDDLService.GetNewPrimaryKeyName(System.String)">
            <summary>
            Returns a name that can be used as a primary key identifier name.
            </summary>
            <param name="tableName">Name of the table for which we want to create a primary key</param>
            <returns>A name that can be used as a SQL identifier name</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DDLService.BaseDDLService.FillEventTriggerQuery(System.Text.StringBuilder,OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.IPlatformTableSourceColumnInfo,System.Collections.Generic.IEnumerable{OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.IPlatformTableSourceColumnInfo},System.Collections.Generic.IEnumerable{OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceForeignKeyInfo},OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceInfo,OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceInfo,OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceInfo,System.String,System.Boolean,System.String)">
            <summary>
            This method generates the query that will be used in the event trigger. 
            This assumes that the underlying database has the NULLIF and COALESCE functions.
            </summary>
            <param name="sql">StringBuilder that will receive the query SQL.</param>
            <param name="triggerTablePrimaryKeyColumn">Primary key column of the table associated with the trigger.</param>
            <param name="triggerTableEventColumns">Columns of the table associated with the trigger that fire events.</param>
            <param name="triggerTableForeignKeys">Foreign keys of the table associated with the trigger.</param>
            <param name="eventTable">Table source that stores the events for the table associated with the trigger. This table resides in the same database as the table where the trigger is defined.</param>
            <param name="eventQueueTable">Table source that stores the events to be fired by the platform.</param>
            <param name="lightEventQueueTable">Table source that stores the light events to be fired by the platform.</param>
            <param name="triggerDataAccessor">SQL snippet to access the newly triggered data (new or updated line in trigger table).</param>
            <param name="needsTriggerDataAccessorInFrom">True if we need to include the <paramref name="triggerDataAccessor"/> in a from clause to access it in a query.</param>
            <param name="isUpdateVariableAccessor">SQL snippet to access the variable that is true if this trigger is an update.</param>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DDLService.BaseDDLService.CreateTable(OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceInfo,OutSystems.HubEdition.Extensibility.Data.Platform.DDLService.ColumnDetails[])">
            <summary>
            This method generates the SQL to create a new table.
            This implementation returns the statement "CREATE TABLE FullyQualifiedTableName (columnsDefinitionStatements, primaryKeyStatement)"
            </summary>
            <param name="newTable">Info about the table to create.</param>
            <param name="columns">The columns information for the table to create along with the default values. 
                Note that some of them may be primary keys, as indicated on the IsPrimaryKey property. 
                This will lead to the creation of Primary Key Constraints. 
                Also note that a column could be an autonumber column, there's no need to call the AlterColumnChangeAutoNumber after.</param>
            <returns>SQL statements to create the table.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DDLService.BaseDDLService.CreateIndex(OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.IPlatformTableSourceIndexInfo)">
            <summary>
            This method generates the SQL to create a new index.
            This implementation returns the statement "CREATE UNIQUE INDEX FullyQualifiedIndexName ON FullyQualifiedTableName (escapedColumnNames)"
            </summary>
            <param name="newIndex">Info about the index to create.</param>
            <returns>SQL statements to create the index.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DDLService.BaseDDLService.DropIndex(OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.IPlatformTableSourceIndexInfo)">
            <summary>
            This method generates the SQL to drop an index previously obtained through the IIntrospectionService API.
            This implementation returns "DROP INDEX FullyQualifiedIndexName"
            </summary>
            <param name="existingIndex">Info about the index to drop.</param>
            <returns>SQL statements to drop the index.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DDLService.BaseDDLService.CreateForeignKey(OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceForeignKeyInfo)">
            <summary>
            This method generates the SQL to create a new foreign key.
            This implementation returns
            ALTER TABLE FullyQualifiedTableName ADD CONSTRAINT escapedConstraintName FOREIGN KEY (escapedForeignKeyColumnNames) REFERENCES FullyQualifiedForeignTableName (escapedForeignColumnNames) ON DELETE CASCADE
            </summary>
            <param name="newForeignKey">Info about the foreign key to create.</param>
            <returns>SQL statements to create the foreign key.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DDLService.BaseDDLService.CreatePrimaryKey(OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceInfo,OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.IPlatformTableSourceColumnInfo)">
            <summary>
            This method generates the SQL to create a new primary key.
            This implementation returns "ALTER TABLE FullyQualifiedTableName ADD primaryKeyStatement"
            </summary>
            <param name="existingTable">Info about the table to create a new primary key. This info is obtained through the IIntrospectionServiceAPI</param>
            <param name="column">Info about the column that composes the primary key.</param>
            <returns>SQL statements to create the primary key.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DDLService.BaseDDLService.CreateColumn(OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.IPlatformTableSourceColumnInfo,System.String)">
            <summary>
            This method generates the SQL to create a new column.
            This implementation returns "ALTER TABLE FullyQualifiedTableName ADD columnsDefinitionStatement"
            and adds the SQL of the CreatePrimaryKey if the column is primary key.
            </summary>
            <param name="newColumn">Info about the column to create.</param>
            <param name="defaultValue">Column default value. It could be empty.</param>
            <returns>SQL statements to create the column.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DDLService.BaseDDLService.DropTable(OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceInfo)">
            <summary>
            This method generates the SQL to drop a table previously obtained through the IIntrospectionService API.
            This implementation always returns "DROP TABLE FullyQualifiedTableName"
            </summary>
            <param name="existingTable">Info about the table to drop.</param>
            <returns>SQL statements to drop the table.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DDLService.BaseDDLService.DropForeignKey(OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceForeignKeyInfo)">
            <summary>
            This method generates the SQL to drop a foreign key previously obtained through the IIntrospectionService API.
            This implementation returns "ALTER TABLE FullyQualifiedTableName DROP CONSTRAINT escapedConstraintName"
            </summary>
            <param name="existingForeignKey">Info about the foreign key to drop.</param>
            <returns>SQL statements to drop the foreign key.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DDLService.BaseDDLService.DropEventTrigger(OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.IPlatformTableSourceEventTriggerInfo)">
            <summary>
            This method generates the SQL to drop a trigger previously obtained through the IIntrospectionService API.
            This implementation returns "DROP TRIGGER FullyQualifiedTriggerName"
            </summary>
            <param name="existingTrigger">Info about the trigger to drop.</param>
            <returns>SQL statements to drop the trigger.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DDLService.BaseDDLService.DropColumn(OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.IPlatformTableSourceColumnInfo)">
            <summary>
            This method generates the SQL to drop a column previously obtained through the IIntrospectionService API.
            This implementation returns "ALTER TABLE FullyQualifiedTableName DROP COLUMN escapedColumnName"
            </summary>
            <param name="existingColumn">Info about the column to drop.</param>
            <returns>SQL statements to drop the column.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DDLService.BaseDDLService.GetColumnCannotBeChangedMessage(OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.IPlatformTableSourceColumnInfo,OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.IPlatformTableSourceColumnInfo,System.Boolean)">
            <summary>
            Generates a message stating that a given column (<paramref name="existingColumn"/>) cannot be changed to another type, defined by the <paramref name="newColumn"/>.
            </summary>
            <param name="existingColumn">Existing column to be changed</param>
            <param name="newColumn">New version of the column, based on the model</param>
            <param name="isExistingColumnImmutable">True if the existing column cannot be changed into any other type, False if some conversions are allowed</param>
            <returns>A user-friendly error message</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DDLService.BaseDDLService.GetColumnCannotBeChangedMessage(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Generates a message stating that a given column (<paramref name="columnName"/>) cannot be changed to another type (<paramref name="newColumnType"/>)
            </summary>
            <param name="tableName">Name of the existing table that owns the column</param>
            <param name="columnName">Name of the existing column to be changed</param>
            <param name="existingColumnDbType">Database type of the existing column (e.g. VARCHAR)</param>
            <param name="existingColumnType">Model type of the existing column (e.g. Text)</param>
            <param name="newColumnDbType">New database type for the column (e.g. VARCHAR)</param>
            <param name="newColumnType">New model type for the column</param>
            <param name="isExistingColumnImmutable">True if the existing column cannot be changed into any other type, False if some conversions are allowed</param>
            <returns>A user-friendly error message</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DDLService.BaseDDLService.CreateOrReplaceView(OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceInfo,System.String,System.Boolean)">
            <summary>
            This method generates the SQL to create a new view. If already exists a view with the same name it should be replaced by the new one.
            This implementation returns "CREATE OR REPLACE VIEW FullyQualifiedViewName AS viewSQL"
            </summary>
            <param name="newView">Info about the view we want to create.</param>
            <param name="viewSQL">SQL query that defines the view contents.</param>
            <param name="withCheckOption">true if the INSERT and UPDATE operations performed over the view should be constrained only to the rows referenced by the view</param>
            <returns>SQL statements to create the view.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DDLService.BaseDDLService.GrantPermissions(OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceInfo,System.String,OutSystems.HubEdition.Extensibility.Data.Platform.DDLService.Permissions)">
            <summary>
            This method generates the SQL to grant permissions on a table source to a user.
            This implementation returns "GRANT permissions ON FullyQualifiedTableName TO userName"
            </summary>
            <param name="existingTableSource">Info about the table or view which we want to grant permissions on.</param>
            <param name="username">User to grant permissions.</param>
            <param name="permissions">Permissions to grant to the user.</param>
            <returns>SQL statements to grant permissions.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DDLService.BaseDDLService.EnableTriggers(OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceInfo)">
            <summary>
            This method generates the SQL to enable all the triggers for an existing table source.
            This implementation returns "ALTER TABLE TableQualifiedName ENABLE ALL TRIGGERS"
            </summary>
            <param name="existingTableSource">Info about the table source which we want to enable the triggers.</param>
            <returns>SQL statements to enable the triggers.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DDLService.BaseDDLService.DisableTriggers(OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceInfo)">
            <summary>
            This method generates the SQL to disable all the triggers for an existing table source.
            This implementation returns "ALTER TABLE TableQualifiedName DISABLE ALL TRIGGERS"
            </summary>
            <param name="existingTableSource">Info about the table source which we want to disable the triggers.</param>
            <returns>SQL statements to disable the triggers.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DDLService.BaseDDLService.EnableAutoNumber(OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceInfo)">
            <summary>
            This method generates the SQL to enable the auto-number behavior for an existing table source.
            This implementation returns an empty statement.
            </summary>
            <param name="existingTableSource">Info about the table source which we want to enable the auto-number.</param>
            <returns>SQL statements to enable the auto-number.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DDLService.BaseDDLService.DisableAutoNumber(OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceInfo)">
            <summary>
            This method generates the SQL to disable the auto-number behavior for an existing table source.
            This implementation returns an empty statement.
            </summary>
            <param name="existingTableSource">Info about the table source which we want to disable the auto-number.</param>
            <returns>SQL statements to disable the auto-number.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DDLService.IDDLService.CanAlterColumn(OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.IPlatformTableSourceColumnInfo,OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.IPlatformTableSourceColumnInfo,System.String@)">
            <summary>
            Returns true if the <paramref name="existingColumn"/> can be converted in the database,
            (via one of the AlterColumn* operations) to become equivalent to the <paramref name="newColumn"/>.
            If the column cannot be converted, an <paramref name="errorMessage"/> is also returned.
            </summary>
            <param name="existingColumn">Existing column, inspected from the database model</param>
            <param name="newColumn">New column, inspected from the application model</param>
            <param name="errorMessage">Reason</param>
            <returns>True if an alter column operation can be performed, false otherwise</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DDLService.IDDLService.CanCreateColumn(OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.IPlatformTableSourceColumnInfo,System.String@)">
            <summary>
            Returns true if the <paramref name="newColumn"/> can be created in the database,
            If the column cannot be created, an <paramref name="errorMessage"/> is also returned.
            </summary>
            <param name="newColumn">New column, inspected from the application model</param>
            <param name="errorMessage">Reason</param>
            <returns>True if a create column operation can be performed, false otherwise</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DDLService.IDDLService.CanCreateTable(OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceInfo,OutSystems.HubEdition.Extensibility.Data.Platform.DDLService.ColumnDetails[],System.String@)">
            <summary>
            Returns true if the <paramref name="newTable"/> can be created in the database,
            If the table cannot be created, an <paramref name="errorMessage"/> is also returned.
            </summary>
            <param name="newTable">New table, inspected from the application model</param>
            <param name="columns">Columns, inspected from the application model</param>
            <param name="errorMessage">Reason</param>
            <returns>True if a create table operation can be performed, false otherwise</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DDLService.IDDLService.CreateTable(OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceInfo,OutSystems.HubEdition.Extensibility.Data.Platform.DDLService.ColumnDetails[])">
            <summary>
            This method generates the SQL to create a new table.
            </summary>
            <param name="newTable">Info about the table to create.</param>
            <param name="columns">The columns information for the table to create along with the default values. 
                Note that some of them may be primary keys, as indicated on the IsPrimaryKey property. 
                This will lead to the creation of Primary Key Constraints. 
                Also note that a column could be an autonumber column, there's no need to call the AlterColumnChangeAutoNumber after.</param>
            <returns>SQL statements to create the table.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DDLService.IDDLService.DropTable(OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceInfo)">
            <summary>
            This method generates the SQL to drop a table previously obtained through the IIntrospectionService API.
            </summary>
            <param name="existingTable">Info about the table to drop.</param>
            <returns>SQL statements to drop the table.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DDLService.IDDLService.CreateIndex(OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.IPlatformTableSourceIndexInfo)">
            <summary>
            This method generates the SQL to create a new index.
            </summary>
            <param name="newIndex">Info about the index to create.</param>
            <returns>SQL statements to create the index.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DDLService.IDDLService.DropIndex(OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.IPlatformTableSourceIndexInfo)">
            <summary>
            This method generates the SQL to drop an index previously obtained through the IIntrospectionService API.
            </summary>
            <param name="existingIndex">Info about the index to drop.</param>
            <returns>SQL statements to drop the index.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DDLService.IDDLService.CreateForeignKey(OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceForeignKeyInfo)">
            <summary>
            This method generates the SQL to create a new foreign key.
            </summary>
            <param name="newForeignKey">Info about the foreign key to create.</param>
            <returns>SQL statements to create the foreign key.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DDLService.IDDLService.DropForeignKey(OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceForeignKeyInfo)">
            <summary>
            This method generates the SQL to drop a foreign key previously obtained through the IIntrospectionService API.
            </summary>
            <param name="existingForeignKey">Info about the foreign key to drop.</param>
            <returns>SQL statements to drop the foreign key.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DDLService.IDDLService.CreateEventTrigger(OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.IPlatformTableSourceEventTriggerInfo,OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.IPlatformTableSourceColumnInfo,System.Collections.Generic.IEnumerable{OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.IPlatformTableSourceColumnInfo},System.Collections.Generic.IEnumerable{OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceForeignKeyInfo},OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceInfo,OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceInfo,OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceInfo)">
            <summary>
            This method generates the SQL to create an after insert or update event trigger.
            For each affected row in the trigger table, it validates if it needs to fire an event by crossing the values in the 
            <paramref name="triggerTableEventColumns"/> with the contents of the table <paramref name="eventTable"/>.
            For each event that must be fired the trigger must insert an entry in the table <paramref name="eventQueueTable"/>.
            </summary>
            <param name="newTrigger">Info about the trigger to create.</param>
            <param name="triggerTablePrimaryKeyColumn">Primary key column of the table associated with the trigger.</param>
            <param name="triggerTableEventColumns">Columns of the table associated with the trigger that fire events.</param>
            <param name="triggerTableForeignKeys">Foreign keys of the table associated with the trigger.</param>
            <param name="eventTable">Table source that stores the events for the table associated with the trigger.</param>
            <param name="eventQueueTable">Table source that stores the events to be fired by the platform.</param>
            <param name="lightEventQueueTable">Table source that stores the light events to be fired by the platform.</param>
            <returns>SQL statements to create the event trigger.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DDLService.IDDLService.DropEventTrigger(OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.IPlatformTableSourceEventTriggerInfo)">
            <summary>
            This method generates the SQL to drop a trigger previously obtained through the IIntrospectionService API.
            </summary>
            <param name="existingTrigger">Info about the trigger to drop.</param>
            <returns>SQL statements to drop the trigger.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DDLService.IDDLService.CreateColumn(OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.IPlatformTableSourceColumnInfo,System.String)">
            <summary>
            This method generates the SQL to create a new column.
            </summary>
            <param name="newColumn">Info about the column to create.</param>
            <param name="defaultValue">Column default value. It could be empty.</param>
            <returns>SQL statements to create the column.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DDLService.IDDLService.DropColumn(OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.IPlatformTableSourceColumnInfo)">
            <summary>
            This method generates the SQL to drop a column previously obtained through the IIntrospectionService API.
            </summary>
            <param name="existingColumn">Info about the column to drop.</param>
            <returns>SQL statements to drop the column.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DDLService.IDDLService.AlterColumn(OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.IPlatformTableSourceColumnInfo,OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects.IPlatformTableSourceColumnInfo,System.String)">
            <summary>
            This method generates the SQL to change a column previously obtained through the IIntrospectionService API.
            </summary>
            <param name="existingColumn">Info about the column to change.</param>
            <param name="newColumn">New Info about the column.</param>        
            <param name="defaultValue">The new column default value. It could be null.</param>
            <returns>SQL statements to change the column.</returns> 
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.Platform.DDLService.IDDLService.ForeignKeyRequiresIndex">
            <summary>
            #RPD-2648 This method validates if the DB Foreign Keys require indexes 
            In MySQL Foreign Keys require an index for the column with the Foreign Key, we cannot drop the index without dropinng the foreign key first. 
            </summary>
            <returns>True when one needs to take that case into account, False otherwise</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DDLService.IDDLService.CreateOrReplaceView(OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceInfo,System.String,System.Boolean)">
            <summary>
            This method generates the SQL to create a new view. If already exists a view with the same name it should be replaced by the new one.
            </summary>
            <param name="newView">Info about the view we want to create.</param>
            <param name="viewSQL">SQL query that defines the view contents.</param>
            <param name="withCheckOption">true if the INSERT and UPDATE operations performed over the view should be constrained only to the rows referenced by the view</param>
            <returns>SQL statements to create the view.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DDLService.IDDLService.GrantPermissions(OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceInfo,System.String,OutSystems.HubEdition.Extensibility.Data.Platform.DDLService.Permissions)">
            <summary>
            This method generates the SQL to grant permissions on a table source to a user.
            </summary>
            <param name="existingTableSource">Info about the table or view which we want to grant permissions on.</param>
            <param name="username">User to grant permissions.</param>
            <param name="permissions">Permissions to grant to the user.</param>
            <returns>SQL statements to grant permissions.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DDLService.IDDLService.EnableTriggers(OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceInfo)">
            <summary>
            This method generates the SQL to enable all the triggers for an existing table source.
            </summary>
            <param name="existingTableSource">Info about the table source which we want to enable the triggers.</param>
            <returns>SQL statements to enable the triggers.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DDLService.IDDLService.DisableTriggers(OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceInfo)">
            <summary>
            This method generates the SQL to disable all the triggers for an existing table source.
            </summary>
            <param name="existingTableSource">Info about the table source which we want to disable the triggers.</param>
            <returns>SQL statements to disable the triggers.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DDLService.IDDLService.EnableAutoNumber(OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceInfo)">
            <summary>
            This method generates the SQL to enable the auto-number behavior for an existing table source.
            </summary>
            <param name="existingTableSource">Info about the table source which we want to enable the auto-number.</param>
            <returns>SQL statements to enable the auto-number.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DDLService.IDDLService.DisableAutoNumber(OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceInfo)">
            <summary>
            This method generates the SQL to disable the auto-number behavior for an existing table source.
            </summary>
            <param name="existingTableSource">Info about the table source which we want to disable the auto-number.</param>
            <returns>SQL statements to disable the auto-number.</returns>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.Platform.DDLService.Permissions">
            <summary>
            Set of permissions that can be granted.
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.Platform.DMLService.BasePlatformDMLProgrammaticSQL.DMLService">
            <summary>
            This property represents the associated <see cref="T:OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLService"/>.
            </summary>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DMLService.BasePlatformDMLProgrammaticSQL.BeginProgrammaticSQLBlock(OutSystems.HubEdition.Extensibility.Data.Platform.DMLService.VariableDetails[])">
            <summary>
            This method generates SQL that starts a programmatic SQL Block.
            </summary>
            <returns>SQL that starts a programmatic SQL Block.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DMLService.BasePlatformDMLProgrammaticSQL.EndProgrammaticSQLBlock">
            <summary>
            This method generates SQL that ends a programmatic SQL Block.
            This implementation returns "END;".
            </summary>
            <returns>SQL that ends a programmatic SQL Block.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DMLService.BasePlatformDMLProgrammaticSQL.ExecuteDDLInsideBlock(System.String)">
            <summary>
            This method generates the SQL to execute a DDL statement inside a block.
            This implementation simply returns the DDL statement terminated with ";".
            </summary>
            <param name="statement">The DDL statement to execute.</param>
            <returns>SQL statement to execute the given DDL statement.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DMLService.DMLServiceExtensions.EscapeAndQualifyIdentifierForLocalDatabase(OutSystems.HubEdition.Extensibility.Data.Platform.DMLService.IPlatformDMLIdentifiers,System.String)">
            <summary>
            Returns an escaped identifier representing an object (e.g. table or view) that is qualified using 
            the information provided by the <see cref="P:OutSystems.HubEdition.Extensibility.Data.IDatabaseServices.DatabaseConfiguration"/> associated with the <see cref="N:OutSystems.HubEdition.Extensibility.Data.Platform.DMLService"/>.
            NOTE: This method uses the <see cref="M:OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.IDatabaseObjectFactory.CreateLocalDatabaseInfo"/> for qualification.
            </summary>
            <param name="identifiers">IPlatformDMLIdentifiers to use for qualification</param>
            <param name="objectName">Name of the database object (e.g. table, view, stored procedure).</param>
            <returns>A string representing the escaped and qualified identifier.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DMLService.DMLServiceExtensions.SplitIntoChunks``1(OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLService,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Splits a collection into collections of 900 elements 
            </summary>
            <typeparam name="T">Type of the collection</typeparam>
            <param name="iDMLService"></param>
            <param name="coll">Collection to split</param>
            <returns></returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DMLService.DMLServiceExtensions.GenerateInStatement(OutSystems.HubEdition.Extensibility.Data.DMLService.IDMLService,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            This method takes a string collection split is into smaller groups of 900 elements 
            and generates a string with multiple IN clauses for the column
            </summary>
            <param name="iDMLService"></param>
            <param name="coll">The collection that will be used to generate the in statements</param>
            <param name="ColumnName">the column which will filtered by the collection</param>
            <returns></returns>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.Platform.DMLService.IPlatformDMLFunctions">
            <summary>
            Generates the SQL functions required by the applications to perform simple queries.
            </summary>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DMLService.IPlatformDMLFunctions.CheckRole(System.String,System.String)">
            <summary>
            Provides a DML expression that returns true when the given user has the specific role.
            </summary>
            <param name="RoleId">DML expression that evaluates to an integer role identifier</param>
            <param name="UserId">DML expression that evaluates to an integer user identifier</param>
            <returns>DML Expression of type Boolean</returns>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.Platform.DMLService.IPlatformDMLIdentifiers">
            <summary>
            This interface defines methods that help build DML Identifiers for columns, tables, and others.
            </summary>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DMLService.IPlatformDMLIdentifiers.EscapeAndQualifyIdentifier(OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.IDatabaseInfo,System.String)">
            <summary>
            Returns an escaped identifier representing an object (e.g. table or view) that is qualified using 
            the information provided by the <see cref="P:OutSystems.HubEdition.Extensibility.Data.IDatabaseServices.DatabaseConfiguration"/> associated with the <see cref="N:OutSystems.HubEdition.Extensibility.Data.Platform.DMLService"/>.        
            </summary>
            <param name="database">DatabaseInfo used for qualification</param>
            <param name="objectName">Name of the database object (e.g. table, view, stored procedure).</param>
            <returns>The escaped and qualified identifier</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DMLService.IPlatformDMLIdentifiers.UnescapeIdentifier(System.String)">
            <summary>
            Returns the given identifier in its unescaped (unquoted form). If the identifier is not escaped returns the identifier as is.
            </summary>
            <param name="objectName">The identifier to unescape</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="objectName"/>is null.</exception>
            <returns>The unescaped identifier</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DMLService.IPlatformDMLIdentifiers.IsValidColumnName(System.String)">
            <summary>
            Checks if the specified column name is valid.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns>True if the column name is valid, false otherwise</returns>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.Platform.DMLService.IPlatformDMLProgrammaticSQL">
            <summary>
            Defines a contract for generating Programmatic SQL fragments to interact with a database.
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.Platform.DMLService.IPlatformDMLProgrammaticSQL.DMLService">
            <summary>
            Gets the associated DML service.
            </summary>
            <value>
            The DML service associated.
            </value>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DMLService.IPlatformDMLProgrammaticSQL.IfElseStatement(System.String,System.String,System.String)">
            <summary>
            This method generates SQL that represents the if else statement.
            </summary>
            <param name="condition">Condition to test.</param>
            <param name="ifBody">SQL to execute if the condition is true.</param>
            <param name="elseBody">SQL to execute if the condition is false. This can be null if there is no else body.</param>
            <returns>SQL that represents the if else statement.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DMLService.IPlatformDMLProgrammaticSQL.GetVariableValue(System.String)">
            <summary>
            This method generates a valid variable name based on the given name.
            </summary>
            <param name="varName">Name of the variable.</param>
            <returns>SQL that represents the name of the variable.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DMLService.IPlatformDMLProgrammaticSQL.SetVariable(System.String,System.String)">
            <summary>
            This method generates SQL that sets a variable value.
            </summary>
            <param name="varName">Name of the variable.</param>
            <param name="value">Value to assign to the variable.</param>
            <returns>SQL that sets the variable value.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DMLService.IPlatformDMLProgrammaticSQL.SetVariableFromQuery(System.String)">
            <summary>
            This method generates SQL fragments to insert in specific points of the query to set the variable value with the output of a query.
            </summary>
            <param name="varName">Name of the variable to assign the value.</param>
            <returns>SQL fragments to insert in specific points of the query to set the variable value.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DMLService.IPlatformDMLProgrammaticSQL.SetVariableFromLastInsertedId(System.String)">
            <summary>
            This method generates SQL that sets a variable value with the last identifier inserted in the current scope.
            </summary>
            <param name="varName">Name of the variable to assign the value.</param>
            <returns>SQL that sets the variable value.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DMLService.IPlatformDMLProgrammaticSQL.BuildQueryWithPagination(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            This method wraps the specified query with SQL code for pagination. The specified query must end with Order By clause
            </summary>
            <param name="query"> SQL query </param>
            <param name="size"> number of the elements to return </param>
            <param name="offset"> index of first element to return </param>
            <returns>SQL with pagination.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DMLService.IPlatformDMLProgrammaticSQL.BeginProgrammaticSQLBlock(OutSystems.HubEdition.Extensibility.Data.Platform.DMLService.VariableDetails[])">
            <summary>
            This method generates SQL that starts a programmatic SQL Block and optionally declares variables to use inside the block.
            </summary>
            <param name="variables">Names and types of the variables.</param>        
            <returns>SQL that starts a programmatic SQL Block and declares variables.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DMLService.IPlatformDMLProgrammaticSQL.EndProgrammaticSQLBlock">
            <summary>
            This method generates SQL that ends a programmatic SQL Block.
            </summary>
            <returns>SQL that ends a programmatic SQL Block.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.DMLService.IPlatformDMLProgrammaticSQL.ExecuteDDLInsideBlock(System.String)">
            <summary>
            This method generates the SQL to execute a DDL statement inside a block.
            </summary>
            <param name="statement">The DDL statement to execute.</param>
            <returns>SQL statement to execute the given DDL statement.</returns>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.Platform.DMLService.IPlatformDMLService">
            <summary>
            Defines a contract for generating SQL fragments to interact with a database.
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.Platform.DMLService.IPlatformDMLService.Identifiers">
            <summary>
            Gets an object that generates and manipulates SQL identifiers.
            </summary>
            <value>
            An object that generates and manipulates SQL identifiers.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.Platform.DMLService.IPlatformDMLService.Functions">
            <summary>
            Gets an object that generates the SQL functions required to execute simple queries.
            </summary>
            <value>
            An object that generates the SQL functions required to execute simple queries
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.Platform.DMLService.IPlatformDMLService.ProgrammaticSql">
            <summary>
            Gets an object that generates Programmatic SQL fragments to interact with a database.
            </summary>
            <value>
            An object that generates Programmatic SQL fragments to interact with a database.
            </value>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.Platform.DMLService.QueryPlaceholder">
            <summary>
            Represents the possible placeholders to use in the PlatformDMLService.SetVariableFromQuery method.
            <code><para>{BeforeStatement} SELECT {AfterSelectKeyword} column, ..., column</para>
            <para>{BeforeFromKeyword} FROM Entity</para>
            <para>WHERE conditions</para>
            <para>{AfterStatement}</para></code>
            </summary>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.Platform.ExecutionService.IPlatformExecutionService">
            <summary>
            Platform Database service that handles the execution of statements made while connected to a database.
            </summary>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.ExecutionService.IPlatformExecutionService.ExecuteStoredProcedureWithResultSet(System.Data.IDbCommand,System.String)">
            <summary>
            Executes a stored procedure using a command.
            That store procedure should return a cursor.
            </summary>
            <param name="cmd">The stored procedure command.</param>
            <param name="readerParamName">Name of the output parameter, without the prefix, to associate the reader with, if the procedure returns one (e.g. a cursor)</param>
            <returns>A reader with the results of the stored procedure.</returns>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.Platform.IntrospectionService.IPlatformIntrospectionService">
            <summary>
            Inspects a database server to retrieve information about its data model.
            </summary>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.IntrospectionService.IPlatformIntrospectionService.GetTablesSize(OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceInfo[])">
            <summary>
            Returns information about the size of database tables
            </summary>
            <param name="tables">Table sources from which we want to fetch size information</param>
            <returns>Table sources information along with the information about its size</returns>
            <exception cref="T:System.Data.Common.DbException">if an error occurs while accessing the database</exception>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.IntrospectionService.IPlatformIntrospectionService.GetTableIndexes(OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceInfo[])">
            <summary>
            Returns detailed information about database table sources indexes
            </summary>
            <param name="tables">Table sources from which we want to fetch index information</param>
            <returns>Table sources information along with the information about its indexes</returns>
            <exception cref="T:System.Data.Common.DbException">if an error occurs while accessing the database</exception>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.IntrospectionService.IPlatformIntrospectionService.GetTableSourcesDetails(OutSystems.HubEdition.Extensibility.Data.DatabaseObjects.ITableSourceInfo[])">
            <summary>
            Returns detailed information about database table sources (e.g. foreign keys, indexes)
            </summary>
            <param name="tables">Table sources from which we want to fetch the details</param>
            <returns>Table sources information along with the details</returns>
            <exception cref="T:System.Data.Common.DbException">if an error occurs while accessing the database</exception>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.IntrospectionService.IPlatformIntrospectionService.CheckTableSourcesExist(System.String[])">
            <summary>
            Checks if the table sources exist in the database.
            </summary>
            <param name="tableSourcesNames">Table sources names which we want to check</param>
            <returns>Table sources names along with a boolean value indicating if the table source exists or not in the database</returns>
            <exception cref="T:System.Data.Common.DbException">if an error occurs while accessing the database</exception>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.IntrospectionService.IPlatformIntrospectionService.GetDatabaseObjectsDefinitionHash(System.String)">
            <summary>
            Returns an aggregated hash code of the definition of all database schema meta-model elements that are related to a particular application's entity model definition (user tables, views, indexes and triggers). This method is to be used as a "fast" mechanism for detecting if the schema definition of 2 versions of the database are distinct, while avoiding the need to carry out a full introspection.
            </summary>
            <param name="objectNameFilter">A string present in the names of all (user-level) database schema elements that are associated to a particular application. This sequence of characters is subsequently used to filter schema elements that do not belong to the target application.</param>
            <returns>The aggregated hash code of database schema elements associated to a particular target application, as indicated by the input parameter.</returns>
            <exception cref="T:System.Data.Common.DbException">if an error occurs while accessing the database</exception>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.Platform.IPlatformDatabaseProvider">
            <summary>
            Represents an instance that allows full usage of the database.
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.Platform.IPlatformDatabaseProvider.Properties">
            <summary>
            Gets the <see cref="T:OutSystems.HubEdition.Extensibility.Data.Platform.IPlatformProviderProperties"/> instance associated with this database provider.
            </summary>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.IPlatformDatabaseProvider.CreateEmptyRuntimeDatabaseConfiguration">
            <summary>
            Creates a new Empty <code>IRuntimeDatabaseConfiguration.</code>
            </summary>
            <returns>An empty runtime database configuration.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.IPlatformDatabaseProvider.CreateEmptyPlatformDatabaseConfiguration">
            <summary>
            Creates a new Empty <code>IPlatformDatabaseConfiguration</code>
            </summary>
            <returns>An empty platform database configuration.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.IPlatformDatabaseProvider.CreateEmptyLoggingDatabaseConfiguration">
            <summary>
            Creates a new Empty <code>ILoggingDatabaseConfiguration</code>
            </summary>
            <returns>An empty logging database configuration.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.IPlatformDatabaseProvider.CreateEmptyBusinessDatabaseConfiguration">
            <summary>
            Creates a new Empty <code>IDatabaseConfiguration</code>
            </summary>
            <returns>An empty database configuration.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.IPlatformDatabaseProvider.CreateEmptySessionDatabaseConfiguration">
            <summary>
            Creates a new Empty <code>ISessionDatabaseConfiguration</code>
            </summary>
            <returns>An empty session database configuration.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.IPlatformDatabaseProvider.CreateEmptyIsolatedDatabaseConfiguration">
            <summary>
            Creates a new Empty <code>ITwoUserDatabaseConfiguration</code> for isolated databases
            </summary>
            <returns>An empty database configuration.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.IPlatformDatabaseProvider.GetLoggingConfigurationManager(OutSystems.HubEdition.Extensibility.Data.Platform.Configuration.ISettableTwoUserDatabaseConfiguration)">
            <summary>
            Creates a new LoggingDatabaseConfigurationManager <code>ITwoUserDatabaseConfigurationManager</code>
            </summary>
            <param name="uiConfiguration">The UI configuration.</param>
            <returns>A configuration manager.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.IPlatformDatabaseProvider.GetPlatformConfigurationManager(OutSystems.HubEdition.Extensibility.Data.Platform.Configuration.IPlatformDatabaseConfiguration)">
            <summary>
            Creates a new PlatformConfigurationManager <code>IPlatformConfigurationManager</code>
            </summary>
            <param name="uiConfiguration">The UI configuration.</param>
            <returns>A configuration manager.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.IPlatformDatabaseProvider.GetSessionConfigurationManager(OutSystems.HubEdition.Extensibility.Data.Platform.Configuration.ISessionDatabaseConfiguration,OutSystems.HubEdition.Extensibility.Data.Platform.Configuration.IPlatformDatabaseConfiguration)">
            <summary>
            Creates a new SessionConfigurationManager <code>ISessionConfigurationManager</code>
            </summary>
            <param name="uiConfiguration">The UI configuration.</param>
            <param name="platformConfiguration">The Platform configuration.</param>
            <returns>A configuration manager.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.IPlatformDatabaseProvider.GetIsolatedDatabaseConfigurationManager(OutSystems.HubEdition.Extensibility.Data.Platform.Configuration.ITwoUserDatabaseConfiguration)">
            <summary>
            Returns an instance of <code>ITwoUserDatabaseConfigurationManager</code>
            </summary>
            <returns>An isolated configuration manager</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.IPlatformDatabaseProvider.GetPlatformDatabaseServices(OutSystems.HubEdition.Extensibility.Data.ConfigurationService.IRuntimeDatabaseConfiguration)">
            <summary>
            Returns an instance of <code>IPlatformDatabaseServices</code> that uses the supplied configuration to access the database.
            </summary>
            <param name="databaseConfiguration">The database configuration.</param>
            <returns>A platform database configuration.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.IPlatformDatabaseProvider.CreateDatabaseScriptParser(OutSystems.HubEdition.Extensibility.Data.ConfigurationService.IRuntimeDatabaseConfiguration,OutSystems.HubEdition.Extensibility.Data.ConfigurationService.IRuntimeDatabaseConfiguration)">
            <summary>
            Returns an instance of <code>DatabaseScriptParser</code> that can be used to parse an handed coded script for the provided database flavor
            </summary>
            <param name="adminConfiguration">A runtime configuration for admin user.</param>
            <param name="runtimeConfiguration">A runtime configuration for runtime user.</param>
            <returns>A parser that can be used to parse an handcoded script.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.IPlatformDatabaseProvider.IsSameDatabase(OutSystems.HubEdition.Extensibility.Data.ConfigurationService.IRuntimeDatabaseConfiguration,OutSystems.HubEdition.Extensibility.Data.ConfigurationService.IRuntimeDatabaseConfiguration)">
            <summary>
            Check whether two database configurations share the same database. Both configurations must share the same specific type with current plugin.
            </summary>
            <param name="config">A runtime configuration.</param>
            <param name="otherConfig">Another runtime configuration..</param>
            <returns><c>true</c> if both configs have the same database, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.Platform.IPlatformDatabaseServices">
            <summary>
            Represents the set of services that added with the ones specified in the <code>IDatabaseServices</code> object enable complete database usage.
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.Platform.IPlatformDatabaseServices.ObjectFactory">
            <summary>
            Returns a factory capable of creating platform introspection objects.
            </summary>
            <value>
            A factory capable of creating platform introspection objects.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.Platform.IPlatformDatabaseServices.IntrospectionService">
            <summary>
            Gets the <code>IPlatformIntrospectionService</code> associated with the platform database
            </summary>
            <value>
            The introspection service.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.Platform.IPlatformDatabaseServices.DMLService">
            <summary>
            Gets the <see cref="T:OutSystems.HubEdition.Extensibility.Data.Platform.DMLService.IPlatformDMLService" />object associated with the database.
            Represents a service that generates SQL statements.
            </summary>
            <value>
            The DML service.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.Platform.IPlatformDatabaseServices.ExecutionService">
            <summary>
            Gets the <code>IPlatformExecutionService</code> associated with the platform database
            </summary>
            <value>
            The execution service.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.Platform.IPlatformDatabaseServices.DDLService">
            <summary>
            Gets the <code>IDDLService</code> associated with the platform database
            </summary>
            <value>
            The DDL service.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.Platform.IPlatformDatabaseServices.SessionService">
            <summary>
            Gets the <code>IPlatformSessionService</code> associated with the platform database
            </summary>
            <value>
            The session service.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.Platform.IPlatformDatabaseServices.IntegrationDatabaseConfiguration">
            <summary>
            Gets the object that compacts all the needed configuration parameters to be used for integration purposes.
            </summary>
            <value>
            The integration database configuration.
            </value>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.Platform.IPlatformProviderProperties">
            <summary>
            Represents a set of properties that are specific to a platform database provider.
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.Platform.IPlatformProviderProperties.SupportsMultipleDatabases">
            <summary>
            Returns true if the Multiple Database feature is supported for this provider.
            </summary>
            <value>
            True if Multiple Database feature is supported, False otherwise.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.Platform.IPlatformProviderProperties.SupportsIterationMultiplicitySingleOptimization">
            <summary>
            Returns true if Aggregates/SQL can have their Iteration Multiplicity optimized.<para/>
            Setting this as FALSE is the safest way of working around Database Drivers/Engines that do not support Multiple Active Result Sets.
            </summary>
            <value>
            True if Aggregates/SQL can have their Iteration Multiplicity optimized to IterationMultiplicity.Single (e.g. Lazy Loaded), False if it needs to be forced as IterationMultiplicity.Multiple (e.g. Eager Loaded).
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.Platform.IPlatformAdditionalSettings.NoValidateFK">
            <summary>
            In some Database stacks, adding a Foreign Key (DDL) adds an exclusive lock on both the parent and child tables.
            Some database stacks support a "No validation" mode for the Foreign key creation which avoids the exclusive lock.
            When this is True, the "No validation" mode should be used in the FK ddl generation.
            By default this is False to maintain retrocompatibility with previous versions of the Platform.
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.Platform.QueryProvider.BaseQueryProvider`1.Instance">
            <summary>
            Returns an instance of a <typeparamref name="QueryProviderType" /> that can be used
            to execute platform queries against a specific <see cref="T:OutSystems.HubEdition.Extensibility.Data.IDatabaseProvider" />
            </summary>
            <value>
            The instance to execute the queries.
            </value>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.QueryProvider.BaseQueryProvider`1.GetInstance">
            <summary>
            Returns always a new instance of a <typeparamref name="QueryProviderType" /> that can be used
            to execute platform queries against a specific <see cref="T:OutSystems.HubEdition.Extensibility.Data.IDatabaseProvider" />
            Internal use only
            </summary>
            <value>
            The instance to execute the queries.
            </value>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.QueryProvider.BaseQueryProvider`1.OverrideInstance(`0)">
            <summary>
            Used to override the singleton (<see cref="P:OutSystems.HubEdition.Extensibility.Data.Platform.QueryProvider.BaseQueryProvider`1.Instance"/>), for mocking purposes
            </summary>
            <param name="newInstance">instance of <typeparamref name="QueryProviderType"/>, or null to use the original singleton</param>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.Platform.QueryProvider.DatabaseProviderSpecificImplementationFor">
            <summary>
            Indicates that the annotated method should not be discovered for automatic sql syntax tests
            </summary>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.Platform.QueryProvider.TestSyntaxValues">
            <summary>
            Maps a set of test values to the parameters of a method when calling it in automatic tests
            </summary>
        </member>
        <member name="F:OutSystems.HubEdition.Extensibility.Data.Platform.QueryProvider.TestSyntaxValues.AUTO">
            <summary>
            Use this constant in the <see cref="P:OutSystems.HubEdition.Extensibility.Data.Platform.QueryProvider.TestSyntaxValues.Values"/> to automatically generate the value for the given parameter
            </summary>
        </member>
        <member name="F:OutSystems.HubEdition.Extensibility.Data.Platform.QueryProvider.TestSyntaxValues.NULL">
            <summary>
            Use this constant in the <see cref="P:OutSystems.HubEdition.Extensibility.Data.Platform.QueryProvider.TestSyntaxValues.Values"/> to use a null value for the given parameter
            </summary>
        </member>
        <member name="F:OutSystems.HubEdition.Extensibility.Data.Platform.QueryProvider.TestSyntaxValues.ENTITY_IDENTIFIER_FOR">
            <summary>
            Use this constant in the <see cref="P:OutSystems.HubEdition.Extensibility.Data.Platform.QueryProvider.TestSyntaxValues.Values"/> to automatically fetch a valid entity identifier (column "ID") for a given entity. Example: ENTITYIDENTIFIER_FOR + "OSSYS_ESPACE"
            </summary>
        </member>
        <member name="F:OutSystems.HubEdition.Extensibility.Data.Platform.QueryProvider.TestSyntaxValues.NEW_OBJECT_FROM_STRING">
            <summary>
            Use this constant in the <see cref="P:OutSystems.HubEdition.Extensibility.Data.Platform.QueryProvider.TestSyntaxValues.Values"/> to automatically create an object of a custom type that has a constructor which takes a string as input. Example: NEW_OBJECT_FROM_STRING + "1.2.3"
            </summary>
        </member>
        <member name="F:OutSystems.HubEdition.Extensibility.Data.Platform.QueryProvider.TestSyntaxValues.NEW_OBJECT_FROM_JSON">
            <summary>
            Use this constant in the <see cref="P:OutSystems.HubEdition.Extensibility.Data.Platform.QueryProvider.TestSyntaxValues.Values"/> to automatically create an object of a custom type that can be deserialized from JSON. Example: NEW_OBJECT_FROM_JSON + "{"Id":"lol", "Name":"crap"}"
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.Platform.QueryProvider.TestSyntaxValues.Values">
            <summary>
            Values to map to the method's parameters, using the order defined in the method signature. If the method
            has more parameters than the number of provider values, the remaining values are auto-generated.
            NOTE: use <see cref="F:OutSystems.HubEdition.Extensibility.Data.Platform.QueryProvider.TestSyntaxValues.AUTO"/> to indicate that the respective parameter should auto-generated
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.Platform.QueryProvider.TestSyntaxValues.Values2">
            <summary>
            Similar to <see cref="P:OutSystems.HubEdition.Extensibility.Data.Platform.QueryProvider.TestSyntaxValues.Values"/>, used to test additional sets of values
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.Platform.QueryProvider.TestSyntaxValues.Values3">
            <summary>
            Similar to <see cref="P:OutSystems.HubEdition.Extensibility.Data.Platform.QueryProvider.TestSyntaxValues.Values"/>, used to test additional sets of values
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.Platform.QueryProvider.TestSyntaxValues.Values4">
            <summary>
            Similar to <see cref="P:OutSystems.HubEdition.Extensibility.Data.Platform.QueryProvider.TestSyntaxValues.Values"/>, used to test additional sets of values
            </summary>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.Platform.QueryProvider.DoNotTestSyntax">
            <summary>
            Indicates that the annotated method should not be discovered for automatic sql syntax tests
            </summary>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.Session.InMemoryPlatformSessionService.CheckSessionModel">
            <summary>
            Checks if the InMemory provider is working. 
            Returns always true. Override this method to implement appropriate check.
            </summary>
            <returns></returns>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.Platform.Session.ISessionStoreOperations">
            <summary>
            Specify methods related to the storage of sessions information.
            </summary>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.Session.ISessionStoreOperations.ReleaseLock(System.String,System.Int32)">
            <summary>
            Releases the lock from the given session.
            </summary>
            <param name="sessionId">The session identifier.</param>
            <param name="lockId">The lock identifier.</param>
            <exception cref="T:OutSystems.HubEdition.Extensibility.Data.Platform.Session.SessionStoreException">
            Thrown when it's not possible to complete the operation.
            </exception>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.Session.ISessionStoreOperations.Get(System.String,System.Int32@,System.Boolean@,System.TimeSpan@,OutSystems.HubEdition.Extensibility.Data.Platform.Session.ItemState@)">
            <summary>
            Gets the session with the specified session's ID.
            This method don't lock the required session.
            </summary>
            <param name="sessionId">The session identifier.</param>
            <param name="lockId">The lock identifier.</param>
            <param name="locked">True, if the required session is locked. False, otherwise.</param>
            <param name="lockAge">How long is the session locked.</param>
            <param name="state">The state.</param>
            <returns>The requested session data stored.</returns>
            <exception cref="T:OutSystems.HubEdition.Extensibility.Data.Platform.Session.SessionStoreException">
            Thrown when it's not possible to complete the operation.
            </exception>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.Session.ISessionStoreOperations.GetAndLock(System.String,System.Int32@,System.Boolean@,System.TimeSpan@,OutSystems.HubEdition.Extensibility.Data.Platform.Session.ItemState@)">
            <summary>
            Gets the session with the specified session's ID and lock it.
            </summary>
            <param name="sessionId">The session identifier.</param>
            <param name="lockId">The lock identifier.</param>
            <param name="locked">True, if the required session is locked. False, otherwise.</param>
            <param name="lockAge">How long is the session locked.</param>
            <param name="state">The state.</param>
            <returns>The requested session data stored.</returns>
            <exception cref="T:OutSystems.HubEdition.Extensibility.Data.Platform.Session.SessionStoreException">
            Thrown when it's not possible to complete the operation.
            </exception>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.Session.ISessionStoreOperations.Insert(System.String,System.Byte[],System.TimeSpan)">
            <summary>
            Inserts the specified session and it's data. The timeout for the inserted is also stored.
            </summary>
            <param name="sessionId">The session identifier.</param>
            <param name="data">The session's data.</param>
            <param name="timeout">The session's expiration timeout.</param>
            <exception cref="T:OutSystems.HubEdition.Extensibility.Data.Platform.Session.RepeatedInsertException">
            Thrown when we try to insert a session when a session with the same sessionId already exists.
            </exception>
            <exception cref="T:OutSystems.HubEdition.Extensibility.Data.Platform.Session.SessionStoreException">
            Thrown when it's not possible to complete the operation.
            </exception>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.Session.ISessionStoreOperations.InsertUninitialized(System.String,System.Byte[],System.TimeSpan)">
            <summary>
            Inserts an uninitialized session with the given identifier.
            </summary>
            <param name="sessionId">The session identifier.</param>
            <param name="data">The session's data.</param>
            <param name="timeout">The session's expiration timeout.</param>
            <exception cref="T:OutSystems.HubEdition.Extensibility.Data.Platform.Session.RepeatedInsertException">
            Thrown when we try to insert a session when a session with the same sessionId already exists.
            </exception>
            <exception cref="T:OutSystems.HubEdition.Extensibility.Data.Platform.Session.SessionStoreException">
            Thrown when it's not possible to complete the operation.
            </exception>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.Session.ISessionStoreOperations.Update(System.String,System.Int32,System.Byte[],System.Int32,System.TimeSpan)">
            <summary>
            Updates the specified session information that has the given identifier.
            </summary>
            <param name="sessionId">The session identifier.</param>
            <param name="lockId">The lock identifier.</param>
            <param name="data">The session's data.</param>
            <param name="prevDataSize">Size of the previous data.</param>
            <param name="timeout">The session's expiration timeout.</param>
            <exception cref="T:OutSystems.HubEdition.Extensibility.Data.Platform.Session.SessionStoreException">
            Thrown when it's not possible to complete the operation.
            </exception>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.Session.ISessionStoreOperations.Delete(System.String,System.Int32)">
            <summary>
            Deletes the specified session that has the given identifier.
            </summary>
            <param name="sessionId">The session identifier.</param>
            <param name="lockId">The lock identifier.</param>
            <exception cref="T:OutSystems.HubEdition.Extensibility.Data.Platform.Session.SessionStoreException">
            Thrown when it's not possible to complete the operation.
            </exception>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.Platform.Session.ISessionManagmentOperations">
            <summary>
            Specify methods to allow the management of existing sessions.
            </summary>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.Session.ISessionManagmentOperations.DeleteSession(System.String)">
            <summary>
            Deletes the session with the given identifier.
            </summary>
            <param name="sessionId">The session identifier.</param>
            <exception cref="T:OutSystems.HubEdition.Extensibility.Data.Platform.Session.SessionStoreException">
            Thrown when it's not possible to complete the operation.
            </exception>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.Session.ISessionManagmentOperations.DeleteExpiredSessions">
            <summary>
            Deletes Top "X" expired sessions also deleting related module sessions.
            "X" is set by ConfigurationTool
            </summary>
            <returns>Number of sessions eliminated.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.Session.ISessionManagmentOperations.DeleteExpiredSessionVars">
            <summary>
            Deletes Top "X" expired sessions also deleting related module sessions.
            "X" is set by ConfigurationTool
            </summary>
            <returns>Number of session vars eliminated.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.Session.ISessionManagmentOperations.ContainsExpiredSessionVarsNewMechanism">
            <summary>
            Checks if the stored procedure necessary to delete session variables exists.
            </summary>
            <returns>True if the stored procedure necessary to delete session variables exists, False otherwise.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.Session.ISessionManagmentOperations.ChangeSessionId(System.String,System.String)">
            <summary>
            Changes the session identifier.
            </summary>
            <param name="oldSessionId">The old session identifier.</param>
            <param name="newSessionId">The new session identifier.</param>
            <exception cref="T:OutSystems.HubEdition.Extensibility.Data.Platform.Session.SessionStoreException">
            Thrown when it's not possible to complete the operation.
            </exception>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.Session.ISessionManagmentOperations.ResetSessionTimeout(System.String,System.TimeSpan)">
            <summary>
            Resets the session timeout.
            </summary>
            <param name="sessionId">The session identifier.</param>
            <param name="newTimeout">The new timeout.</param>
            <exception cref="T:OutSystems.HubEdition.Extensibility.Data.Platform.Session.SessionStoreException">
            Thrown when it's not possible to complete the operation.
            </exception>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.Session.ISessionManagmentOperations.CheckSessionModel">
            <summary>
            Checks if the session state model is correctly created.
            </summary>
            <returns>True if the model is alright, false otherwise.</returns>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.Platform.Session.ISessionModuleStoreOperations">
            <summary>
            Specify methods related to the storage of sessions information associated to a module (application).
            </summary>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.Session.ISessionModuleStoreOperations.GetModuleItem(System.String,System.String)">
            <summary>
            Gets the data of a module's item identified by the given item's id and associated to the referred session.
            </summary>
            <param name="sessionId">The session identifier.</param>
            <param name="itemId">The item identifier.</param>
            <returns>The data stored for the given item in the requested session.</returns>
            <exception cref="T:OutSystems.HubEdition.Extensibility.Data.Platform.Session.SessionStoreException">
            Thrown when it's not possible to complete the operation.
            </exception>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.Session.ISessionModuleStoreOperations.InsertModuleItem(System.String,System.String,System.Byte[],System.Int32,System.String)">
            <summary>
            Inserts the data from a module's item identified by the given item's id and associate it to a session.
            </summary>
            <param name="sessionId">The session identifier.</param>
            <param name="itemId">The item identifier.</param>
            <param name="data">The data to be stored.</param>
            <param name="userId">The user identifier.</param>
            <param name="cookieId">The cookie identifier.</param>
            <exception cref="T:OutSystems.HubEdition.Extensibility.Data.Platform.Session.SessionStoreException">
            Thrown when it's not possible to complete the operation.
            </exception>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.Session.ISessionModuleStoreOperations.UpdateModuleItem(System.String,System.String,System.Byte[],System.Int32,System.String)">
            <summary>
            Updates the information stored about a module's item identified by the given item's id and associated to the referred session.
            </summary>
            <param name="sessionId">The session identifier.</param>
            <param name="itemId">The item identifier.</param>
            <param name="data">The data to be stored.</param>
            <param name="userId">The user identifier.</param>
            <param name="cookieId">The cookie identifier.</param>
            <exception cref="T:OutSystems.HubEdition.Extensibility.Data.Platform.Session.SessionStoreException">
            Thrown when it's not possible to complete the operation.
            </exception>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.Session.ISessionModuleStoreOperations.InsertModuleItemUser(System.String,System.String,System.Int32,System.String)">
            <summary>
            Store the association of a module's item identified by the given item's id to a user.
            The item's data isn't stored in this method.
            </summary>
            <param name="sessionId">The session identifier.</param>
            <param name="itemId">The item identifier.</param>
            <param name="userId">The user identifier.</param>
            <param name="cookieId">The cookie identifier.</param>
            <exception cref="T:OutSystems.HubEdition.Extensibility.Data.Platform.Session.SessionStoreException">
            Thrown when it's not possible to complete the operation.
            </exception>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.Session.ISessionModuleStoreOperations.UpdateModuleItemUser(System.String,System.String,System.Int32,System.String)">
            <summary>
            Updates the association related to a module's item identified by the given item's id.
            The item's data isn't changed in this method.
            </summary>
            <param name="sessionId">The session identifier.</param>
            <param name="itemId">The item identifier.</param>
            <param name="userId">The user identifier.</param>
            <param name="cookieId">The cookie identifier.</param>
            <exception cref="T:OutSystems.HubEdition.Extensibility.Data.Platform.Session.SessionStoreException">
            Thrown when it's not possible to complete the operation.
            </exception>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.Session.ISessionModuleStoreOperations.DeleteModuleItems(System.String)">
            <summary>
            Deletes all the items associated to the session identified by the referred session's id.
            </summary>
            <param name="sessionId">The session identifier.</param>
            <exception cref="T:OutSystems.HubEdition.Extensibility.Data.Platform.Session.SessionStoreException">
            Thrown when it's not possible to complete the operation.
            </exception>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.Session.ISessionModuleStoreOperations.GetUserBySessionId(System.String)">
            <summary>
            Returns the userID associated to the session identified by the referred session's id.
            </summary>
            <param name="sessionId">The session identifier.</param>
            <returns>The Id of the user currently logged in or 0 if no user is logged in</returns>
            <exception cref="T:OutSystems.HubEdition.Extensibility.Data.Platform.Session.SessionStoreException">
            Thrown when it's not possible to complete the operation.
            </exception>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.Session.ISessionModuleStoreOperations.ResetModuleTimeout(System.String)">
            <summary>
            Resets the timeout for the items associated to the session identified by the referred session's id.
            </summary>
            <param name="sessionId">The session identifier.</param>
            <exception cref="T:OutSystems.HubEdition.Extensibility.Data.Platform.Session.SessionStoreException">
            Thrown when it's not possible to complete the operation.
            </exception>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.Platform.Session.ISessionLicensing">
            <summary>
            Specify methods related to licensing
            </summary>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.Platform.Session.ISessionLicensing.CountConcurrentUsers(System.DateTime,System.String[],System.Int32@,System.Int32@,System.DateTime@)">
            <summary>
            Counts the number of concurrent users using the platform.
            </summary>
            <param name="referenceDate">The reference date.</param>
            <param name="moduleIdsToExclude">The ids of the modules to be excluded from the count.</param>
            <param name="anon">Number of anon users.</param>
            <param name="registered">Number of registered users.</param>
            <param name="current">The time when the evaluation was done.</param>
            <exception cref="T:OutSystems.HubEdition.Extensibility.Data.Platform.Session.SessionStoreException">
            Thrown when it's not possible to complete the operation.
            </exception>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.Platform.Session.IPlatformSessionService">
            <summary>
            Represents an instance that allows the management of the sessions.
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.Platform.Session.IPlatformSessionService.QueryTimeout">
            <summary>
            Sets the command timeout value in seconds to use in session queries.
            </summary>
            <value>
            The query timeout.
            </value>
            <remarks>
            A default value for this property must exist. The platform might not set its value before
            calling a method of the API.
            </remarks>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.Platform.Session.IPlatformSessionService.DatabaseServices">
            <summary>
            Gets the <see cref="T:OutSystems.HubEdition.Extensibility.Data.Platform.IPlatformDatabaseServices" /> instance associated with this service.
            </summary>
            <value>
            The database services associated.
            </value>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.TransactionService.GenericTransactionManager">
            <summary>
            Represents a service to manage transactions.
            Extend this class to create a transaction manager.
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.TransactionService.GenericTransactionManager.TransactionPool">
            <summary>
            This property represents the transaction pool used by this manager.
            </summary>
            <value>
            The transaction pool.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.TransactionService.GenericTransactionManager.RequestTransactionInfo">
            <summary>
            This property represents information about the request transaction.
            </summary>
            <value>The request transaction information.</value>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.TransactionService.GenericTransactionManager.TransactionInfo">
            <summary>
            Stores information about transaction state providing methods that allow its manipulation.
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.TransactionService.GenericTransactionManager.TransactionInfo.Free">
            <summary>
            Returns true if the transaction is free.
            </summary>
            <value>
            True if the transaction is free, False otherwise.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.TransactionService.GenericTransactionManager.TransactionInfo.CreationTime">
            <summary>
            Gets the transaction creation time.
            </summary>
            <value>
            The creation time.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.TransactionService.GenericTransactionManager.TransactionInfo.LastChange">
            <summary>
            Gets the time of the last modification to the transaction
            </summary>
            <value>
            The time when the transaction was change for last.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.TransactionService.GenericTransactionManager.TransactionInfo.ReaderCount">
            <summary>
            Gets the number of readers associated with the transaction.
            </summary>
            <value>
            The number of readers associated.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.TransactionService.GenericTransactionManager.TransactionInfo.IsReleasable">
            <summary>
            This property informs if the transaction can be released.
            </summary>
            <value>
            <c>true</c> if this instance is releasable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.TransactionService.GenericTransactionManager.TransactionInfo.IsPoolable">
            <summary>
            This property informs if the transaction can be returned to the pool.
            </summary>
            <value>
            <c>true</c> if this instance is poolable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.TransactionService.GenericTransactionManager.TransactionInfo.Transaction">
            <summary>
            Returns the <see cref="T:System.Data.IDbTransaction" /> object being wrapped.
            </summary>
            <value>
            The transaction.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.TransactionService.GenericTransactionManager.TransactionInfo.Connection">
            <summary>
            Returns the <see cref="T:System.Data.IDbConnection" /> object being wrapped.
            </summary>
            <value>
            The connection.
            </value>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.TransactionService.GenericTransactionManager.TransactionInfo.#ctor(System.Data.IDbTransaction,System.Data.IDbConnection)">
            <summary>
            <see cref="T:OutSystems.HubEdition.Extensibility.Data.TransactionService.GenericTransactionManager.TransactionInfo"/> constructor.
            Whenever possible pass in the original connection variable that created the transaction instead of just (trans, trans.Connection)
            It appears there is a bug in ADO.NET that makes the GC delete connections that are just referenced by a transaction,
            causing the later to appear as Zombie and making <code>trans.Connection == null</code>.
            Because of that, an explicit reference is kept both to the connection and the transaction.
            </summary>
            <param name="transaction">The transaction to be used.</param>
            <param name="connection">The connection to be used.</param>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.TransactionService.GenericTransactionManager.TransactionInfo.Reserve">
            <summary>
            Marks the transaction as busy and changes its <see cref="P:OutSystems.HubEdition.Extensibility.Data.TransactionService.GenericTransactionManager.TransactionInfo.LastChange"/> time.
            </summary>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.TransactionService.GenericTransactionManager.TransactionInfo.Release">
            <summary>
            Releases the transaction by marking it as free, changing its <see cref="P:OutSystems.HubEdition.Extensibility.Data.TransactionService.GenericTransactionManager.TransactionInfo.LastChange"/> time
            time and closing all associated readers.
            </summary>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.TransactionService.GenericTransactionManager.TransactionInfo.MarkChange">
            <summary>
            Sets the last changed time to now.
            </summary>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.TransactionService.GenericTransactionManager.TransactionInfo.AddReader(System.Data.IDataReader)">
            <summary>
            Associates a reader with the transaction.
            Before associating the reader, cleans-up closed readers.
            </summary>
            <param name="reader">The reader to associate</param>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.TransactionService.GenericTransactionManager.TransactionInfo.closeReaders">
            <summary>
            Closes all readers associated with the transaction.
            </summary>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.TransactionService.GenericTransactionManager.TransactionInfo.ReturnConnectionToPool">
            <summary>
            Closes the connection associated with the transaction.
            </summary>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.TransactionService.GenericTransactionManager.BuildTransactionInfo">
            <summary>
            Returns a <see cref="T:OutSystems.HubEdition.Extensibility.Data.TransactionService.GenericTransactionManager.TransactionInfo"/> instance built with a connection and a transaction created by the associated TransactionService.
            </summary>
            <returns>A new <see cref="T:OutSystems.HubEdition.Extensibility.Data.TransactionService.GenericTransactionManager.TransactionInfo"/> instance.</returns>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.TransactionService.GenericTransactionManager.TransactionService">
            <summary>
            This property represents the <see cref="T:OutSystems.HubEdition.Extensibility.Data.TransactionService.ITransactionService"/> associated with this transaction manager.
            When setting this property, all resources are released and transactions are rolled back.
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.TransactionService.GenericTransactionManager.ExecutionService">
            <summary>
            Gets the <see cref="T:OutSystems.HubEdition.Extensibility.Data.ExecutionService.IExecutionService" /> created by the associated DatabaseService.
            </summary>
            <value>
            The execution service associated.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.TransactionService.GenericTransactionManager.BusyTransactionCount">
            <summary>
            Gets the number of busy transactions.
            </summary>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.TransactionService.GenericTransactionManager.GetRequestTransaction">
            <summary>
            Returns a transaction to be used during a web request.
            This transaction is only committed or rolled back by invoking <see cref="M:OutSystems.HubEdition.Extensibility.Data.TransactionService.GenericTransactionManager.FreeupResources(System.Boolean)"/>.
            </summary>
            <returns>A transaction to be used in the applications.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.TransactionService.GenericTransactionManager.GetCommitableTransaction">
            <summary>
            Returns a transaction that is managed by extension developers.
            Extension developers explicitly commit or rollback this transaction.
            </summary>
            <returns>A committable transaction managed by the user.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.TransactionService.GenericTransactionManager.GetReadOnlyTransaction">
            <summary>
            Returns a transaction with read only access suitable to iterate results.
            </summary>
            <returns>A Transaction only for read purposes.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.TransactionService.GenericTransactionManager.GetConnection">
            <summary>
            Returns a database connection created by the associated <see cref="P:OutSystems.HubEdition.Extensibility.Data.TransactionService.GenericTransactionManager.TransactionService"/>.
            </summary>
            <returns>A new connection to the database</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.TransactionService.GenericTransactionManager.ReleaseTransaction(System.Data.IDbTransaction)">
            <summary>
            Releases a transaction to the pool.
            If the transaction is poolable, it is released and put back into the pool, otherwise it is removed.
            Throws an <see cref="T:OutSystems.HubEdition.Extensibility.Data.TransactionService.InvalidTransactionReleaseException"/> if the transaction is not releasable.
            </summary>
            <exception cref="T:OutSystems.HubEdition.Extensibility.Data.TransactionService.InvalidTransactionReleaseException">Occurs if the transaction is not releasable.</exception>
            <param name="trans">Transaction to be released.</param>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.TransactionService.GenericTransactionManager.CommitTransaction(System.Data.IDbTransaction)">
            <summary>
            Commits a transaction.
            The transaction is committed, the connection is closed and put back into the pool.
            </summary>
            <param name="trans">The transaction to be committed.</param>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.TransactionService.GenericTransactionManager.RollbackTransaction(System.Data.IDbTransaction)">
            <summary>
            Rolls back a transaction.
            The transaction is rolled back, the connection is closed and put back into the pool.
            </summary>
            <param name="trans">Transaction to be rolled back.</param>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.TransactionService.GenericTransactionManager.CommitAllTransactions">
            <summary>
            Commits all Request transactions.
            </summary>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.TransactionService.GenericTransactionManager.RollbackAllTransactions">
            <summary>
            Rolls back all Request transactions.
            </summary>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.TransactionService.GenericTransactionManager.EndCommitableTransaction(System.Data.IDbTransaction,System.Boolean)">
            <summary>
            Ends a transaction by committing or rolling back.
            </summary>
            <param name="trans">Transaction to commit.</param>
            <param name="commit">If True, the transaction is committed, otherwise is rolled back.</param>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.TransactionService.GenericTransactionManager.EndTransaction(OutSystems.HubEdition.Extensibility.Data.TransactionService.GenericTransactionManager.TransactionInfo,System.Boolean,System.Boolean)">
            <summary>
            Ends a pooled transaction, performing additional cleanup code if necessary.
            An error if an exception is raised.
            </summary>
            <param name="transInfo">Object containing information about the transaction.</param>
            <param name="commit">If True, all transaction are committed. Otherwise, they are rolled back.</param>
            <param name="toFreeResources">If True, all resources are released and connections returned to the pool.</param>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.TransactionService.GenericTransactionManager.FreeupResources(System.Boolean)">
            <summary>
            Releases all database resources being used.
            All transactions are committed or rolled back, and connections are returned to the pool.
            This implementation calls the <see cref="M:OutSystems.HubEdition.Extensibility.Data.TransactionService.GenericTransactionManager.EndTransaction(OutSystems.HubEdition.Extensibility.Data.TransactionService.GenericTransactionManager.TransactionInfo,System.Boolean,System.Boolean)"/> method to end the transactions
            and sets the <see cref="P:OutSystems.HubEdition.Extensibility.Data.TransactionService.GenericTransactionManager.RequestTransactionInfo"/> to Null.
            </summary>
            <param name="commit">If True, all transaction are committed. Otherwise, they are rolled back.</param>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.TransactionService.GenericTransactionManager.AssociateReader(System.Data.IDbTransaction,System.Data.IDataReader)">
            <summary>
            Associates a reader to a transaction.
            </summary>
            <param name="trans">The transaction that will be associated with the reader.</param>
            <param name="reader">The reader to associate.</param>
            <returns>Returns True if the reader was successfully associated, False otherwise.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.TransactionService.GenericTransactionManager.LogException(System.Exception,System.Diagnostics.StackTrace,System.String)">
            <summary>
            Logs an error with information about the exception, the stack trace and a message.
            </summary>
            <param name="e">Exception to log.</param>
            <param name="additionalStack">Stack trace to add to the log.</param>
            <param name="additionalMessage">Message to add to the log.</param>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.TransactionService.GenericTransactionManager.IsManaging(System.Data.IDbTransaction)">
            <summary>
            Checks if this manager is managing a given transaction.
            This implementation, checks if the <see cref="T:OutSystems.HubEdition.Extensibility.Data.TransactionService.GenericTransactionManager.TransactionInfo"/>
            returned by the <see cref="M:OutSystems.HubEdition.Extensibility.Data.TransactionService.GenericTransactionManager.GetTransactionInfo(System.Data.IDbTransaction)"/> is not null.
            </summary>
            <param name="trans">The transaction.</param>
            <returns>Returns True if the transaction belongs to this transaction manager, False otherwise.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.TransactionService.GenericTransactionManager.#ctor(OutSystems.HubEdition.Extensibility.Data.TransactionService.ITransactionService)">
            <summary>
            Creates a new instance of the <see cref="T:OutSystems.HubEdition.Extensibility.Data.TransactionService.GenericTransactionManager"/> class.
            </summary>
            <param name="transactionService">The transaction service to be used.</param>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.TransactionService.GenericTransactionManager.Dispose">
            <summary>
            Frees all resources and rolls back existing transactions.
            </summary>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.TransactionService.GenericTransactionManager.AbortTransaction(System.Data.IDbTransaction)">
            <summary>
            Aborts a transaction and releases it.
            </summary>
            <param name="trans">Transaction to be aborted.</param>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.TransactionService.BaseTransactionService">
            <summary>
            Database service that handles connection and transaction management to a access a database.
            This is a base implementation of an abstract transaction service.
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.TransactionService.BaseTransactionService.IsolationLevel">
            <summary>
            Gets the isolation level to be used in the transactions.
            </summary>
            <value>
            The isolation level of the transactions.
            </value>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.TransactionService.BaseTransactionService.ReleaseAllPooledConnections">
            <summary>
            Releases all connections in the pool.
            </summary>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.TransactionService.BaseTransactionService.CreateTransactionManager">
            <summary>
            Returns a new transaction manager.
            </summary>
            <returns>The transaction manager.</returns>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.TransactionService.BaseTransactionService.NeedsSeparateAdminConnection">
            <summary>
            Checks if a separate connection is needed to connect to another catalog.
            </summary>
            <value>
            True if is needed a separate admin connection. False otherwise.
            </value>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.TransactionService.BaseTransactionService.#ctor(OutSystems.HubEdition.Extensibility.Data.IDatabaseServices)">
            <summary>
            Creates a new instance of the <see cref="T:OutSystems.HubEdition.Extensibility.Data.TransactionService.BaseTransactionService"/> class.
            </summary>
            <param name="databaseServices">The database services to be used by this service.</param>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.TransactionService.BaseTransactionService.DatabaseServices">
            <summary>
            This property represents the <see cref="T:OutSystems.HubEdition.Extensibility.Data.IDatabaseServices"/> instance associated with this service.
            </summary>
            <value>
            The database services associated.
            </value>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.TransactionService.BaseTransactionService.CreateConnection">
            <summary>
            Returns a new connection to the database.
            This implementation calls <see cref="M:OutSystems.HubEdition.Extensibility.Data.TransactionService.BaseTransactionService.CreateConnection(System.Int32)"/> 
            with the number of retries equals to <see cref="F:OutSystems.HubEdition.Extensibility.Data.TransactionService.TransactionServiceConstants.DEFAULT_CONNECTION_RETRIES"/>.
            </summary>
            <returns>The database connection.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.TransactionService.BaseTransactionService.CreateConnection(System.Int32)">
            <summary>
            Returns a new connection to the database.
            This implementation calls <see cref="M:OutSystems.HubEdition.Extensibility.Data.TransactionService.BaseTransactionService.GetConnectionFromDriver"/>, opens the connection
            and returns it.
            </summary>
            <param name="numRetries">The number retries for establish the connection.</param>
            <returns>an open database connection.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.TransactionService.BaseTransactionService.IsNonTransientConnectionException(System.Exception)">
            <summary>
            Checks if an exception thrown while trying to connect to the database is non-transient. If so, no retry is attempted.
            </summary>
            <param name="exception">The exception to test.</param>
            <returns>True if it the exception is non-transient, False otherwise.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.TransactionService.BaseTransactionService.TestConnection(System.String@)">
            <summary>
            Checks if it is possible to establish a connection.
            </summary>
            <param name="errorMessage">Error message that occurred during the test connection.</param>
            <returns>
            True if it was established a connection successfully, False otherwise.
            </returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.TransactionService.BaseTransactionService.CreateTransaction(System.Data.IDbConnection)">
            <summary>
            Returns a new transaction for the connection provided.
            This implementation creates a new transaction with the
            <see cref="P:OutSystems.HubEdition.Extensibility.Data.TransactionService.BaseTransactionService.IsolationLevel"/> of the current service.
            </summary>
            <param name="conn">Connection where the transaction will be created.</param>
            <returns>A transaction using the connection provided.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.TransactionService.BaseTransactionService.ReleasePooledConnections(System.String)">
            <summary>
            Releases all connections in the connection pool.
            This implementation releases all connections in the connection pool and
            logs a warning with the reason.
            </summary>
            <param name="reason">Reason why the connections will be released.</param>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.TransactionService.BaseTransactionService.IsClosed(System.Data.IDbConnection)">
            <summary>
            Checks if the connection is closed.
            </summary>
            <param name="connection">A database connection.</param>
            <returns>True if the connection is already closed, False otherwise.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.TransactionService.BaseTransactionService.CloseTransaction(System.Data.IDbTransaction)">
            <summary>
            Closes the provided database transaction.
            This implementation safely closes a transaction. If the transaction or its connection
            are Null it does nothing.
            </summary>
            <param name="tran">Transaction to be closed.</param>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.TransactionService.ITransactionManager">
            <summary>
            Represents a service to manage transactions.
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.TransactionService.ITransactionManager.TransactionService">
            <summary>
            This property represents the <see cref="T:OutSystems.HubEdition.Extensibility.Data.TransactionService.ITransactionService" /> associated with this transaction manager.
            </summary>
            <value>
            The transaction service associated.
            </value>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.TransactionService.ITransactionManager.BusyTransactionCount">
            <summary>
            Gets the number of busy transactions.
            </summary>
            <value>
            The number of busy transactions.
            </value>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.TransactionService.ITransactionManager.GetRequestTransaction">
            <summary>
            Returns a transaction to be used during a web request.
            This transaction is only committed or rolled back by invoking <see cref="M:OutSystems.HubEdition.Extensibility.Data.TransactionService.ITransactionManager.FreeupResources(System.Boolean)"/>.
            </summary>
            <returns>A transaction to be used in the applications.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.TransactionService.ITransactionManager.GetCommitableTransaction">
            <summary>
            Returns a transaction that is managed by extension developers.
            Extension developers explicitly commit or rollback this transaction.
            </summary>
            <returns>A private transaction managed by the user.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.TransactionService.ITransactionManager.GetReadOnlyTransaction">
            <summary>
            Returns a transaction with read only access suitable to iterate results.
            </summary>
            <returns>A Transaction only for read purposes.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.TransactionService.ITransactionManager.ReleaseTransaction(System.Data.IDbTransaction)">
            <summary>
            Releases a transaction to the pool.
            </summary>
            <param name="trans">Transaction to be released.</param>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.TransactionService.ITransactionManager.CommitTransaction(System.Data.IDbTransaction)">
            <summary>
            Commits a transaction.
            </summary>
            <param name="trans">The transaction to be committed.</param>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.TransactionService.ITransactionManager.RollbackTransaction(System.Data.IDbTransaction)">
            <summary>
            Rolls back a transaction.
            </summary>
            <param name="trans">The transaction to be rolled back</param>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.TransactionService.ITransactionManager.CommitAllTransactions">
            <summary>
            Commits all transactions.
            </summary>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.TransactionService.ITransactionManager.RollbackAllTransactions">
            <summary>
            Rolls back all transactions.
            </summary>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.TransactionService.ITransactionManager.FreeupResources(System.Boolean)">
            <summary>
            Releases all database resources being used.
            All transactions are committed or rolled back, and connections are returned to the pool.
            </summary>
            <param name="commit">If True, all transaction are committed. Otherwise, are rolled back.</param>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.TransactionService.ITransactionManager.AssociateReader(System.Data.IDbTransaction,System.Data.IDataReader)">
            <summary>
            Associates a reader to a transaction.
            </summary>
            <param name="trans">The transaction that will be associated with the reader.</param>
            <param name="reader">The reader to associate.</param>
            <returns>Returns True if the reader was successfully associated, False otherwise.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.TransactionService.ITransactionManager.IsManaging(System.Data.IDbTransaction)">
            <summary>
            Checks if this manager is managing a given transaction.
            </summary>
            <param name="trans">A transaction.</param>
            <returns>Returns True if the transaction belongs to this transaction manager, False otherwise.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.TransactionService.ITransactionManager.AbortTransaction(System.Data.IDbTransaction)">
            <summary>
            Aborts a transaction and releases it.
            </summary>
            <param name="trans">Transaction to be aborted.</param>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.TransactionService.ITransactionService">
            <summary>
            Database service that handles connection and transaction management to a access a database.
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.Extensibility.Data.TransactionService.ITransactionService.DatabaseServices">
            <summary>
            Gets the <see cref="T:OutSystems.HubEdition.Extensibility.Data.IDatabaseServices" /> instance associated with this service.
            </summary>
            <value>
            The database services associated.
            </value>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.TransactionService.ITransactionService.CreateTransactionManager">
            <summary>
            Returns a new transaction manager.
            </summary>
            <returns>The transaction manager.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.TransactionService.ITransactionService.CreateConnection">
            <summary>
            Returns a new connection to the database.
            </summary>
            <returns>The database connection.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.TransactionService.ITransactionService.CreateConnection(System.Int32)">
            <summary>
            Returns a new connection to the database.
            </summary>
            <param name="numRetries">The number of retries for establishing the connection.</param>
            <returns>The database connection.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.TransactionService.ITransactionService.TestConnection(System.String@)">
            <summary>
            Checks if it is possible to establish a connection.
            </summary>
            <param name="errorMessage">Error message raised during the creation of the connection.</param>
            <returns>
            True if it was established a connection successfully, False otherwise.
            </returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.TransactionService.ITransactionService.CreateTransaction(System.Data.IDbConnection)">
            <summary>
            Returns a new transaction for the connection provided.
            </summary>
            <param name="conn">Connection from which the transaction is created.</param>
            <returns>A transaction created from the given connection.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.TransactionService.ITransactionService.ReleasePooledConnections(System.String)">
            <summary>
            Releases all connections in the connection pool.
            </summary>
            <param name="reason">Reason why the connections will be released.</param>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.TransactionService.ITransactionService.IsClosed(System.Data.IDbConnection)">
            <summary>
            Checks if the connection is closed.
            </summary>
            <param name="connection">A database connection.</param>
            <returns>True if the connection is already closed, False otherwise.</returns>
        </member>
        <member name="M:OutSystems.HubEdition.Extensibility.Data.TransactionService.ITransactionService.CloseTransaction(System.Data.IDbTransaction)">
            <summary>
            Closes the provided database transaction.
            </summary>
            <param name="tran">Transaction to be closed.</param>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.TransactionService.TransactionException">
            <summary>
            General exception raised by a transaction.
            Check the message to see the reason of the exception.
            </summary>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.TransactionService.InvalidCommitOrRollbackTransactionException">
            <summary>
            Exception raised when it's not possible to commit or rollback a transaction.
            Check the message to see the reason of the exception.
            </summary>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.TransactionService.InvalidTransactionReleaseException">
            <summary>
            Exception raised when it's not possible to release a transaction.
            Check the message to see the reason of the exception.
            </summary>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.TransactionService.InvalidTransactionException">
            <summary>
            Exception raised when a database transaction is in an invalid state.
            Check the message to see the reason of the exception.
            </summary>
        </member>
        <member name="T:OutSystems.HubEdition.Extensibility.Data.TransactionService.TransactionServiceConstants">
            <summary>
            Class with constants to be used by <see cref="N:OutSystems.HubEdition.Extensibility.Data.TransactionService"/>.
            </summary>
        </member>
        <member name="F:OutSystems.HubEdition.Extensibility.Data.TransactionService.TransactionServiceConstants.RETRY_CONNECTION_TIME">
            <summary>
            Time, in milliseconds, to wait for a connection retry.
            </summary>
        </member>
        <member name="F:OutSystems.HubEdition.Extensibility.Data.TransactionService.TransactionServiceConstants.CONNECTION_POOL_CLEANUP_RETRIES">
            <summary>
            Maximum number of retries for a connection pool cleanup operation.
            </summary>
        </member>
        <member name="F:OutSystems.HubEdition.Extensibility.Data.TransactionService.TransactionServiceConstants.DEFAULT_CONNECTION_RETRIES">
            <summary>
            Maximum number of times to try establishing a connection.
            </summary>
        </member>
        <member name="P:OutSystems.HubEdition.DatabaseAbstractionLayer.Platform.Configuration.BaseConfigurationObjects.IBaseConfigurationManager.CreationScriptFiles">
            <summary>
            Retrieves the creation scripts from the file system
            </summary>
            <returns> Returns a IDatabaseScriptFile which handles basic file system operations for each setup script</returns>
        </member>
        <member name="P:OutSystems.HubEdition.DatabaseAbstractionLayer.Platform.Configuration.BaseConfigurationObjects.IBaseConfigurationManager.ModelScriptFiles">
            <summary>
            Retrieves the database model scripts from the file system
            </summary>
            <returns> Returns a IDatabaseScriptFile which handles basic file system operations for each database script</returns>
        </member>
        <member name="P:OutSystems.HubEdition.DatabaseAbstractionLayer.Platform.Configuration.BaseConfigurationObjects.IBaseConfigurationManager.AsyncIndexesScriptFiles">
            <summary>
            Retrieves the database async indexes scripts from the file system
            </summary>
            <returns>Returns a IDatabaseScriptFile which handles basic file system operations for each database script</returns>
        </member>
        <member name="M:OutSystems.HubEdition.DatabaseAbstractionLayer.Platform.Configuration.BaseConfigurationObjects.IBaseConfigurationManager.GenerateCreationScripts">
            <summary>
            Returns the setup scripts with their token replaced, so it can be ran
            </summary>
            <returns>Return the setups scripts with their token replaced</returns>
        </member>
        <member name="T:OutSystems.HubEdition.DatabaseAbstractionLayer.Platform.Configuration.DatabaseSettingsSerialization.ConfigurationUnWrapException">
            <summary>
            Class that represents an exception that occurs during deserialization of a configuration.
            </summary>
        </member>
        <member name="M:OutSystems.HubEdition.DatabaseAbstractionLayer.Platform.Configuration.ScriptParser.DatabaseScriptFile.GetFileStream(System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Returns a FileStream disposable object.
            </summary>
            <param name="mode">Uses the enum FileMode to specify how the file should be open</param>
            <param name="access">Uses the enum FileAccess to specify how the file will be accessed</param>
            <returns></returns>
        </member>
        <member name="M:OutSystems.Internal.Db.Command.TransformParametersSyntax">
            <summary>
            Replaces the parameters prefix '@' with the one defined in <see cref="P:OutSystems.HubEdition.Extensibility.Data.ExecutionService.IExecutionService.ParameterPrefix"/>
            in both the command text and the command parameters. Nothing is done if the defined prefix is '@'.
            </summary>
        </member>
        <member name="T:OutSystems.Internal.Db.PrivateManagedTransaction">
            <summary>
            Extended implementation of a <c>ManagedTransaction</c> that have a <c>TransactionManager</c> associated 
            and that is responsible to perform the operations about the transaction.
            The difference is related to the dispose of this object.
            </summary>
        </member>
        <member name="P:OutSystems.Internal.Db.Transaction.Completed">
            <summary>
            Flag that indicates if this instance was already commit or rolled back.
            </summary>
        </member>
    </members>
</doc>
