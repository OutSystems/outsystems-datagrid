// eslint-disable-next-line @typescript-eslint/no-unused-vars
namespace OSFramework.DataGrid.Types {
    /**
     * Column configs common properties between provider and OS
     */
    type IColumnCommonConfigs = {
        align?: string;
        binding?: string;
        cssClass?: string;
        dataType?: wijmo.DataType;
        editor?: any;
        format?: string;
        header?: string;
        multiLine?: boolean;
        visible?: boolean;
        width?: number;
        wordWrap?: boolean;
    };

    export interface IConfiguration {
        //TODO: retornar IColumnConfig ou IGridConfig
        [key: string]: any;
    }

    export type IProviderConfiguration<T> = T;

    export interface IGridProviderConfigs {
        allowMerging: string;
        autoGenerateColumns: boolean;
        isReadOnly: boolean;
        showSelectedHeaders: string;
        validateEdits: boolean;
    }

    /**
     * Provider Column confings
     */
    export type IColumnProviderConfigs = IColumnCommonConfigs & {
        allowDragging?: boolean;
        allowResizing?: boolean;
        allowSorting?: boolean;
        cellTemplate?: wijmo.grid.ICellTemplateFunction;
        collapseTo?: string;
        dataMap?: any;
        dataMapEditor?: any;
        isCollapsed?: boolean;
        isReadOnly?: boolean;
        isRequired?: boolean;
    };

    export interface IEditorProviderConfigs {}

    /**
     * Provider Column confings
     */
    export interface INumberEditorProviderConfigs
        extends IEditorProviderConfigs {
        format: string;
        isRequired: boolean;
        max: number;
        min: number;
        step: number;
    }
    /**
     * Provider Column confings
     */
    export interface IDateColumnProviderConfigs extends IEditorProviderConfigs {
        format: string;
        isRequired: boolean;
        max: Date;
        min: Date;
    }

    /**
     * OS column configs
     */
    export interface IColumnConfigs extends IColumnCommonConfigs {
        allowEdit: boolean;
        allowMerging: boolean;
        allowReorder: boolean;
        allowResize: boolean;
        allowSort: boolean;
        autoGenerated: boolean;
        canBeHidden: boolean;
        conditionalFormat: Array<OSStructure.ConditionalFormat>;
        errorMessage: string;
        genericColumnId: string;
        headerTooltip: string;
        isMandatory: boolean;
        required: boolean;
        uniqueId: string;
        validateBinding: boolean;
    }

    /**
     * Base column extra configs
     */
    export interface IColumnExtraConfigs {}

    /**
     * Base column extra configs
     */
    export interface ICommonExtraConfigs extends IColumnExtraConfigs {
        conditionalFormat: Array<OSStructure.ConditionalFormat>;
    }

    /**
     * Checkbox column extra configs
     */
    export interface ICheckboxColumnExtraConfigs extends ICommonExtraConfigs {}

    /**
     * Currency column extra configs
     */
    export interface ICurrencyColumnExtraConfigs extends ICommonExtraConfigs {
        decimalPlaces: number;
        symbol: boolean;
    }

    /**
     * Number column extra configs
     */
    export interface INumberColumnExtraConfigs extends ICommonExtraConfigs {
        decimalPlaces: number;
        hasThousandSeparator: boolean;
        maxValue: number;
        minValue: number;
        step: number;
    }

    /**
     * Date/Datetime column extra configs
     */
    export interface IDateColumnExtraConfigs extends ICommonExtraConfigs {
        format: string;
    }

    /**
     * Dropdown column extra configs
     */
    export interface IDropdownColumnExtraConfigs extends ICommonExtraConfigs {
        datamap: { key: string; parentKey: string; text: string };
        parentBinding: string;
    }

    /**
     * Group column extra configs
     */
    export interface IGroupColumnExtraConfigs extends ICommonExtraConfigs {
        align: string;
        collapseTo: string;
        isCollapsed: boolean;
    }

    /**
     * Text column extra configs
     */
    export interface ITextColumnExtraConfigs extends ICommonExtraConfigs {}

    /**
     * Text column extra configs
     */
    export interface ICalculatedColumnExtraConfigs extends ICommonExtraConfigs {
        formula: DataGrid.OSStructure.Formula;
    }
}
