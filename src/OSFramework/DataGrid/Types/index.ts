// eslint-disable-next-line @typescript-eslint/no-unused-vars
namespace OSFramework.DataGrid.Types {
    /**
     * Column configs common properties between provider and OS
     */
    type ColumnCommonConfigs = {
        align: string;
        binding: string;
        cssClass: string;
        dataType: wijmo.DataType;
        editor: any;
        format: string;
        header: string;
        multiLine: boolean;
        visible: boolean;
        width: number;
        wordWrap: boolean;
    };

    /**
     * Provider Column confings
     */
    export type ColumnProviderConfigs = ColumnCommonConfigs & {
        allowDragging: boolean;
        allowResizing: boolean;
        allowSorting: boolean;
        dataMap?: any;
        dataMapEditor?: any;
        isReadOnly: boolean;
        isRequired: boolean;
    };

    /**
     * OS column configs
     */
    export type ColumnConfigs = ColumnCommonConfigs & {
        allowEdit: boolean;
        allowMerging: boolean;
        allowReorder: boolean;
        allowResize: boolean;
        allowSort: boolean;
        autoGenerated: boolean;
        canBeHidden: boolean;
        conditionalFormat: Array<OSStructure.ConditionalFormat>;
        errorMessage: string;
        genericColumnId: string;
        headerTooltip: string;
        isMandatory: boolean;
        required: boolean;
        uniqueId: string;
        validateBinding: boolean;
    };

    /**
     * Base column extra configs
     */
    export type ColumnExtraConfigs = {
        conditionalFormat: Array<OSStructure.ConditionalFormat>;
    };

    /**
     * Checkbox column extra configs
     */
    export type CheckboxColumnExtraConfigs = ColumnExtraConfigs;

    /**
     * Currency column extra configs
     */
    export type CurrencyColumnExtraConfigs = ColumnExtraConfigs & {
        decimalPlaces: number;
        symbol: boolean;
    };

    /**
     * Number column extra configs
     */
    export type NumberColumnExtraConfigs = ColumnExtraConfigs & {
        decimalPlaces: number;
        hasThousandSeparator: boolean;
        maxValue: number;
        minValue: number;
        step: number;
    };

    /**
     * Date/Datetime column extra configs
     */
    export type DateColumnExtraConfigs = ColumnExtraConfigs & {
        format: string;
    };

    /**
     * Dropdown column extra configs
     */
    export type DropdownColumnExtraConfigs = ColumnExtraConfigs & {
        dataMap: { key: string; parentKey: string; text: string };
        parentBinding: string;
    };

    /**
     * Group column extra configs
     */
    export type GroupColumnExtraConfigs = ColumnExtraConfigs & {
        align: string;
        collapseTo: string;
        isCollapsed: boolean;
    };

    /**
     * Text column extra configs
     */
    export type TextColumnExtraConfigs = ColumnExtraConfigs;
}
