/// <reference path="../AbstractConfiguration.ts" />
// eslint-disable-next-line @typescript-eslint/no-unused-vars
namespace OSFramework.DataGrid.Configuration.Column {
    export type ColumnProviderConfigType = {
        align: string;
        allowDragging: boolean;
        allowResizing: boolean;
        allowSorting: boolean;
        binding: string;
        cssClass: string;
        dataMap?: any;
        dataMapEditor?: any;
        dataType: wijmo.DataType;
        editor: any;
        format: string;
        header: string;
        isReadOnly: boolean;
        isRequired: boolean;
        multiLine: boolean;
        visible: boolean;
        width: number;
        wordWrap: boolean;
    };

    export type ColumnConfigType = {
        align: string;
        allowEdit: boolean;
        allowMerging: boolean;
        allowReorder: boolean;
        allowResize: boolean;
        allowSort: boolean;
        autoGenerated: boolean;
        binding: string;
        canBeHidden: boolean;
        conditionalFormat: Array<OSStructure.ConditionalFormat>;
        cssClass: string;
        dataType: wijmo.DataType;
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        editor: any;
        errorMessage: string;
        format: string;
        genericColumnId: string;
        header: string;
        headerTooltip: string;
        isMandatory: boolean;
        multiLine: boolean;
        required: boolean;
        uniqueId: string;
        validateBinding: boolean;
        visible: boolean;
        width: number;
        wordWrap: boolean;
    };

    /**
     * Defines the generic properties for a Column
     */
    export class ColumnConfig
        extends AbstractConfiguration
        implements IConfigurationColumn
    {
        public align: string;
        public allowEdit: boolean;
        public allowMerging: boolean;
        public allowReorder: boolean;
        public allowResize: boolean;
        public allowSort: boolean;
        public autoGenerated: boolean;
        public binding: string;
        public canBeHidden: boolean;
        public conditionalFormat: Array<OSStructure.ConditionalFormat>;
        public cssClass: string;
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        public dataType: wijmo.DataType;
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        public editor: any;
        public errorMessage: string;
        public format: string;
        public genericColumnId: string;
        public header: string;
        public headerTooltip: string;
        public isMandatory: boolean;
        public multiLine: boolean;
        public required: boolean;
        public uniqueId: string;
        public validateBinding: boolean;
        public visible: boolean;
        public width: number;
        public wordWrap: boolean;

        // eslint-disable-next-line
        constructor(config: ColumnConfigType) {
            // Remove any {} or [] that exist on the binding. In order to accept any format "{EntityName}.[FieldName]" or "EntityName.FieldName"
            config.binding = config.binding.replace(/[{}[\]]+/g, '');
            super(config);
        }

        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        public getProviderConfig(): ColumnProviderConfigType {
            // eslint-disable-next-line prefer-const
            let provider = {
                binding: this.binding,
                header: this.header,
                format: this.format,
                isReadOnly: this.allowEdit === false,
                isRequired: this.required,
                visible: this.visible,
                allowDragging: this.allowReorder,
                allowResizing: this.allowResize,
                allowSorting: this.allowSort,
                cssClass: this.cssClass,
                align: this.align,
                wordWrap: this.wordWrap,
                multiLine: this.multiLine,
                dataType: this.dataType,
                editor: this.editor,
                width: this.width > 0 ? this.width : null // when the column's width is not set, the default value should be managed by wijmo
            };

            //Cleanning undefined properties
            Object.keys(provider).forEach(
                (key) => provider[key] === undefined && delete provider[key]
            );

            return provider;
        }

        // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any
        public updateConfig(providerConfig: ColumnProviderConfigType): void {
            this.visible = providerConfig.visible;
            this.width = providerConfig.width;
        }
    }
}
