/// <reference path="../Utils/AbstractConfiguration.ts" />

// eslint-disable-next-line @typescript-eslint/no-unused-vars
namespace Column {
    /**
     * Defines the generic properties for a Column
     */
    export class ColumnConfig
        extends AbstractConfiguration
        implements IConfigurationColumn {
        public align: string;
        public allowEdit: boolean;
        public allowReorder: boolean;
        public allowResize: boolean;
        public allowSort: boolean;
        public autoGenerated: boolean;
        public binding: string;
        public cssClass: string;
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        public dataType: any;
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        public editor: any;
        public format: string;
        public genericColumnId: string;
        public header: string;
        public multiLine: boolean;
        public required: boolean;
        public uniqueId: string;
        public validateBinding: boolean;
        public visible: boolean;
        public width: number;
        public wordWrap: boolean;

        // eslint-disable-next-line
        constructor(config: any) {
            // Remove any {} or [] that exist on the binding. In order to accept any format "{EntityName}.[FieldName]" or "EntityName.FieldName"
            config.binding = config.binding.replaceAll(/[{}[\]]+/g, '');
            super(config);
        }

        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        public getProviderConfig(): any {
            // eslint-disable-next-line prefer-const
            let provider = {
                binding: this.binding,
                header: this.header,
                format: this.format,
                isReadOnly: this.allowEdit === false,
                isRequired: this.required,
                visible: this.visible,
                allowDragging: this.allowReorder,
                allowResizing: this.allowResize,
                allowSorting: this.allowSort,
                cssClass: this.cssClass,
                align: this.align,
                wordWrap: this.wordWrap,
                multiLine: this.multiLine,
                dataType: this.dataType,
                editor: this.editor,
                width: this.width > 0 ? this.width : undefined // when the column's width is not set, the default value should be managed by wijmo
            };

            //Cleanning undefined properties
            Object.keys(provider).forEach(
                (key) => provider[key] === undefined && delete provider[key]
            );

            return provider;
        }
    }

    /**
     * Abstract class for columns with Custom Editors
     */
    export abstract class AbstractEditorConfig
        extends AbstractConfiguration
        implements IConfigurationColumnEditor {
        public format: string;
        public required: boolean;
    }

    /**
     * Defines the configuration for Date and Datetime custom editors
     */
    export class EditorConfigDate extends AbstractEditorConfig {
        public max: Date;
        public min: Date;
        public timeFormat: string;

        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        public getProviderConfig(): any {
            // eslint-disable-next-line prefer-const
            let provider = {
                format: this.format,
                timeFormat: this.timeFormat,
                isRequired: this.required,
                min: this.min,
                max: this.max
            };

            //Cleanning undefined properties
            Object.keys(provider).forEach(
                (key) => provider[key] === undefined && delete provider[key]
            );

            return provider;
        }
    }

    /**
     * Defines the configuration for Numeric custom editors
     */
    export class EditorConfigNumber extends AbstractEditorConfig {
        public decimalPlaces: number;
        public maxValue?: number;
        public minValue?: number;
        public step: number;

        // eslint-disable-next-line
        constructor(config: any) {
            super(config);

            //When both are 0, seems that we receive the default value from OS
            //Set it as undefined and the column class will calculate the correct values
            if (this.minValue === this.maxValue && this.minValue === 0) {
                this.maxValue = undefined;
                this.minValue = undefined;
            }
        }

        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        public getProviderConfig(): any {
            // eslint-disable-next-line prefer-const
            let provider = {
                format: this.format,
                isRequired: this.required,
                min: this.minValue,
                max: this.maxValue,
                step: this.step
            };

            //Cleanning undefined properties
            Object.keys(provider).forEach(
                (key) => provider[key] === undefined && delete provider[key]
            );

            return provider;
        }
    }

    /**
     * Defines the configuration for Currency custom editors
     */
    export class EditorConfigCurrency extends EditorConfigNumber {
        public symbol: string;
    }

    /**
     * Defines the configuration for Dropdown custom editors
     */
    export class ColumnConfigDropdown extends ColumnConfig {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        public dataMap: any;
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        public dataMapEditor: any;
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        public dropdownOptions: any;

        // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any
        constructor(config: any, extra: any) {
            super(config);
            this.dataMap = undefined;
            this.dropdownOptions = extra.datamap;
        }

        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        public getProviderConfig(): any {
            const provider = super.getProviderConfig();
            provider.dataMap = this.dataMap;
            provider.dataMapEditor = this.dataMapEditor;

            return provider;
        }
    }

    /**
     * Defines the configuration for Group Columns
     */
    export class ColumnConfigGroup
        extends AbstractConfiguration
        implements IConfigurationColumn {
        public align: string;
        public autoGenerated: boolean;
        public binding: string;
        public collapseTo: string;
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        public dataType: any;
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        public editor: any;
        public format: string;
        public genericColumnId: string;
        public header: string;
        public isCollapsed: boolean;
        public required: boolean;
        public uniqueId: string;
        public validateBinding: boolean;

        // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any
        constructor(config: any, extra: any) {
            super(config);
            this.isCollapsed = extra.isCollapsed;
            this.collapseTo = extra.collapseTo;
        }

        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        public getProviderConfig(): any {
            return {
                header: this.header,
                isCollapsed: this.isCollapsed,
                collapseTo: this.collapseTo,
                align: this.align
            };
        }
    }

    /**
     * Defines the configuration for Text Columns
     */
    export class ColumnConfigText extends ColumnConfig {
        /** The mask applied to the input box during edition
         * This can't conflict with format property
         */
        public mask: string;

        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        public getProviderConfig(): any {
            const config = super.getProviderConfig();

            //Mask and format can't have different values
            //Assuming a mask was defined, it should override format
            if (this.mask && this.mask !== this.format) {
                delete config.format;
            }

            return config;
        }
    }
}
